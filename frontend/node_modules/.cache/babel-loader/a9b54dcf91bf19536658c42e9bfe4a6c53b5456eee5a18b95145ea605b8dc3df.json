{"ast":null,"code":"\"use strict\";\n\nexports.differenceInCalendarISOWeeks = differenceInCalendarISOWeeks;\nvar _index = require(\"./constants.js\");\nvar _index2 = require(\"./startOfISOWeek.js\");\nvar _index3 = require(\"./_lib/getTimezoneOffsetInMilliseconds.js\");\n\n/**\r\n * @name differenceInCalendarISOWeeks\r\n * @category ISO Week Helpers\r\n * @summary Get the number of calendar ISO weeks between the given dates.\r\n *\r\n * @description\r\n * Get the number of calendar ISO weeks between the given dates.\r\n *\r\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n *\r\n * @param dateLeft - The later date\r\n * @param dateRight - The earlier date\r\n *\r\n * @returns The number of calendar ISO weeks\r\n *\r\n * @example\r\n * // How many calendar ISO weeks are between 6 July 2014 and 21 July 2014?\r\n * const result = differenceInCalendarISOWeeks(\r\n *   new Date(2014, 6, 21),\r\n *   new Date(2014, 6, 6)\r\n * )\r\n * //=> 3\r\n */\nfunction differenceInCalendarISOWeeks(dateLeft, dateRight) {\n  const startOfISOWeekLeft = (0, _index2.startOfISOWeek)(dateLeft);\n  const startOfISOWeekRight = (0, _index2.startOfISOWeek)(dateRight);\n  const timestampLeft = +startOfISOWeekLeft - (0, _index3.getTimezoneOffsetInMilliseconds)(startOfISOWeekLeft);\n  const timestampRight = +startOfISOWeekRight - (0, _index3.getTimezoneOffsetInMilliseconds)(startOfISOWeekRight);\n\n  // Round the number of weeks to the nearest integer because the number of\n  // milliseconds in a week is not constant (e.g. it's different in the week of\n  // the daylight saving time clock shift).\n  return Math.round((timestampLeft - timestampRight) / _index.millisecondsInWeek);\n}","map":{"version":3,"names":["exports","differenceInCalendarISOWeeks","_index","require","_index2","_index3","dateLeft","dateRight","startOfISOWeekLeft","startOfISOWeek","startOfISOWeekRight","timestampLeft","getTimezoneOffsetInMilliseconds","timestampRight","Math","round","millisecondsInWeek"],"sources":["D:/Faculty/Spring 2024/SW engineering/project/Expense-Tracker-Application/frontend/node_modules/date-fns/differenceInCalendarISOWeeks.js"],"sourcesContent":["\"use strict\";\r\nexports.differenceInCalendarISOWeeks = differenceInCalendarISOWeeks;\r\nvar _index = require(\"./constants.js\");\r\nvar _index2 = require(\"./startOfISOWeek.js\");\r\nvar _index3 = require(\"./_lib/getTimezoneOffsetInMilliseconds.js\");\r\n\r\n/**\r\n * @name differenceInCalendarISOWeeks\r\n * @category ISO Week Helpers\r\n * @summary Get the number of calendar ISO weeks between the given dates.\r\n *\r\n * @description\r\n * Get the number of calendar ISO weeks between the given dates.\r\n *\r\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n *\r\n * @param dateLeft - The later date\r\n * @param dateRight - The earlier date\r\n *\r\n * @returns The number of calendar ISO weeks\r\n *\r\n * @example\r\n * // How many calendar ISO weeks are between 6 July 2014 and 21 July 2014?\r\n * const result = differenceInCalendarISOWeeks(\r\n *   new Date(2014, 6, 21),\r\n *   new Date(2014, 6, 6)\r\n * )\r\n * //=> 3\r\n */\r\nfunction differenceInCalendarISOWeeks(dateLeft, dateRight) {\r\n  const startOfISOWeekLeft = (0, _index2.startOfISOWeek)(dateLeft);\r\n  const startOfISOWeekRight = (0, _index2.startOfISOWeek)(dateRight);\r\n\r\n  const timestampLeft =\r\n    +startOfISOWeekLeft -\r\n    (0, _index3.getTimezoneOffsetInMilliseconds)(startOfISOWeekLeft);\r\n  const timestampRight =\r\n    +startOfISOWeekRight -\r\n    (0, _index3.getTimezoneOffsetInMilliseconds)(startOfISOWeekRight);\r\n\r\n  // Round the number of weeks to the nearest integer because the number of\r\n  // milliseconds in a week is not constant (e.g. it's different in the week of\r\n  // the daylight saving time clock shift).\r\n  return Math.round(\r\n    (timestampLeft - timestampRight) / _index.millisecondsInWeek,\r\n  );\r\n}\r\n"],"mappings":"AAAA,YAAY;;AACZA,OAAO,CAACC,4BAA4B,GAAGA,4BAA4B;AACnE,IAAIC,MAAM,GAAGC,OAAO,CAAC,gBAAgB,CAAC;AACtC,IAAIC,OAAO,GAAGD,OAAO,CAAC,qBAAqB,CAAC;AAC5C,IAAIE,OAAO,GAAGF,OAAO,CAAC,2CAA2C,CAAC;;AAElE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASF,4BAA4BA,CAACK,QAAQ,EAAEC,SAAS,EAAE;EACzD,MAAMC,kBAAkB,GAAG,CAAC,CAAC,EAAEJ,OAAO,CAACK,cAAc,EAAEH,QAAQ,CAAC;EAChE,MAAMI,mBAAmB,GAAG,CAAC,CAAC,EAAEN,OAAO,CAACK,cAAc,EAAEF,SAAS,CAAC;EAElE,MAAMI,aAAa,GACjB,CAACH,kBAAkB,GACnB,CAAC,CAAC,EAAEH,OAAO,CAACO,+BAA+B,EAAEJ,kBAAkB,CAAC;EAClE,MAAMK,cAAc,GAClB,CAACH,mBAAmB,GACpB,CAAC,CAAC,EAAEL,OAAO,CAACO,+BAA+B,EAAEF,mBAAmB,CAAC;;EAEnE;EACA;EACA;EACA,OAAOI,IAAI,CAACC,KAAK,CACf,CAACJ,aAAa,GAAGE,cAAc,IAAIX,MAAM,CAACc,kBAC5C,CAAC;AACH","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}