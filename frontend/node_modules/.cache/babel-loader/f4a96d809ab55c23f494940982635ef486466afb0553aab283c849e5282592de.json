{"ast":null,"code":"\"use strict\";\n\nexports.addBusinessDays = addBusinessDays;\nvar _index = require(\"./constructFrom.js\");\nvar _index2 = require(\"./isSaturday.js\");\nvar _index3 = require(\"./isSunday.js\");\nvar _index4 = require(\"./isWeekend.js\");\nvar _index5 = require(\"./toDate.js\");\n\n/**\r\n * @name addBusinessDays\r\n * @category Date Extension Helpers\r\n * @summary Add the specified number of business days (mon - fri) to the given date.\r\n *\r\n * @description\r\n * Add the specified number of business days (mon - fri) to the given date, ignoring weekends.\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n *\r\n * @param date - The date to be changed\r\n * @param amount - The amount of business days to be added.\r\n *\r\n * @returns The new date with the business days added\r\n *\r\n * @example\r\n * // Add 10 business days to 1 September 2014:\r\n * const result = addBusinessDays(new Date(2014, 8, 1), 10)\r\n * //=> Mon Sep 15 2014 00:00:00 (skipped weekend days)\r\n */\nfunction addBusinessDays(date, amount) {\n  const _date = (0, _index5.toDate)(date);\n  const startedOnWeekend = (0, _index4.isWeekend)(_date);\n  if (isNaN(amount)) return (0, _index.constructFrom)(date, NaN);\n  const hours = _date.getHours();\n  const sign = amount < 0 ? -1 : 1;\n  const fullWeeks = Math.trunc(amount / 5);\n  _date.setDate(_date.getDate() + fullWeeks * 7);\n\n  // Get remaining days not part of a full week\n  let restDays = Math.abs(amount % 5);\n\n  // Loops over remaining days\n  while (restDays > 0) {\n    _date.setDate(_date.getDate() + sign);\n    if (!(0, _index4.isWeekend)(_date)) restDays -= 1;\n  }\n\n  // If the date is a weekend day and we reduce a dividable of\n  // 5 from it, we land on a weekend date.\n  // To counter this, we add days accordingly to land on the next business day\n  if (startedOnWeekend && (0, _index4.isWeekend)(_date) && amount !== 0) {\n    // If we're reducing days, we want to add days until we land on a weekday\n    // If we're adding days we want to reduce days until we land on a weekday\n    if ((0, _index2.isSaturday)(_date)) _date.setDate(_date.getDate() + (sign < 0 ? 2 : -1));\n    if ((0, _index3.isSunday)(_date)) _date.setDate(_date.getDate() + (sign < 0 ? 1 : -2));\n  }\n\n  // Restore hours to avoid DST lag\n  _date.setHours(hours);\n  return _date;\n}","map":{"version":3,"names":["exports","addBusinessDays","_index","require","_index2","_index3","_index4","_index5","date","amount","_date","toDate","startedOnWeekend","isWeekend","isNaN","constructFrom","NaN","hours","getHours","sign","fullWeeks","Math","trunc","setDate","getDate","restDays","abs","isSaturday","isSunday","setHours"],"sources":["D:/Faculty/Spring 2024/SW engineering/project/Expense-Tracker-Application/frontend/node_modules/date-fns/addBusinessDays.js"],"sourcesContent":["\"use strict\";\r\nexports.addBusinessDays = addBusinessDays;\r\nvar _index = require(\"./constructFrom.js\");\r\nvar _index2 = require(\"./isSaturday.js\");\r\nvar _index3 = require(\"./isSunday.js\");\r\nvar _index4 = require(\"./isWeekend.js\");\r\nvar _index5 = require(\"./toDate.js\");\r\n\r\n/**\r\n * @name addBusinessDays\r\n * @category Date Extension Helpers\r\n * @summary Add the specified number of business days (mon - fri) to the given date.\r\n *\r\n * @description\r\n * Add the specified number of business days (mon - fri) to the given date, ignoring weekends.\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n *\r\n * @param date - The date to be changed\r\n * @param amount - The amount of business days to be added.\r\n *\r\n * @returns The new date with the business days added\r\n *\r\n * @example\r\n * // Add 10 business days to 1 September 2014:\r\n * const result = addBusinessDays(new Date(2014, 8, 1), 10)\r\n * //=> Mon Sep 15 2014 00:00:00 (skipped weekend days)\r\n */\r\nfunction addBusinessDays(date, amount) {\r\n  const _date = (0, _index5.toDate)(date);\r\n  const startedOnWeekend = (0, _index4.isWeekend)(_date);\r\n\r\n  if (isNaN(amount)) return (0, _index.constructFrom)(date, NaN);\r\n\r\n  const hours = _date.getHours();\r\n  const sign = amount < 0 ? -1 : 1;\r\n  const fullWeeks = Math.trunc(amount / 5);\r\n\r\n  _date.setDate(_date.getDate() + fullWeeks * 7);\r\n\r\n  // Get remaining days not part of a full week\r\n  let restDays = Math.abs(amount % 5);\r\n\r\n  // Loops over remaining days\r\n  while (restDays > 0) {\r\n    _date.setDate(_date.getDate() + sign);\r\n    if (!(0, _index4.isWeekend)(_date)) restDays -= 1;\r\n  }\r\n\r\n  // If the date is a weekend day and we reduce a dividable of\r\n  // 5 from it, we land on a weekend date.\r\n  // To counter this, we add days accordingly to land on the next business day\r\n  if (startedOnWeekend && (0, _index4.isWeekend)(_date) && amount !== 0) {\r\n    // If we're reducing days, we want to add days until we land on a weekday\r\n    // If we're adding days we want to reduce days until we land on a weekday\r\n    if ((0, _index2.isSaturday)(_date))\r\n      _date.setDate(_date.getDate() + (sign < 0 ? 2 : -1));\r\n    if ((0, _index3.isSunday)(_date))\r\n      _date.setDate(_date.getDate() + (sign < 0 ? 1 : -2));\r\n  }\r\n\r\n  // Restore hours to avoid DST lag\r\n  _date.setHours(hours);\r\n\r\n  return _date;\r\n}\r\n"],"mappings":"AAAA,YAAY;;AACZA,OAAO,CAACC,eAAe,GAAGA,eAAe;AACzC,IAAIC,MAAM,GAAGC,OAAO,CAAC,oBAAoB,CAAC;AAC1C,IAAIC,OAAO,GAAGD,OAAO,CAAC,iBAAiB,CAAC;AACxC,IAAIE,OAAO,GAAGF,OAAO,CAAC,eAAe,CAAC;AACtC,IAAIG,OAAO,GAAGH,OAAO,CAAC,gBAAgB,CAAC;AACvC,IAAII,OAAO,GAAGJ,OAAO,CAAC,aAAa,CAAC;;AAEpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASF,eAAeA,CAACO,IAAI,EAAEC,MAAM,EAAE;EACrC,MAAMC,KAAK,GAAG,CAAC,CAAC,EAAEH,OAAO,CAACI,MAAM,EAAEH,IAAI,CAAC;EACvC,MAAMI,gBAAgB,GAAG,CAAC,CAAC,EAAEN,OAAO,CAACO,SAAS,EAAEH,KAAK,CAAC;EAEtD,IAAII,KAAK,CAACL,MAAM,CAAC,EAAE,OAAO,CAAC,CAAC,EAAEP,MAAM,CAACa,aAAa,EAAEP,IAAI,EAAEQ,GAAG,CAAC;EAE9D,MAAMC,KAAK,GAAGP,KAAK,CAACQ,QAAQ,CAAC,CAAC;EAC9B,MAAMC,IAAI,GAAGV,MAAM,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC;EAChC,MAAMW,SAAS,GAAGC,IAAI,CAACC,KAAK,CAACb,MAAM,GAAG,CAAC,CAAC;EAExCC,KAAK,CAACa,OAAO,CAACb,KAAK,CAACc,OAAO,CAAC,CAAC,GAAGJ,SAAS,GAAG,CAAC,CAAC;;EAE9C;EACA,IAAIK,QAAQ,GAAGJ,IAAI,CAACK,GAAG,CAACjB,MAAM,GAAG,CAAC,CAAC;;EAEnC;EACA,OAAOgB,QAAQ,GAAG,CAAC,EAAE;IACnBf,KAAK,CAACa,OAAO,CAACb,KAAK,CAACc,OAAO,CAAC,CAAC,GAAGL,IAAI,CAAC;IACrC,IAAI,CAAC,CAAC,CAAC,EAAEb,OAAO,CAACO,SAAS,EAAEH,KAAK,CAAC,EAAEe,QAAQ,IAAI,CAAC;EACnD;;EAEA;EACA;EACA;EACA,IAAIb,gBAAgB,IAAI,CAAC,CAAC,EAAEN,OAAO,CAACO,SAAS,EAAEH,KAAK,CAAC,IAAID,MAAM,KAAK,CAAC,EAAE;IACrE;IACA;IACA,IAAI,CAAC,CAAC,EAAEL,OAAO,CAACuB,UAAU,EAAEjB,KAAK,CAAC,EAChCA,KAAK,CAACa,OAAO,CAACb,KAAK,CAACc,OAAO,CAAC,CAAC,IAAIL,IAAI,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IACtD,IAAI,CAAC,CAAC,EAAEd,OAAO,CAACuB,QAAQ,EAAElB,KAAK,CAAC,EAC9BA,KAAK,CAACa,OAAO,CAACb,KAAK,CAACc,OAAO,CAAC,CAAC,IAAIL,IAAI,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;EACxD;;EAEA;EACAT,KAAK,CAACmB,QAAQ,CAACZ,KAAK,CAAC;EAErB,OAAOP,KAAK;AACd","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}