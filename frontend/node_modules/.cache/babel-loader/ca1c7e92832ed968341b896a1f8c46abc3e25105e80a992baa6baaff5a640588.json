{"ast":null,"code":"\"use strict\";\n\nexports.roundToNearestMinutes = roundToNearestMinutes;\nvar _index = require(\"./_lib/getRoundingMethod.js\");\nvar _index2 = require(\"./constructFrom.js\");\nvar _index3 = require(\"./toDate.js\");\n\n/**\r\n * The {@link roundToNearestMinutes} function options.\r\n */\n\n/**\r\n * @name roundToNearestMinutes\r\n * @category Minute Helpers\r\n * @summary Rounds the given date to the nearest minute\r\n *\r\n * @description\r\n * Rounds the given date to the nearest minute (or number of minutes).\r\n * Rounds up when the given date is exactly between the nearest round minutes.\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n *\r\n * @param date - The date to round\r\n * @param options - An object with options.\r\n *\r\n * @returns The new date rounded to the closest minute\r\n *\r\n * @example\r\n * // Round 10 July 2014 12:12:34 to nearest minute:\r\n * const result = roundToNearestMinutes(new Date(2014, 6, 10, 12, 12, 34))\r\n * //=> Thu Jul 10 2014 12:13:00\r\n *\r\n * @example\r\n * // Round 10 July 2014 12:12:34 to nearest quarter hour:\r\n * const result = roundToNearestMinutes(new Date(2014, 6, 10, 12, 12, 34), { nearestTo: 15 })\r\n * //=> Thu Jul 10 2014 12:15:00\r\n *\r\n * @example\r\n * // Floor (rounds down) 10 July 2014 12:12:34 to nearest minute:\r\n * const result = roundToNearestMinutes(new Date(2014, 6, 10, 12, 12, 34), { roundingMethod: 'floor' })\r\n * //=> Thu Jul 10 2014 12:12:00\r\n *\r\n * @example\r\n * // Ceil (rounds up) 10 July 2014 12:12:34 to nearest half hour:\r\n * const result = roundToNearestMinutes(new Date(2014, 6, 10, 12, 12, 34), { roundingMethod: 'ceil', nearestTo: 30 })\r\n * //=> Thu Jul 10 2014 12:30:00\r\n */\nfunction roundToNearestMinutes(date, options) {\n  const nearestTo = options?.nearestTo ?? 1;\n  if (nearestTo < 1 || nearestTo > 30) return (0, _index2.constructFrom)(date, NaN);\n  const _date = (0, _index3.toDate)(date);\n  const fractionalSeconds = _date.getSeconds() / 60;\n  const fractionalMilliseconds = _date.getMilliseconds() / 1000 / 60;\n  const minutes = _date.getMinutes() + fractionalSeconds + fractionalMilliseconds;\n\n  // Unlike the `differenceIn*` functions, the default rounding behavior is `round` and not 'trunc'\n  const method = options?.roundingMethod ?? \"round\";\n  const roundingMethod = (0, _index.getRoundingMethod)(method);\n  const roundedMinutes = roundingMethod(minutes / nearestTo) * nearestTo;\n  const result = (0, _index2.constructFrom)(date, _date);\n  result.setMinutes(roundedMinutes, 0, 0);\n  return result;\n}","map":{"version":3,"names":["exports","roundToNearestMinutes","_index","require","_index2","_index3","date","options","nearestTo","constructFrom","NaN","_date","toDate","fractionalSeconds","getSeconds","fractionalMilliseconds","getMilliseconds","minutes","getMinutes","method","roundingMethod","getRoundingMethod","roundedMinutes","result","setMinutes"],"sources":["D:/Faculty/Spring 2024/SW engineering/project/Expense-Tracker-Application/frontend/node_modules/date-fns/roundToNearestMinutes.js"],"sourcesContent":["\"use strict\";\r\nexports.roundToNearestMinutes = roundToNearestMinutes;\r\nvar _index = require(\"./_lib/getRoundingMethod.js\");\r\nvar _index2 = require(\"./constructFrom.js\");\r\nvar _index3 = require(\"./toDate.js\");\r\n\r\n/**\r\n * The {@link roundToNearestMinutes} function options.\r\n */\r\n\r\n/**\r\n * @name roundToNearestMinutes\r\n * @category Minute Helpers\r\n * @summary Rounds the given date to the nearest minute\r\n *\r\n * @description\r\n * Rounds the given date to the nearest minute (or number of minutes).\r\n * Rounds up when the given date is exactly between the nearest round minutes.\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n *\r\n * @param date - The date to round\r\n * @param options - An object with options.\r\n *\r\n * @returns The new date rounded to the closest minute\r\n *\r\n * @example\r\n * // Round 10 July 2014 12:12:34 to nearest minute:\r\n * const result = roundToNearestMinutes(new Date(2014, 6, 10, 12, 12, 34))\r\n * //=> Thu Jul 10 2014 12:13:00\r\n *\r\n * @example\r\n * // Round 10 July 2014 12:12:34 to nearest quarter hour:\r\n * const result = roundToNearestMinutes(new Date(2014, 6, 10, 12, 12, 34), { nearestTo: 15 })\r\n * //=> Thu Jul 10 2014 12:15:00\r\n *\r\n * @example\r\n * // Floor (rounds down) 10 July 2014 12:12:34 to nearest minute:\r\n * const result = roundToNearestMinutes(new Date(2014, 6, 10, 12, 12, 34), { roundingMethod: 'floor' })\r\n * //=> Thu Jul 10 2014 12:12:00\r\n *\r\n * @example\r\n * // Ceil (rounds up) 10 July 2014 12:12:34 to nearest half hour:\r\n * const result = roundToNearestMinutes(new Date(2014, 6, 10, 12, 12, 34), { roundingMethod: 'ceil', nearestTo: 30 })\r\n * //=> Thu Jul 10 2014 12:30:00\r\n */\r\nfunction roundToNearestMinutes(date, options) {\r\n  const nearestTo = options?.nearestTo ?? 1;\r\n\r\n  if (nearestTo < 1 || nearestTo > 30)\r\n    return (0, _index2.constructFrom)(date, NaN);\r\n\r\n  const _date = (0, _index3.toDate)(date);\r\n  const fractionalSeconds = _date.getSeconds() / 60;\r\n  const fractionalMilliseconds = _date.getMilliseconds() / 1000 / 60;\r\n  const minutes =\r\n    _date.getMinutes() + fractionalSeconds + fractionalMilliseconds;\r\n\r\n  // Unlike the `differenceIn*` functions, the default rounding behavior is `round` and not 'trunc'\r\n  const method = options?.roundingMethod ?? \"round\";\r\n  const roundingMethod = (0, _index.getRoundingMethod)(method);\r\n\r\n  const roundedMinutes = roundingMethod(minutes / nearestTo) * nearestTo;\r\n\r\n  const result = (0, _index2.constructFrom)(date, _date);\r\n  result.setMinutes(roundedMinutes, 0, 0);\r\n  return result;\r\n}\r\n"],"mappings":"AAAA,YAAY;;AACZA,OAAO,CAACC,qBAAqB,GAAGA,qBAAqB;AACrD,IAAIC,MAAM,GAAGC,OAAO,CAAC,6BAA6B,CAAC;AACnD,IAAIC,OAAO,GAAGD,OAAO,CAAC,oBAAoB,CAAC;AAC3C,IAAIE,OAAO,GAAGF,OAAO,CAAC,aAAa,CAAC;;AAEpC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASF,qBAAqBA,CAACK,IAAI,EAAEC,OAAO,EAAE;EAC5C,MAAMC,SAAS,GAAGD,OAAO,EAAEC,SAAS,IAAI,CAAC;EAEzC,IAAIA,SAAS,GAAG,CAAC,IAAIA,SAAS,GAAG,EAAE,EACjC,OAAO,CAAC,CAAC,EAAEJ,OAAO,CAACK,aAAa,EAAEH,IAAI,EAAEI,GAAG,CAAC;EAE9C,MAAMC,KAAK,GAAG,CAAC,CAAC,EAAEN,OAAO,CAACO,MAAM,EAAEN,IAAI,CAAC;EACvC,MAAMO,iBAAiB,GAAGF,KAAK,CAACG,UAAU,CAAC,CAAC,GAAG,EAAE;EACjD,MAAMC,sBAAsB,GAAGJ,KAAK,CAACK,eAAe,CAAC,CAAC,GAAG,IAAI,GAAG,EAAE;EAClE,MAAMC,OAAO,GACXN,KAAK,CAACO,UAAU,CAAC,CAAC,GAAGL,iBAAiB,GAAGE,sBAAsB;;EAEjE;EACA,MAAMI,MAAM,GAAGZ,OAAO,EAAEa,cAAc,IAAI,OAAO;EACjD,MAAMA,cAAc,GAAG,CAAC,CAAC,EAAElB,MAAM,CAACmB,iBAAiB,EAAEF,MAAM,CAAC;EAE5D,MAAMG,cAAc,GAAGF,cAAc,CAACH,OAAO,GAAGT,SAAS,CAAC,GAAGA,SAAS;EAEtE,MAAMe,MAAM,GAAG,CAAC,CAAC,EAAEnB,OAAO,CAACK,aAAa,EAAEH,IAAI,EAAEK,KAAK,CAAC;EACtDY,MAAM,CAACC,UAAU,CAACF,cAAc,EAAE,CAAC,EAAE,CAAC,CAAC;EACvC,OAAOC,MAAM;AACf","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}