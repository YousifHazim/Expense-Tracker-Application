{"ast":null,"code":"\"use strict\";\n\nexports.eachHourOfInterval = eachHourOfInterval;\nvar _index = require(\"./addHours.js\");\nvar _index2 = require(\"./toDate.js\");\n\n/**\n * The {@link eachHourOfInterval} function options.\n */\n\n/**\n * @name eachHourOfInterval\n * @category Interval Helpers\n * @summary Return the array of hours within the specified time interval.\n *\n * @description\n * Return the array of hours within the specified time interval.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param interval - The interval.\n * @param options - An object with options.\n *\n * @returns The array with starts of hours from the hour of the interval start to the hour of the interval end\n *\n * @example\n * // Each hour between 6 October 2014, 12:00 and 6 October 2014, 15:00\n * const result = eachHourOfInterval({\n *   start: new Date(2014, 9, 6, 12),\n *   end: new Date(2014, 9, 6, 15)\n * })\n * //=> [\n * //   Mon Oct 06 2014 12:00:00,\n * //   Mon Oct 06 2014 13:00:00,\n * //   Mon Oct 06 2014 14:00:00,\n * //   Mon Oct 06 2014 15:00:00\n * // ]\n */\nfunction eachHourOfInterval(interval, options) {\n  var _options$step;\n  const startDate = (0, _index2.toDate)(interval.start);\n  const endDate = (0, _index2.toDate)(interval.end);\n  let reversed = +startDate > +endDate;\n  const endTime = reversed ? +startDate : +endDate;\n  let currentDate = reversed ? endDate : startDate;\n  currentDate.setMinutes(0, 0, 0);\n  let step = (_options$step = options === null || options === void 0 ? void 0 : options.step) !== null && _options$step !== void 0 ? _options$step : 1;\n  if (!step) return [];\n  if (step < 0) {\n    step = -step;\n    reversed = !reversed;\n  }\n  const dates = [];\n  while (+currentDate <= endTime) {\n    dates.push((0, _index2.toDate)(currentDate));\n    currentDate = (0, _index.addHours)(currentDate, step);\n  }\n  return reversed ? dates.reverse() : dates;\n}","map":{"version":3,"names":["exports","eachHourOfInterval","_index","require","_index2","interval","options","_options$step","startDate","toDate","start","endDate","end","reversed","endTime","currentDate","setMinutes","step","dates","push","addHours","reverse"],"sources":["C:/Users/mh_sm/Dropbox/PC/Desktop/computer/SENIOR-1/Spring/SW/Project/EXPENSE-TRACKER/frontend/node_modules/date-fns/eachHourOfInterval.js"],"sourcesContent":["\"use strict\";\nexports.eachHourOfInterval = eachHourOfInterval;\nvar _index = require(\"./addHours.js\");\nvar _index2 = require(\"./toDate.js\");\n\n/**\n * The {@link eachHourOfInterval} function options.\n */\n\n/**\n * @name eachHourOfInterval\n * @category Interval Helpers\n * @summary Return the array of hours within the specified time interval.\n *\n * @description\n * Return the array of hours within the specified time interval.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param interval - The interval.\n * @param options - An object with options.\n *\n * @returns The array with starts of hours from the hour of the interval start to the hour of the interval end\n *\n * @example\n * // Each hour between 6 October 2014, 12:00 and 6 October 2014, 15:00\n * const result = eachHourOfInterval({\n *   start: new Date(2014, 9, 6, 12),\n *   end: new Date(2014, 9, 6, 15)\n * })\n * //=> [\n * //   Mon Oct 06 2014 12:00:00,\n * //   Mon Oct 06 2014 13:00:00,\n * //   Mon Oct 06 2014 14:00:00,\n * //   Mon Oct 06 2014 15:00:00\n * // ]\n */\nfunction eachHourOfInterval(interval, options) {\n  const startDate = (0, _index2.toDate)(interval.start);\n  const endDate = (0, _index2.toDate)(interval.end);\n\n  let reversed = +startDate > +endDate;\n  const endTime = reversed ? +startDate : +endDate;\n  let currentDate = reversed ? endDate : startDate;\n  currentDate.setMinutes(0, 0, 0);\n\n  let step = options?.step ?? 1;\n  if (!step) return [];\n  if (step < 0) {\n    step = -step;\n    reversed = !reversed;\n  }\n\n  const dates = [];\n\n  while (+currentDate <= endTime) {\n    dates.push((0, _index2.toDate)(currentDate));\n    currentDate = (0, _index.addHours)(currentDate, step);\n  }\n\n  return reversed ? dates.reverse() : dates;\n}\n"],"mappings":"AAAA,YAAY;;AACZA,OAAO,CAACC,kBAAkB,GAAGA,kBAAkB;AAC/C,IAAIC,MAAM,GAAGC,OAAO,CAAC,eAAe,CAAC;AACrC,IAAIC,OAAO,GAAGD,OAAO,CAAC,aAAa,CAAC;;AAEpC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASF,kBAAkBA,CAACI,QAAQ,EAAEC,OAAO,EAAE;EAAA,IAAAC,aAAA;EAC7C,MAAMC,SAAS,GAAG,CAAC,CAAC,EAAEJ,OAAO,CAACK,MAAM,EAAEJ,QAAQ,CAACK,KAAK,CAAC;EACrD,MAAMC,OAAO,GAAG,CAAC,CAAC,EAAEP,OAAO,CAACK,MAAM,EAAEJ,QAAQ,CAACO,GAAG,CAAC;EAEjD,IAAIC,QAAQ,GAAG,CAACL,SAAS,GAAG,CAACG,OAAO;EACpC,MAAMG,OAAO,GAAGD,QAAQ,GAAG,CAACL,SAAS,GAAG,CAACG,OAAO;EAChD,IAAII,WAAW,GAAGF,QAAQ,GAAGF,OAAO,GAAGH,SAAS;EAChDO,WAAW,CAACC,UAAU,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;EAE/B,IAAIC,IAAI,IAAAV,aAAA,GAAGD,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEW,IAAI,cAAAV,aAAA,cAAAA,aAAA,GAAI,CAAC;EAC7B,IAAI,CAACU,IAAI,EAAE,OAAO,EAAE;EACpB,IAAIA,IAAI,GAAG,CAAC,EAAE;IACZA,IAAI,GAAG,CAACA,IAAI;IACZJ,QAAQ,GAAG,CAACA,QAAQ;EACtB;EAEA,MAAMK,KAAK,GAAG,EAAE;EAEhB,OAAO,CAACH,WAAW,IAAID,OAAO,EAAE;IAC9BI,KAAK,CAACC,IAAI,CAAC,CAAC,CAAC,EAAEf,OAAO,CAACK,MAAM,EAAEM,WAAW,CAAC,CAAC;IAC5CA,WAAW,GAAG,CAAC,CAAC,EAAEb,MAAM,CAACkB,QAAQ,EAAEL,WAAW,EAAEE,IAAI,CAAC;EACvD;EAEA,OAAOJ,QAAQ,GAAGK,KAAK,CAACG,OAAO,CAAC,CAAC,GAAGH,KAAK;AAC3C","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}