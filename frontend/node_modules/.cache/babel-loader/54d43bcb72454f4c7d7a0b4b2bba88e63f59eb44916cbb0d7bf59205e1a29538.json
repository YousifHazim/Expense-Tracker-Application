{"ast":null,"code":"\"use strict\";\n\nexports.isSameISOWeekYear = isSameISOWeekYear;\nvar _index = require(\"./startOfISOWeekYear.js\");\n\n/**\r\n * @name isSameISOWeekYear\r\n * @category ISO Week-Numbering Year Helpers\r\n * @summary Are the given dates in the same ISO week-numbering year?\r\n *\r\n * @description\r\n * Are the given dates in the same ISO week-numbering year?\r\n *\r\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n *\r\n * @param dateLeft - The first date to check\r\n * @param dateRight - The second date to check\r\n *\r\n * @returns The dates are in the same ISO week-numbering year\r\n *\r\n * @example\r\n * // Are 29 December 2003 and 2 January 2005 in the same ISO week-numbering year?\r\n * const result = isSameISOWeekYear(new Date(2003, 11, 29), new Date(2005, 0, 2))\r\n * //=> true\r\n */\nfunction isSameISOWeekYear(dateLeft, dateRight) {\n  const dateLeftStartOfYear = (0, _index.startOfISOWeekYear)(dateLeft);\n  const dateRightStartOfYear = (0, _index.startOfISOWeekYear)(dateRight);\n  return +dateLeftStartOfYear === +dateRightStartOfYear;\n}","map":{"version":3,"names":["exports","isSameISOWeekYear","_index","require","dateLeft","dateRight","dateLeftStartOfYear","startOfISOWeekYear","dateRightStartOfYear"],"sources":["D:/Faculty/Spring 2024/SW engineering/project/Expense-Tracker-Application/frontend/node_modules/date-fns/isSameISOWeekYear.js"],"sourcesContent":["\"use strict\";\r\nexports.isSameISOWeekYear = isSameISOWeekYear;\r\nvar _index = require(\"./startOfISOWeekYear.js\");\r\n\r\n/**\r\n * @name isSameISOWeekYear\r\n * @category ISO Week-Numbering Year Helpers\r\n * @summary Are the given dates in the same ISO week-numbering year?\r\n *\r\n * @description\r\n * Are the given dates in the same ISO week-numbering year?\r\n *\r\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n *\r\n * @param dateLeft - The first date to check\r\n * @param dateRight - The second date to check\r\n *\r\n * @returns The dates are in the same ISO week-numbering year\r\n *\r\n * @example\r\n * // Are 29 December 2003 and 2 January 2005 in the same ISO week-numbering year?\r\n * const result = isSameISOWeekYear(new Date(2003, 11, 29), new Date(2005, 0, 2))\r\n * //=> true\r\n */\r\nfunction isSameISOWeekYear(dateLeft, dateRight) {\r\n  const dateLeftStartOfYear = (0, _index.startOfISOWeekYear)(dateLeft);\r\n  const dateRightStartOfYear = (0, _index.startOfISOWeekYear)(dateRight);\r\n\r\n  return +dateLeftStartOfYear === +dateRightStartOfYear;\r\n}\r\n"],"mappings":"AAAA,YAAY;;AACZA,OAAO,CAACC,iBAAiB,GAAGA,iBAAiB;AAC7C,IAAIC,MAAM,GAAGC,OAAO,CAAC,yBAAyB,CAAC;;AAE/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASF,iBAAiBA,CAACG,QAAQ,EAAEC,SAAS,EAAE;EAC9C,MAAMC,mBAAmB,GAAG,CAAC,CAAC,EAAEJ,MAAM,CAACK,kBAAkB,EAAEH,QAAQ,CAAC;EACpE,MAAMI,oBAAoB,GAAG,CAAC,CAAC,EAAEN,MAAM,CAACK,kBAAkB,EAAEF,SAAS,CAAC;EAEtE,OAAO,CAACC,mBAAmB,KAAK,CAACE,oBAAoB;AACvD","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}