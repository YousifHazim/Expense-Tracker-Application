{"ast":null,"code":"\"use strict\";\n\nexports.getWeek = getWeek;\nvar _index = require(\"./constants.js\");\nvar _index2 = require(\"./startOfWeek.js\");\nvar _index3 = require(\"./startOfWeekYear.js\");\nvar _index4 = require(\"./toDate.js\");\n\n/**\r\n * The {@link getWeek} function options.\r\n */\n\n/**\r\n * @name getWeek\r\n * @category Week Helpers\r\n * @summary Get the local week index of the given date.\r\n *\r\n * @description\r\n * Get the local week index of the given date.\r\n * The exact calculation depends on the values of\r\n * `options.weekStartsOn` (which is the index of the first day of the week)\r\n * and `options.firstWeekContainsDate` (which is the day of January, which is always in\r\n * the first week of the week-numbering year)\r\n *\r\n * Week numbering: https://en.wikipedia.org/wiki/Week#The_ISO_week_date_system\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n *\r\n * @param date - The given date\r\n * @param options - An object with options\r\n *\r\n * @returns The week\r\n *\r\n * @example\r\n * // Which week of the local week numbering year is 2 January 2005 with default options?\r\n * const result = getWeek(new Date(2005, 0, 2))\r\n * //=> 2\r\n *\r\n * @example\r\n * // Which week of the local week numbering year is 2 January 2005,\r\n * // if Monday is the first day of the week,\r\n * // and the first week of the year always contains 4 January?\r\n * const result = getWeek(new Date(2005, 0, 2), {\r\n *   weekStartsOn: 1,\r\n *   firstWeekContainsDate: 4\r\n * })\r\n * //=> 53\r\n */\n\nfunction getWeek(date, options) {\n  const _date = (0, _index4.toDate)(date);\n  const diff = +(0, _index2.startOfWeek)(_date, options) - +(0, _index3.startOfWeekYear)(_date, options);\n\n  // Round the number of weeks to the nearest integer because the number of\n  // milliseconds in a week is not constant (e.g. it's different in the week of\n  // the daylight saving time clock shift).\n  return Math.round(diff / _index.millisecondsInWeek) + 1;\n}","map":{"version":3,"names":["exports","getWeek","_index","require","_index2","_index3","_index4","date","options","_date","toDate","diff","startOfWeek","startOfWeekYear","Math","round","millisecondsInWeek"],"sources":["D:/Faculty/Spring 2024/SW engineering/project/Expense-Tracker-Application/frontend/node_modules/date-fns/getWeek.js"],"sourcesContent":["\"use strict\";\r\nexports.getWeek = getWeek;\r\nvar _index = require(\"./constants.js\");\r\nvar _index2 = require(\"./startOfWeek.js\");\r\nvar _index3 = require(\"./startOfWeekYear.js\");\r\nvar _index4 = require(\"./toDate.js\");\r\n\r\n/**\r\n * The {@link getWeek} function options.\r\n */\r\n\r\n/**\r\n * @name getWeek\r\n * @category Week Helpers\r\n * @summary Get the local week index of the given date.\r\n *\r\n * @description\r\n * Get the local week index of the given date.\r\n * The exact calculation depends on the values of\r\n * `options.weekStartsOn` (which is the index of the first day of the week)\r\n * and `options.firstWeekContainsDate` (which is the day of January, which is always in\r\n * the first week of the week-numbering year)\r\n *\r\n * Week numbering: https://en.wikipedia.org/wiki/Week#The_ISO_week_date_system\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n *\r\n * @param date - The given date\r\n * @param options - An object with options\r\n *\r\n * @returns The week\r\n *\r\n * @example\r\n * // Which week of the local week numbering year is 2 January 2005 with default options?\r\n * const result = getWeek(new Date(2005, 0, 2))\r\n * //=> 2\r\n *\r\n * @example\r\n * // Which week of the local week numbering year is 2 January 2005,\r\n * // if Monday is the first day of the week,\r\n * // and the first week of the year always contains 4 January?\r\n * const result = getWeek(new Date(2005, 0, 2), {\r\n *   weekStartsOn: 1,\r\n *   firstWeekContainsDate: 4\r\n * })\r\n * //=> 53\r\n */\r\n\r\nfunction getWeek(date, options) {\r\n  const _date = (0, _index4.toDate)(date);\r\n  const diff =\r\n    +(0, _index2.startOfWeek)(_date, options) -\r\n    +(0, _index3.startOfWeekYear)(_date, options);\r\n\r\n  // Round the number of weeks to the nearest integer because the number of\r\n  // milliseconds in a week is not constant (e.g. it's different in the week of\r\n  // the daylight saving time clock shift).\r\n  return Math.round(diff / _index.millisecondsInWeek) + 1;\r\n}\r\n"],"mappings":"AAAA,YAAY;;AACZA,OAAO,CAACC,OAAO,GAAGA,OAAO;AACzB,IAAIC,MAAM,GAAGC,OAAO,CAAC,gBAAgB,CAAC;AACtC,IAAIC,OAAO,GAAGD,OAAO,CAAC,kBAAkB,CAAC;AACzC,IAAIE,OAAO,GAAGF,OAAO,CAAC,sBAAsB,CAAC;AAC7C,IAAIG,OAAO,GAAGH,OAAO,CAAC,aAAa,CAAC;;AAEpC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASF,OAAOA,CAACM,IAAI,EAAEC,OAAO,EAAE;EAC9B,MAAMC,KAAK,GAAG,CAAC,CAAC,EAAEH,OAAO,CAACI,MAAM,EAAEH,IAAI,CAAC;EACvC,MAAMI,IAAI,GACR,CAAC,CAAC,CAAC,EAAEP,OAAO,CAACQ,WAAW,EAAEH,KAAK,EAAED,OAAO,CAAC,GACzC,CAAC,CAAC,CAAC,EAAEH,OAAO,CAACQ,eAAe,EAAEJ,KAAK,EAAED,OAAO,CAAC;;EAE/C;EACA;EACA;EACA,OAAOM,IAAI,CAACC,KAAK,CAACJ,IAAI,GAAGT,MAAM,CAACc,kBAAkB,CAAC,GAAG,CAAC;AACzD","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}