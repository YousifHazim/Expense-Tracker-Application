{"ast":null,"code":"\"use strict\";\n\nexports.getISOWeekYear = getISOWeekYear;\nvar _index = require(\"./constructFrom.js\");\nvar _index2 = require(\"./startOfISOWeek.js\");\nvar _index3 = require(\"./toDate.js\");\n\n/**\r\n * @name getISOWeekYear\r\n * @category ISO Week-Numbering Year Helpers\r\n * @summary Get the ISO week-numbering year of the given date.\r\n *\r\n * @description\r\n * Get the ISO week-numbering year of the given date,\r\n * which always starts 3 days before the year's first Thursday.\r\n *\r\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n *\r\n * @param date - The given date\r\n *\r\n * @returns The ISO week-numbering year\r\n *\r\n * @example\r\n * // Which ISO-week numbering year is 2 January 2005?\r\n * const result = getISOWeekYear(new Date(2005, 0, 2))\r\n * //=> 2004\r\n */\nfunction getISOWeekYear(date) {\n  const _date = (0, _index3.toDate)(date);\n  const year = _date.getFullYear();\n  const fourthOfJanuaryOfNextYear = (0, _index.constructFrom)(date, 0);\n  fourthOfJanuaryOfNextYear.setFullYear(year + 1, 0, 4);\n  fourthOfJanuaryOfNextYear.setHours(0, 0, 0, 0);\n  const startOfNextYear = (0, _index2.startOfISOWeek)(fourthOfJanuaryOfNextYear);\n  const fourthOfJanuaryOfThisYear = (0, _index.constructFrom)(date, 0);\n  fourthOfJanuaryOfThisYear.setFullYear(year, 0, 4);\n  fourthOfJanuaryOfThisYear.setHours(0, 0, 0, 0);\n  const startOfThisYear = (0, _index2.startOfISOWeek)(fourthOfJanuaryOfThisYear);\n  if (_date.getTime() >= startOfNextYear.getTime()) {\n    return year + 1;\n  } else if (_date.getTime() >= startOfThisYear.getTime()) {\n    return year;\n  } else {\n    return year - 1;\n  }\n}","map":{"version":3,"names":["exports","getISOWeekYear","_index","require","_index2","_index3","date","_date","toDate","year","getFullYear","fourthOfJanuaryOfNextYear","constructFrom","setFullYear","setHours","startOfNextYear","startOfISOWeek","fourthOfJanuaryOfThisYear","startOfThisYear","getTime"],"sources":["D:/Faculty/Spring 2024/SW engineering/project/Expense-Tracker-Application/frontend/node_modules/date-fns/getISOWeekYear.js"],"sourcesContent":["\"use strict\";\r\nexports.getISOWeekYear = getISOWeekYear;\r\nvar _index = require(\"./constructFrom.js\");\r\nvar _index2 = require(\"./startOfISOWeek.js\");\r\nvar _index3 = require(\"./toDate.js\");\r\n\r\n/**\r\n * @name getISOWeekYear\r\n * @category ISO Week-Numbering Year Helpers\r\n * @summary Get the ISO week-numbering year of the given date.\r\n *\r\n * @description\r\n * Get the ISO week-numbering year of the given date,\r\n * which always starts 3 days before the year's first Thursday.\r\n *\r\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n *\r\n * @param date - The given date\r\n *\r\n * @returns The ISO week-numbering year\r\n *\r\n * @example\r\n * // Which ISO-week numbering year is 2 January 2005?\r\n * const result = getISOWeekYear(new Date(2005, 0, 2))\r\n * //=> 2004\r\n */\r\nfunction getISOWeekYear(date) {\r\n  const _date = (0, _index3.toDate)(date);\r\n  const year = _date.getFullYear();\r\n\r\n  const fourthOfJanuaryOfNextYear = (0, _index.constructFrom)(date, 0);\r\n  fourthOfJanuaryOfNextYear.setFullYear(year + 1, 0, 4);\r\n  fourthOfJanuaryOfNextYear.setHours(0, 0, 0, 0);\r\n  const startOfNextYear = (0, _index2.startOfISOWeek)(\r\n    fourthOfJanuaryOfNextYear,\r\n  );\r\n\r\n  const fourthOfJanuaryOfThisYear = (0, _index.constructFrom)(date, 0);\r\n  fourthOfJanuaryOfThisYear.setFullYear(year, 0, 4);\r\n  fourthOfJanuaryOfThisYear.setHours(0, 0, 0, 0);\r\n  const startOfThisYear = (0, _index2.startOfISOWeek)(\r\n    fourthOfJanuaryOfThisYear,\r\n  );\r\n\r\n  if (_date.getTime() >= startOfNextYear.getTime()) {\r\n    return year + 1;\r\n  } else if (_date.getTime() >= startOfThisYear.getTime()) {\r\n    return year;\r\n  } else {\r\n    return year - 1;\r\n  }\r\n}\r\n"],"mappings":"AAAA,YAAY;;AACZA,OAAO,CAACC,cAAc,GAAGA,cAAc;AACvC,IAAIC,MAAM,GAAGC,OAAO,CAAC,oBAAoB,CAAC;AAC1C,IAAIC,OAAO,GAAGD,OAAO,CAAC,qBAAqB,CAAC;AAC5C,IAAIE,OAAO,GAAGF,OAAO,CAAC,aAAa,CAAC;;AAEpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASF,cAAcA,CAACK,IAAI,EAAE;EAC5B,MAAMC,KAAK,GAAG,CAAC,CAAC,EAAEF,OAAO,CAACG,MAAM,EAAEF,IAAI,CAAC;EACvC,MAAMG,IAAI,GAAGF,KAAK,CAACG,WAAW,CAAC,CAAC;EAEhC,MAAMC,yBAAyB,GAAG,CAAC,CAAC,EAAET,MAAM,CAACU,aAAa,EAAEN,IAAI,EAAE,CAAC,CAAC;EACpEK,yBAAyB,CAACE,WAAW,CAACJ,IAAI,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;EACrDE,yBAAyB,CAACG,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;EAC9C,MAAMC,eAAe,GAAG,CAAC,CAAC,EAAEX,OAAO,CAACY,cAAc,EAChDL,yBACF,CAAC;EAED,MAAMM,yBAAyB,GAAG,CAAC,CAAC,EAAEf,MAAM,CAACU,aAAa,EAAEN,IAAI,EAAE,CAAC,CAAC;EACpEW,yBAAyB,CAACJ,WAAW,CAACJ,IAAI,EAAE,CAAC,EAAE,CAAC,CAAC;EACjDQ,yBAAyB,CAACH,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;EAC9C,MAAMI,eAAe,GAAG,CAAC,CAAC,EAAEd,OAAO,CAACY,cAAc,EAChDC,yBACF,CAAC;EAED,IAAIV,KAAK,CAACY,OAAO,CAAC,CAAC,IAAIJ,eAAe,CAACI,OAAO,CAAC,CAAC,EAAE;IAChD,OAAOV,IAAI,GAAG,CAAC;EACjB,CAAC,MAAM,IAAIF,KAAK,CAACY,OAAO,CAAC,CAAC,IAAID,eAAe,CAACC,OAAO,CAAC,CAAC,EAAE;IACvD,OAAOV,IAAI;EACb,CAAC,MAAM;IACL,OAAOA,IAAI,GAAG,CAAC;EACjB;AACF","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}