{"ast":null,"code":"\"use strict\";\n\nexports.addDays = addDays;\nvar _index = require(\"./toDate.js\");\nvar _index2 = require(\"./constructFrom.js\");\n\n/**\r\n * @name addDays\r\n * @category Day Helpers\r\n * @summary Add the specified number of days to the given date.\r\n *\r\n * @description\r\n * Add the specified number of days to the given date.\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n *\r\n * @param date - The date to be changed\r\n * @param amount - The amount of days to be added.\r\n *\r\n * @returns The new date with the days added\r\n *\r\n * @example\r\n * // Add 10 days to 1 September 2014:\r\n * const result = addDays(new Date(2014, 8, 1), 10)\r\n * //=> Thu Sep 11 2014 00:00:00\r\n */\nfunction addDays(date, amount) {\n  const _date = (0, _index.toDate)(date);\n  if (isNaN(amount)) return (0, _index2.constructFrom)(date, NaN);\n  if (!amount) {\n    // If 0 days, no-op to avoid changing times in the hour before end of DST\n    return _date;\n  }\n  _date.setDate(_date.getDate() + amount);\n  return _date;\n}","map":{"version":3,"names":["exports","addDays","_index","require","_index2","date","amount","_date","toDate","isNaN","constructFrom","NaN","setDate","getDate"],"sources":["D:/Faculty/Spring 2024/SW engineering/project/Expense-Tracker-Application/frontend/node_modules/date-fns/addDays.js"],"sourcesContent":["\"use strict\";\r\nexports.addDays = addDays;\r\nvar _index = require(\"./toDate.js\");\r\nvar _index2 = require(\"./constructFrom.js\");\r\n\r\n/**\r\n * @name addDays\r\n * @category Day Helpers\r\n * @summary Add the specified number of days to the given date.\r\n *\r\n * @description\r\n * Add the specified number of days to the given date.\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n *\r\n * @param date - The date to be changed\r\n * @param amount - The amount of days to be added.\r\n *\r\n * @returns The new date with the days added\r\n *\r\n * @example\r\n * // Add 10 days to 1 September 2014:\r\n * const result = addDays(new Date(2014, 8, 1), 10)\r\n * //=> Thu Sep 11 2014 00:00:00\r\n */\r\nfunction addDays(date, amount) {\r\n  const _date = (0, _index.toDate)(date);\r\n  if (isNaN(amount)) return (0, _index2.constructFrom)(date, NaN);\r\n  if (!amount) {\r\n    // If 0 days, no-op to avoid changing times in the hour before end of DST\r\n    return _date;\r\n  }\r\n  _date.setDate(_date.getDate() + amount);\r\n  return _date;\r\n}\r\n"],"mappings":"AAAA,YAAY;;AACZA,OAAO,CAACC,OAAO,GAAGA,OAAO;AACzB,IAAIC,MAAM,GAAGC,OAAO,CAAC,aAAa,CAAC;AACnC,IAAIC,OAAO,GAAGD,OAAO,CAAC,oBAAoB,CAAC;;AAE3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASF,OAAOA,CAACI,IAAI,EAAEC,MAAM,EAAE;EAC7B,MAAMC,KAAK,GAAG,CAAC,CAAC,EAAEL,MAAM,CAACM,MAAM,EAAEH,IAAI,CAAC;EACtC,IAAII,KAAK,CAACH,MAAM,CAAC,EAAE,OAAO,CAAC,CAAC,EAAEF,OAAO,CAACM,aAAa,EAAEL,IAAI,EAAEM,GAAG,CAAC;EAC/D,IAAI,CAACL,MAAM,EAAE;IACX;IACA,OAAOC,KAAK;EACd;EACAA,KAAK,CAACK,OAAO,CAACL,KAAK,CAACM,OAAO,CAAC,CAAC,GAAGP,MAAM,CAAC;EACvC,OAAOC,KAAK;AACd","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}