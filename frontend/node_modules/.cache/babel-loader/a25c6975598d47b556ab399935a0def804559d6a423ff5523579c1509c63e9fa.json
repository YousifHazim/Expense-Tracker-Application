{"ast":null,"code":"\"use strict\";\n\nexports.formatDistanceStrict = formatDistanceStrict;\nvar _index = require(\"./_lib/defaultLocale.js\");\nvar _index2 = require(\"./_lib/defaultOptions.js\");\nvar _index3 = require(\"./_lib/getRoundingMethod.js\");\nvar _index4 = require(\"./_lib/getTimezoneOffsetInMilliseconds.js\");\nvar _index5 = require(\"./compareAsc.js\");\nvar _index6 = require(\"./constants.js\");\nvar _index7 = require(\"./toDate.js\");\n\n/**\n * The {@link formatDistanceStrict} function options.\n */\n\n/**\n * The unit used to format the distance in {@link formatDistanceStrict}.\n */\n\n/**\n * @name formatDistanceStrict\n * @category Common Helpers\n * @summary Return the distance between the given dates in words.\n *\n * @description\n * Return the distance between the given dates in words, using strict units.\n * This is like `formatDistance`, but does not use helpers like 'almost', 'over',\n * 'less than' and the like.\n *\n * | Distance between dates | Result              |\n * |------------------------|---------------------|\n * | 0 ... 59 secs          | [0..59] seconds     |\n * | 1 ... 59 mins          | [1..59] minutes     |\n * | 1 ... 23 hrs           | [1..23] hours       |\n * | 1 ... 29 days          | [1..29] days        |\n * | 1 ... 11 months        | [1..11] months      |\n * | 1 ... N years          | [1..N]  years       |\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The date\n * @param baseDate - The date to compare with\n * @param options - An object with options\n *\n * @returns The distance in words\n *\n * @throws `date` must not be Invalid Date\n * @throws `baseDate` must not be Invalid Date\n * @throws `options.unit` must be 'second', 'minute', 'hour', 'day', 'month' or 'year'\n * @throws `options.locale` must contain `formatDistance` property\n *\n * @example\n * // What is the distance between 2 July 2014 and 1 January 2015?\n * const result = formatDistanceStrict(new Date(2014, 6, 2), new Date(2015, 0, 2))\n * //=> '6 months'\n *\n * @example\n * // What is the distance between 1 January 2015 00:00:15\n * // and 1 January 2015 00:00:00?\n * const result = formatDistanceStrict(\n *   new Date(2015, 0, 1, 0, 0, 15),\n *   new Date(2015, 0, 1, 0, 0, 0)\n * )\n * //=> '15 seconds'\n *\n * @example\n * // What is the distance from 1 January 2016\n * // to 1 January 2015, with a suffix?\n * const result = formatDistanceStrict(new Date(2015, 0, 1), new Date(2016, 0, 1), {\n *   addSuffix: true\n * })\n * //=> '1 year ago'\n *\n * @example\n * // What is the distance from 1 January 2016\n * // to 1 January 2015, in minutes?\n * const result = formatDistanceStrict(new Date(2016, 0, 1), new Date(2015, 0, 1), {\n *   unit: 'minute'\n * })\n * //=> '525600 minutes'\n *\n * @example\n * // What is the distance from 1 January 2015\n * // to 28 January 2015, in months, rounded up?\n * const result = formatDistanceStrict(new Date(2015, 0, 28), new Date(2015, 0, 1), {\n *   unit: 'month',\n *   roundingMethod: 'ceil'\n * })\n * //=> '1 month'\n *\n * @example\n * // What is the distance between 1 August 2016 and 1 January 2015 in Esperanto?\n * import { eoLocale } from 'date-fns/locale/eo'\n * const result = formatDistanceStrict(new Date(2016, 7, 1), new Date(2015, 0, 1), {\n *   locale: eoLocale\n * })\n * //=> '1 jaro'\n */\n\nfunction formatDistanceStrict(date, baseDate, options) {\n  var _ref, _options$locale, _options$roundingMeth;\n  const defaultOptions = (0, _index2.getDefaultOptions)();\n  const locale = (_ref = (_options$locale = options === null || options === void 0 ? void 0 : options.locale) !== null && _options$locale !== void 0 ? _options$locale : defaultOptions.locale) !== null && _ref !== void 0 ? _ref : _index.defaultLocale;\n  const comparison = (0, _index5.compareAsc)(date, baseDate);\n  if (isNaN(comparison)) {\n    throw new RangeError(\"Invalid time value\");\n  }\n  const localizeOptions = Object.assign({}, options, {\n    addSuffix: options === null || options === void 0 ? void 0 : options.addSuffix,\n    comparison: comparison\n  });\n  let dateLeft;\n  let dateRight;\n  if (comparison > 0) {\n    dateLeft = (0, _index7.toDate)(baseDate);\n    dateRight = (0, _index7.toDate)(date);\n  } else {\n    dateLeft = (0, _index7.toDate)(date);\n    dateRight = (0, _index7.toDate)(baseDate);\n  }\n  const roundingMethod = (0, _index3.getRoundingMethod)((_options$roundingMeth = options === null || options === void 0 ? void 0 : options.roundingMethod) !== null && _options$roundingMeth !== void 0 ? _options$roundingMeth : \"round\");\n  const milliseconds = dateRight.getTime() - dateLeft.getTime();\n  const minutes = milliseconds / _index6.millisecondsInMinute;\n  const timezoneOffset = (0, _index4.getTimezoneOffsetInMilliseconds)(dateRight) - (0, _index4.getTimezoneOffsetInMilliseconds)(dateLeft);\n\n  // Use DST-normalized difference in minutes for years, months and days;\n  // use regular difference in minutes for hours, minutes and seconds.\n  const dstNormalizedMinutes = (milliseconds - timezoneOffset) / _index6.millisecondsInMinute;\n  const defaultUnit = options === null || options === void 0 ? void 0 : options.unit;\n  let unit;\n  if (!defaultUnit) {\n    if (minutes < 1) {\n      unit = \"second\";\n    } else if (minutes < 60) {\n      unit = \"minute\";\n    } else if (minutes < _index6.minutesInDay) {\n      unit = \"hour\";\n    } else if (dstNormalizedMinutes < _index6.minutesInMonth) {\n      unit = \"day\";\n    } else if (dstNormalizedMinutes < _index6.minutesInYear) {\n      unit = \"month\";\n    } else {\n      unit = \"year\";\n    }\n  } else {\n    unit = defaultUnit;\n  }\n\n  // 0 up to 60 seconds\n  if (unit === \"second\") {\n    const seconds = roundingMethod(milliseconds / 1000);\n    return locale.formatDistance(\"xSeconds\", seconds, localizeOptions);\n\n    // 1 up to 60 mins\n  } else if (unit === \"minute\") {\n    const roundedMinutes = roundingMethod(minutes);\n    return locale.formatDistance(\"xMinutes\", roundedMinutes, localizeOptions);\n\n    // 1 up to 24 hours\n  } else if (unit === \"hour\") {\n    const hours = roundingMethod(minutes / 60);\n    return locale.formatDistance(\"xHours\", hours, localizeOptions);\n\n    // 1 up to 30 days\n  } else if (unit === \"day\") {\n    const days = roundingMethod(dstNormalizedMinutes / _index6.minutesInDay);\n    return locale.formatDistance(\"xDays\", days, localizeOptions);\n\n    // 1 up to 12 months\n  } else if (unit === \"month\") {\n    const months = roundingMethod(dstNormalizedMinutes / _index6.minutesInMonth);\n    return months === 12 && defaultUnit !== \"month\" ? locale.formatDistance(\"xYears\", 1, localizeOptions) : locale.formatDistance(\"xMonths\", months, localizeOptions);\n\n    // 1 year up to max Date\n  } else {\n    const years = roundingMethod(dstNormalizedMinutes / _index6.minutesInYear);\n    return locale.formatDistance(\"xYears\", years, localizeOptions);\n  }\n}","map":{"version":3,"names":["exports","formatDistanceStrict","_index","require","_index2","_index3","_index4","_index5","_index6","_index7","date","baseDate","options","_ref","_options$locale","_options$roundingMeth","defaultOptions","getDefaultOptions","locale","defaultLocale","comparison","compareAsc","isNaN","RangeError","localizeOptions","Object","assign","addSuffix","dateLeft","dateRight","toDate","roundingMethod","getRoundingMethod","milliseconds","getTime","minutes","millisecondsInMinute","timezoneOffset","getTimezoneOffsetInMilliseconds","dstNormalizedMinutes","defaultUnit","unit","minutesInDay","minutesInMonth","minutesInYear","seconds","formatDistance","roundedMinutes","hours","days","months","years"],"sources":["C:/Users/mh_sm/Dropbox/PC/Desktop/computer/SENIOR-1/Spring/SW/Project/EXPENSE-TRACKER/frontend/node_modules/date-fns/formatDistanceStrict.js"],"sourcesContent":["\"use strict\";\nexports.formatDistanceStrict = formatDistanceStrict;\nvar _index = require(\"./_lib/defaultLocale.js\");\nvar _index2 = require(\"./_lib/defaultOptions.js\");\nvar _index3 = require(\"./_lib/getRoundingMethod.js\");\nvar _index4 = require(\"./_lib/getTimezoneOffsetInMilliseconds.js\");\nvar _index5 = require(\"./compareAsc.js\");\nvar _index6 = require(\"./constants.js\");\n\nvar _index7 = require(\"./toDate.js\");\n\n/**\n * The {@link formatDistanceStrict} function options.\n */\n\n/**\n * The unit used to format the distance in {@link formatDistanceStrict}.\n */\n\n/**\n * @name formatDistanceStrict\n * @category Common Helpers\n * @summary Return the distance between the given dates in words.\n *\n * @description\n * Return the distance between the given dates in words, using strict units.\n * This is like `formatDistance`, but does not use helpers like 'almost', 'over',\n * 'less than' and the like.\n *\n * | Distance between dates | Result              |\n * |------------------------|---------------------|\n * | 0 ... 59 secs          | [0..59] seconds     |\n * | 1 ... 59 mins          | [1..59] minutes     |\n * | 1 ... 23 hrs           | [1..23] hours       |\n * | 1 ... 29 days          | [1..29] days        |\n * | 1 ... 11 months        | [1..11] months      |\n * | 1 ... N years          | [1..N]  years       |\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The date\n * @param baseDate - The date to compare with\n * @param options - An object with options\n *\n * @returns The distance in words\n *\n * @throws `date` must not be Invalid Date\n * @throws `baseDate` must not be Invalid Date\n * @throws `options.unit` must be 'second', 'minute', 'hour', 'day', 'month' or 'year'\n * @throws `options.locale` must contain `formatDistance` property\n *\n * @example\n * // What is the distance between 2 July 2014 and 1 January 2015?\n * const result = formatDistanceStrict(new Date(2014, 6, 2), new Date(2015, 0, 2))\n * //=> '6 months'\n *\n * @example\n * // What is the distance between 1 January 2015 00:00:15\n * // and 1 January 2015 00:00:00?\n * const result = formatDistanceStrict(\n *   new Date(2015, 0, 1, 0, 0, 15),\n *   new Date(2015, 0, 1, 0, 0, 0)\n * )\n * //=> '15 seconds'\n *\n * @example\n * // What is the distance from 1 January 2016\n * // to 1 January 2015, with a suffix?\n * const result = formatDistanceStrict(new Date(2015, 0, 1), new Date(2016, 0, 1), {\n *   addSuffix: true\n * })\n * //=> '1 year ago'\n *\n * @example\n * // What is the distance from 1 January 2016\n * // to 1 January 2015, in minutes?\n * const result = formatDistanceStrict(new Date(2016, 0, 1), new Date(2015, 0, 1), {\n *   unit: 'minute'\n * })\n * //=> '525600 minutes'\n *\n * @example\n * // What is the distance from 1 January 2015\n * // to 28 January 2015, in months, rounded up?\n * const result = formatDistanceStrict(new Date(2015, 0, 28), new Date(2015, 0, 1), {\n *   unit: 'month',\n *   roundingMethod: 'ceil'\n * })\n * //=> '1 month'\n *\n * @example\n * // What is the distance between 1 August 2016 and 1 January 2015 in Esperanto?\n * import { eoLocale } from 'date-fns/locale/eo'\n * const result = formatDistanceStrict(new Date(2016, 7, 1), new Date(2015, 0, 1), {\n *   locale: eoLocale\n * })\n * //=> '1 jaro'\n */\n\nfunction formatDistanceStrict(date, baseDate, options) {\n  const defaultOptions = (0, _index2.getDefaultOptions)();\n  const locale =\n    options?.locale ?? defaultOptions.locale ?? _index.defaultLocale;\n\n  const comparison = (0, _index5.compareAsc)(date, baseDate);\n\n  if (isNaN(comparison)) {\n    throw new RangeError(\"Invalid time value\");\n  }\n\n  const localizeOptions = Object.assign({}, options, {\n    addSuffix: options?.addSuffix,\n    comparison: comparison,\n  });\n\n  let dateLeft;\n  let dateRight;\n  if (comparison > 0) {\n    dateLeft = (0, _index7.toDate)(baseDate);\n    dateRight = (0, _index7.toDate)(date);\n  } else {\n    dateLeft = (0, _index7.toDate)(date);\n    dateRight = (0, _index7.toDate)(baseDate);\n  }\n\n  const roundingMethod = (0, _index3.getRoundingMethod)(\n    options?.roundingMethod ?? \"round\",\n  );\n\n  const milliseconds = dateRight.getTime() - dateLeft.getTime();\n  const minutes = milliseconds / _index6.millisecondsInMinute;\n\n  const timezoneOffset =\n    (0, _index4.getTimezoneOffsetInMilliseconds)(dateRight) -\n    (0, _index4.getTimezoneOffsetInMilliseconds)(dateLeft);\n\n  // Use DST-normalized difference in minutes for years, months and days;\n  // use regular difference in minutes for hours, minutes and seconds.\n  const dstNormalizedMinutes =\n    (milliseconds - timezoneOffset) / _index6.millisecondsInMinute;\n\n  const defaultUnit = options?.unit;\n  let unit;\n  if (!defaultUnit) {\n    if (minutes < 1) {\n      unit = \"second\";\n    } else if (minutes < 60) {\n      unit = \"minute\";\n    } else if (minutes < _index6.minutesInDay) {\n      unit = \"hour\";\n    } else if (dstNormalizedMinutes < _index6.minutesInMonth) {\n      unit = \"day\";\n    } else if (dstNormalizedMinutes < _index6.minutesInYear) {\n      unit = \"month\";\n    } else {\n      unit = \"year\";\n    }\n  } else {\n    unit = defaultUnit;\n  }\n\n  // 0 up to 60 seconds\n  if (unit === \"second\") {\n    const seconds = roundingMethod(milliseconds / 1000);\n    return locale.formatDistance(\"xSeconds\", seconds, localizeOptions);\n\n    // 1 up to 60 mins\n  } else if (unit === \"minute\") {\n    const roundedMinutes = roundingMethod(minutes);\n    return locale.formatDistance(\"xMinutes\", roundedMinutes, localizeOptions);\n\n    // 1 up to 24 hours\n  } else if (unit === \"hour\") {\n    const hours = roundingMethod(minutes / 60);\n    return locale.formatDistance(\"xHours\", hours, localizeOptions);\n\n    // 1 up to 30 days\n  } else if (unit === \"day\") {\n    const days = roundingMethod(dstNormalizedMinutes / _index6.minutesInDay);\n    return locale.formatDistance(\"xDays\", days, localizeOptions);\n\n    // 1 up to 12 months\n  } else if (unit === \"month\") {\n    const months = roundingMethod(\n      dstNormalizedMinutes / _index6.minutesInMonth,\n    );\n    return months === 12 && defaultUnit !== \"month\"\n      ? locale.formatDistance(\"xYears\", 1, localizeOptions)\n      : locale.formatDistance(\"xMonths\", months, localizeOptions);\n\n    // 1 year up to max Date\n  } else {\n    const years = roundingMethod(dstNormalizedMinutes / _index6.minutesInYear);\n    return locale.formatDistance(\"xYears\", years, localizeOptions);\n  }\n}\n"],"mappings":"AAAA,YAAY;;AACZA,OAAO,CAACC,oBAAoB,GAAGA,oBAAoB;AACnD,IAAIC,MAAM,GAAGC,OAAO,CAAC,yBAAyB,CAAC;AAC/C,IAAIC,OAAO,GAAGD,OAAO,CAAC,0BAA0B,CAAC;AACjD,IAAIE,OAAO,GAAGF,OAAO,CAAC,6BAA6B,CAAC;AACpD,IAAIG,OAAO,GAAGH,OAAO,CAAC,2CAA2C,CAAC;AAClE,IAAII,OAAO,GAAGJ,OAAO,CAAC,iBAAiB,CAAC;AACxC,IAAIK,OAAO,GAAGL,OAAO,CAAC,gBAAgB,CAAC;AAEvC,IAAIM,OAAO,GAAGN,OAAO,CAAC,aAAa,CAAC;;AAEpC;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASF,oBAAoBA,CAACS,IAAI,EAAEC,QAAQ,EAAEC,OAAO,EAAE;EAAA,IAAAC,IAAA,EAAAC,eAAA,EAAAC,qBAAA;EACrD,MAAMC,cAAc,GAAG,CAAC,CAAC,EAAEZ,OAAO,CAACa,iBAAiB,EAAE,CAAC;EACvD,MAAMC,MAAM,IAAAL,IAAA,IAAAC,eAAA,GACVF,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEM,MAAM,cAAAJ,eAAA,cAAAA,eAAA,GAAIE,cAAc,CAACE,MAAM,cAAAL,IAAA,cAAAA,IAAA,GAAIX,MAAM,CAACiB,aAAa;EAElE,MAAMC,UAAU,GAAG,CAAC,CAAC,EAAEb,OAAO,CAACc,UAAU,EAAEX,IAAI,EAAEC,QAAQ,CAAC;EAE1D,IAAIW,KAAK,CAACF,UAAU,CAAC,EAAE;IACrB,MAAM,IAAIG,UAAU,CAAC,oBAAoB,CAAC;EAC5C;EAEA,MAAMC,eAAe,GAAGC,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEd,OAAO,EAAE;IACjDe,SAAS,EAAEf,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEe,SAAS;IAC7BP,UAAU,EAAEA;EACd,CAAC,CAAC;EAEF,IAAIQ,QAAQ;EACZ,IAAIC,SAAS;EACb,IAAIT,UAAU,GAAG,CAAC,EAAE;IAClBQ,QAAQ,GAAG,CAAC,CAAC,EAAEnB,OAAO,CAACqB,MAAM,EAAEnB,QAAQ,CAAC;IACxCkB,SAAS,GAAG,CAAC,CAAC,EAAEpB,OAAO,CAACqB,MAAM,EAAEpB,IAAI,CAAC;EACvC,CAAC,MAAM;IACLkB,QAAQ,GAAG,CAAC,CAAC,EAAEnB,OAAO,CAACqB,MAAM,EAAEpB,IAAI,CAAC;IACpCmB,SAAS,GAAG,CAAC,CAAC,EAAEpB,OAAO,CAACqB,MAAM,EAAEnB,QAAQ,CAAC;EAC3C;EAEA,MAAMoB,cAAc,GAAG,CAAC,CAAC,EAAE1B,OAAO,CAAC2B,iBAAiB,GAAAjB,qBAAA,GAClDH,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEmB,cAAc,cAAAhB,qBAAA,cAAAA,qBAAA,GAAI,OAC7B,CAAC;EAED,MAAMkB,YAAY,GAAGJ,SAAS,CAACK,OAAO,CAAC,CAAC,GAAGN,QAAQ,CAACM,OAAO,CAAC,CAAC;EAC7D,MAAMC,OAAO,GAAGF,YAAY,GAAGzB,OAAO,CAAC4B,oBAAoB;EAE3D,MAAMC,cAAc,GAClB,CAAC,CAAC,EAAE/B,OAAO,CAACgC,+BAA+B,EAAET,SAAS,CAAC,GACvD,CAAC,CAAC,EAAEvB,OAAO,CAACgC,+BAA+B,EAAEV,QAAQ,CAAC;;EAExD;EACA;EACA,MAAMW,oBAAoB,GACxB,CAACN,YAAY,GAAGI,cAAc,IAAI7B,OAAO,CAAC4B,oBAAoB;EAEhE,MAAMI,WAAW,GAAG5B,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAE6B,IAAI;EACjC,IAAIA,IAAI;EACR,IAAI,CAACD,WAAW,EAAE;IAChB,IAAIL,OAAO,GAAG,CAAC,EAAE;MACfM,IAAI,GAAG,QAAQ;IACjB,CAAC,MAAM,IAAIN,OAAO,GAAG,EAAE,EAAE;MACvBM,IAAI,GAAG,QAAQ;IACjB,CAAC,MAAM,IAAIN,OAAO,GAAG3B,OAAO,CAACkC,YAAY,EAAE;MACzCD,IAAI,GAAG,MAAM;IACf,CAAC,MAAM,IAAIF,oBAAoB,GAAG/B,OAAO,CAACmC,cAAc,EAAE;MACxDF,IAAI,GAAG,KAAK;IACd,CAAC,MAAM,IAAIF,oBAAoB,GAAG/B,OAAO,CAACoC,aAAa,EAAE;MACvDH,IAAI,GAAG,OAAO;IAChB,CAAC,MAAM;MACLA,IAAI,GAAG,MAAM;IACf;EACF,CAAC,MAAM;IACLA,IAAI,GAAGD,WAAW;EACpB;;EAEA;EACA,IAAIC,IAAI,KAAK,QAAQ,EAAE;IACrB,MAAMI,OAAO,GAAGd,cAAc,CAACE,YAAY,GAAG,IAAI,CAAC;IACnD,OAAOf,MAAM,CAAC4B,cAAc,CAAC,UAAU,EAAED,OAAO,EAAErB,eAAe,CAAC;;IAElE;EACF,CAAC,MAAM,IAAIiB,IAAI,KAAK,QAAQ,EAAE;IAC5B,MAAMM,cAAc,GAAGhB,cAAc,CAACI,OAAO,CAAC;IAC9C,OAAOjB,MAAM,CAAC4B,cAAc,CAAC,UAAU,EAAEC,cAAc,EAAEvB,eAAe,CAAC;;IAEzE;EACF,CAAC,MAAM,IAAIiB,IAAI,KAAK,MAAM,EAAE;IAC1B,MAAMO,KAAK,GAAGjB,cAAc,CAACI,OAAO,GAAG,EAAE,CAAC;IAC1C,OAAOjB,MAAM,CAAC4B,cAAc,CAAC,QAAQ,EAAEE,KAAK,EAAExB,eAAe,CAAC;;IAE9D;EACF,CAAC,MAAM,IAAIiB,IAAI,KAAK,KAAK,EAAE;IACzB,MAAMQ,IAAI,GAAGlB,cAAc,CAACQ,oBAAoB,GAAG/B,OAAO,CAACkC,YAAY,CAAC;IACxE,OAAOxB,MAAM,CAAC4B,cAAc,CAAC,OAAO,EAAEG,IAAI,EAAEzB,eAAe,CAAC;;IAE5D;EACF,CAAC,MAAM,IAAIiB,IAAI,KAAK,OAAO,EAAE;IAC3B,MAAMS,MAAM,GAAGnB,cAAc,CAC3BQ,oBAAoB,GAAG/B,OAAO,CAACmC,cACjC,CAAC;IACD,OAAOO,MAAM,KAAK,EAAE,IAAIV,WAAW,KAAK,OAAO,GAC3CtB,MAAM,CAAC4B,cAAc,CAAC,QAAQ,EAAE,CAAC,EAAEtB,eAAe,CAAC,GACnDN,MAAM,CAAC4B,cAAc,CAAC,SAAS,EAAEI,MAAM,EAAE1B,eAAe,CAAC;;IAE7D;EACF,CAAC,MAAM;IACL,MAAM2B,KAAK,GAAGpB,cAAc,CAACQ,oBAAoB,GAAG/B,OAAO,CAACoC,aAAa,CAAC;IAC1E,OAAO1B,MAAM,CAAC4B,cAAc,CAAC,QAAQ,EAAEK,KAAK,EAAE3B,eAAe,CAAC;EAChE;AACF","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}