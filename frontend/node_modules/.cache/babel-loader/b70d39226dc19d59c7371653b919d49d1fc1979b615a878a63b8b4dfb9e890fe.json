{"ast":null,"code":"\"use strict\";\n\nexports.eachMinuteOfInterval = eachMinuteOfInterval;\nvar _index = require(\"./addMinutes.js\");\nvar _index2 = require(\"./startOfMinute.js\");\nvar _index3 = require(\"./toDate.js\");\n\n/**\r\n * The {@link eachMinuteOfInterval} function options.\r\n */\n\n/**\r\n * @name eachMinuteOfInterval\r\n * @category Interval Helpers\r\n * @summary Return the array of minutes within the specified time interval.\r\n *\r\n * @description\r\n * Returns the array of minutes within the specified time interval.\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n *\r\n * @param interval - The interval.\r\n * @param options - An object with options.\r\n *\r\n * @returns The array with starts of minutes from the minute of the interval start to the minute of the interval end\r\n *\r\n * @example\r\n * // Each minute between 14 October 2020, 13:00 and 14 October 2020, 13:03\r\n * const result = eachMinuteOfInterval({\r\n *   start: new Date(2014, 9, 14, 13),\r\n *   end: new Date(2014, 9, 14, 13, 3)\r\n * })\r\n * //=> [\r\n * //   Wed Oct 14 2014 13:00:00,\r\n * //   Wed Oct 14 2014 13:01:00,\r\n * //   Wed Oct 14 2014 13:02:00,\r\n * //   Wed Oct 14 2014 13:03:00\r\n * // ]\r\n */\nfunction eachMinuteOfInterval(interval, options) {\n  const startDate = (0, _index2.startOfMinute)((0, _index3.toDate)(interval.start));\n  const endDate = (0, _index3.toDate)(interval.end);\n  let reversed = +startDate > +endDate;\n  const endTime = reversed ? +startDate : +endDate;\n  let currentDate = reversed ? endDate : startDate;\n  let step = options?.step ?? 1;\n  if (!step) return [];\n  if (step < 0) {\n    step = -step;\n    reversed = !reversed;\n  }\n  const dates = [];\n  while (+currentDate <= endTime) {\n    dates.push((0, _index3.toDate)(currentDate));\n    currentDate = (0, _index.addMinutes)(currentDate, step);\n  }\n  return reversed ? dates.reverse() : dates;\n}","map":{"version":3,"names":["exports","eachMinuteOfInterval","_index","require","_index2","_index3","interval","options","startDate","startOfMinute","toDate","start","endDate","end","reversed","endTime","currentDate","step","dates","push","addMinutes","reverse"],"sources":["D:/Faculty/Spring 2024/SW engineering/project/Expense-Tracker-Application/frontend/node_modules/date-fns/eachMinuteOfInterval.js"],"sourcesContent":["\"use strict\";\r\nexports.eachMinuteOfInterval = eachMinuteOfInterval;\r\nvar _index = require(\"./addMinutes.js\");\r\nvar _index2 = require(\"./startOfMinute.js\");\r\nvar _index3 = require(\"./toDate.js\");\r\n\r\n/**\r\n * The {@link eachMinuteOfInterval} function options.\r\n */\r\n\r\n/**\r\n * @name eachMinuteOfInterval\r\n * @category Interval Helpers\r\n * @summary Return the array of minutes within the specified time interval.\r\n *\r\n * @description\r\n * Returns the array of minutes within the specified time interval.\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n *\r\n * @param interval - The interval.\r\n * @param options - An object with options.\r\n *\r\n * @returns The array with starts of minutes from the minute of the interval start to the minute of the interval end\r\n *\r\n * @example\r\n * // Each minute between 14 October 2020, 13:00 and 14 October 2020, 13:03\r\n * const result = eachMinuteOfInterval({\r\n *   start: new Date(2014, 9, 14, 13),\r\n *   end: new Date(2014, 9, 14, 13, 3)\r\n * })\r\n * //=> [\r\n * //   Wed Oct 14 2014 13:00:00,\r\n * //   Wed Oct 14 2014 13:01:00,\r\n * //   Wed Oct 14 2014 13:02:00,\r\n * //   Wed Oct 14 2014 13:03:00\r\n * // ]\r\n */\r\nfunction eachMinuteOfInterval(interval, options) {\r\n  const startDate = (0, _index2.startOfMinute)(\r\n    (0, _index3.toDate)(interval.start),\r\n  );\r\n  const endDate = (0, _index3.toDate)(interval.end);\r\n\r\n  let reversed = +startDate > +endDate;\r\n  const endTime = reversed ? +startDate : +endDate;\r\n  let currentDate = reversed ? endDate : startDate;\r\n\r\n  let step = options?.step ?? 1;\r\n  if (!step) return [];\r\n  if (step < 0) {\r\n    step = -step;\r\n    reversed = !reversed;\r\n  }\r\n\r\n  const dates = [];\r\n\r\n  while (+currentDate <= endTime) {\r\n    dates.push((0, _index3.toDate)(currentDate));\r\n    currentDate = (0, _index.addMinutes)(currentDate, step);\r\n  }\r\n\r\n  return reversed ? dates.reverse() : dates;\r\n}\r\n"],"mappings":"AAAA,YAAY;;AACZA,OAAO,CAACC,oBAAoB,GAAGA,oBAAoB;AACnD,IAAIC,MAAM,GAAGC,OAAO,CAAC,iBAAiB,CAAC;AACvC,IAAIC,OAAO,GAAGD,OAAO,CAAC,oBAAoB,CAAC;AAC3C,IAAIE,OAAO,GAAGF,OAAO,CAAC,aAAa,CAAC;;AAEpC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASF,oBAAoBA,CAACK,QAAQ,EAAEC,OAAO,EAAE;EAC/C,MAAMC,SAAS,GAAG,CAAC,CAAC,EAAEJ,OAAO,CAACK,aAAa,EACzC,CAAC,CAAC,EAAEJ,OAAO,CAACK,MAAM,EAAEJ,QAAQ,CAACK,KAAK,CACpC,CAAC;EACD,MAAMC,OAAO,GAAG,CAAC,CAAC,EAAEP,OAAO,CAACK,MAAM,EAAEJ,QAAQ,CAACO,GAAG,CAAC;EAEjD,IAAIC,QAAQ,GAAG,CAACN,SAAS,GAAG,CAACI,OAAO;EACpC,MAAMG,OAAO,GAAGD,QAAQ,GAAG,CAACN,SAAS,GAAG,CAACI,OAAO;EAChD,IAAII,WAAW,GAAGF,QAAQ,GAAGF,OAAO,GAAGJ,SAAS;EAEhD,IAAIS,IAAI,GAAGV,OAAO,EAAEU,IAAI,IAAI,CAAC;EAC7B,IAAI,CAACA,IAAI,EAAE,OAAO,EAAE;EACpB,IAAIA,IAAI,GAAG,CAAC,EAAE;IACZA,IAAI,GAAG,CAACA,IAAI;IACZH,QAAQ,GAAG,CAACA,QAAQ;EACtB;EAEA,MAAMI,KAAK,GAAG,EAAE;EAEhB,OAAO,CAACF,WAAW,IAAID,OAAO,EAAE;IAC9BG,KAAK,CAACC,IAAI,CAAC,CAAC,CAAC,EAAEd,OAAO,CAACK,MAAM,EAAEM,WAAW,CAAC,CAAC;IAC5CA,WAAW,GAAG,CAAC,CAAC,EAAEd,MAAM,CAACkB,UAAU,EAAEJ,WAAW,EAAEC,IAAI,CAAC;EACzD;EAEA,OAAOH,QAAQ,GAAGI,KAAK,CAACG,OAAO,CAAC,CAAC,GAAGH,KAAK;AAC3C","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}