{"ast":null,"code":"\"use strict\";\n\nexports.startOfWeekYear = startOfWeekYear;\nvar _index = require(\"./constructFrom.js\");\nvar _index2 = require(\"./getWeekYear.js\");\nvar _index3 = require(\"./startOfWeek.js\");\nvar _index4 = require(\"./_lib/defaultOptions.js\");\n\n/**\n * The {@link startOfWeekYear} function options.\n */\n\n/**\n * @name startOfWeekYear\n * @category Week-Numbering Year Helpers\n * @summary Return the start of a local week-numbering year for the given date.\n *\n * @description\n * Return the start of a local week-numbering year.\n * The exact calculation depends on the values of\n * `options.weekStartsOn` (which is the index of the first day of the week)\n * and `options.firstWeekContainsDate` (which is the day of January, which is always in\n * the first week of the week-numbering year)\n *\n * Week numbering: https://en.wikipedia.org/wiki/Week#The_ISO_week_date_system\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The original date\n * @param options - An object with options\n *\n * @returns The start of a week-numbering year\n *\n * @example\n * // The start of an a week-numbering year for 2 July 2005 with default settings:\n * const result = startOfWeekYear(new Date(2005, 6, 2))\n * //=> Sun Dec 26 2004 00:00:00\n *\n * @example\n * // The start of a week-numbering year for 2 July 2005\n * // if Monday is the first day of week\n * // and 4 January is always in the first week of the year:\n * const result = startOfWeekYear(new Date(2005, 6, 2), {\n *   weekStartsOn: 1,\n *   firstWeekContainsDate: 4\n * })\n * //=> Mon Jan 03 2005 00:00:00\n */\nfunction startOfWeekYear(date, options) {\n  var _ref, _ref2, _ref3, _options$firstWeekCon, _options$locale, _defaultOptions$local;\n  const defaultOptions = (0, _index4.getDefaultOptions)();\n  const firstWeekContainsDate = (_ref = (_ref2 = (_ref3 = (_options$firstWeekCon = options === null || options === void 0 ? void 0 : options.firstWeekContainsDate) !== null && _options$firstWeekCon !== void 0 ? _options$firstWeekCon : options === null || options === void 0 || (_options$locale = options.locale) === null || _options$locale === void 0 || (_options$locale = _options$locale.options) === null || _options$locale === void 0 ? void 0 : _options$locale.firstWeekContainsDate) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions.firstWeekContainsDate) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions.locale) === null || _defaultOptions$local === void 0 || (_defaultOptions$local = _defaultOptions$local.options) === null || _defaultOptions$local === void 0 ? void 0 : _defaultOptions$local.firstWeekContainsDate) !== null && _ref !== void 0 ? _ref : 1;\n  const year = (0, _index2.getWeekYear)(date, options);\n  const firstWeek = (0, _index.constructFrom)(date, 0);\n  firstWeek.setFullYear(year, 0, firstWeekContainsDate);\n  firstWeek.setHours(0, 0, 0, 0);\n  const _date = (0, _index3.startOfWeek)(firstWeek, options);\n  return _date;\n}","map":{"version":3,"names":["exports","startOfWeekYear","_index","require","_index2","_index3","_index4","date","options","_ref","_ref2","_ref3","_options$firstWeekCon","_options$locale","_defaultOptions$local","defaultOptions","getDefaultOptions","firstWeekContainsDate","locale","year","getWeekYear","firstWeek","constructFrom","setFullYear","setHours","_date","startOfWeek"],"sources":["C:/Users/mh_sm/Dropbox/PC/Desktop/computer/SENIOR-1/Spring/SW/Project/EXPENSE-TRACKER/frontend/node_modules/date-fns/startOfWeekYear.js"],"sourcesContent":["\"use strict\";\nexports.startOfWeekYear = startOfWeekYear;\nvar _index = require(\"./constructFrom.js\");\nvar _index2 = require(\"./getWeekYear.js\");\nvar _index3 = require(\"./startOfWeek.js\");\n\nvar _index4 = require(\"./_lib/defaultOptions.js\");\n\n/**\n * The {@link startOfWeekYear} function options.\n */\n\n/**\n * @name startOfWeekYear\n * @category Week-Numbering Year Helpers\n * @summary Return the start of a local week-numbering year for the given date.\n *\n * @description\n * Return the start of a local week-numbering year.\n * The exact calculation depends on the values of\n * `options.weekStartsOn` (which is the index of the first day of the week)\n * and `options.firstWeekContainsDate` (which is the day of January, which is always in\n * the first week of the week-numbering year)\n *\n * Week numbering: https://en.wikipedia.org/wiki/Week#The_ISO_week_date_system\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The original date\n * @param options - An object with options\n *\n * @returns The start of a week-numbering year\n *\n * @example\n * // The start of an a week-numbering year for 2 July 2005 with default settings:\n * const result = startOfWeekYear(new Date(2005, 6, 2))\n * //=> Sun Dec 26 2004 00:00:00\n *\n * @example\n * // The start of a week-numbering year for 2 July 2005\n * // if Monday is the first day of week\n * // and 4 January is always in the first week of the year:\n * const result = startOfWeekYear(new Date(2005, 6, 2), {\n *   weekStartsOn: 1,\n *   firstWeekContainsDate: 4\n * })\n * //=> Mon Jan 03 2005 00:00:00\n */\nfunction startOfWeekYear(date, options) {\n  const defaultOptions = (0, _index4.getDefaultOptions)();\n  const firstWeekContainsDate =\n    options?.firstWeekContainsDate ??\n    options?.locale?.options?.firstWeekContainsDate ??\n    defaultOptions.firstWeekContainsDate ??\n    defaultOptions.locale?.options?.firstWeekContainsDate ??\n    1;\n\n  const year = (0, _index2.getWeekYear)(date, options);\n  const firstWeek = (0, _index.constructFrom)(date, 0);\n  firstWeek.setFullYear(year, 0, firstWeekContainsDate);\n  firstWeek.setHours(0, 0, 0, 0);\n  const _date = (0, _index3.startOfWeek)(firstWeek, options);\n  return _date;\n}\n"],"mappings":"AAAA,YAAY;;AACZA,OAAO,CAACC,eAAe,GAAGA,eAAe;AACzC,IAAIC,MAAM,GAAGC,OAAO,CAAC,oBAAoB,CAAC;AAC1C,IAAIC,OAAO,GAAGD,OAAO,CAAC,kBAAkB,CAAC;AACzC,IAAIE,OAAO,GAAGF,OAAO,CAAC,kBAAkB,CAAC;AAEzC,IAAIG,OAAO,GAAGH,OAAO,CAAC,0BAA0B,CAAC;;AAEjD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASF,eAAeA,CAACM,IAAI,EAAEC,OAAO,EAAE;EAAA,IAAAC,IAAA,EAAAC,KAAA,EAAAC,KAAA,EAAAC,qBAAA,EAAAC,eAAA,EAAAC,qBAAA;EACtC,MAAMC,cAAc,GAAG,CAAC,CAAC,EAAET,OAAO,CAACU,iBAAiB,EAAE,CAAC;EACvD,MAAMC,qBAAqB,IAAAR,IAAA,IAAAC,KAAA,IAAAC,KAAA,IAAAC,qBAAA,GACzBJ,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAES,qBAAqB,cAAAL,qBAAA,cAAAA,qBAAA,GAC9BJ,OAAO,aAAPA,OAAO,gBAAAK,eAAA,GAAPL,OAAO,CAAEU,MAAM,cAAAL,eAAA,gBAAAA,eAAA,GAAfA,eAAA,CAAiBL,OAAO,cAAAK,eAAA,uBAAxBA,eAAA,CAA0BI,qBAAqB,cAAAN,KAAA,cAAAA,KAAA,GAC/CI,cAAc,CAACE,qBAAqB,cAAAP,KAAA,cAAAA,KAAA,IAAAI,qBAAA,GACpCC,cAAc,CAACG,MAAM,cAAAJ,qBAAA,gBAAAA,qBAAA,GAArBA,qBAAA,CAAuBN,OAAO,cAAAM,qBAAA,uBAA9BA,qBAAA,CAAgCG,qBAAqB,cAAAR,IAAA,cAAAA,IAAA,GACrD,CAAC;EAEH,MAAMU,IAAI,GAAG,CAAC,CAAC,EAAEf,OAAO,CAACgB,WAAW,EAAEb,IAAI,EAAEC,OAAO,CAAC;EACpD,MAAMa,SAAS,GAAG,CAAC,CAAC,EAAEnB,MAAM,CAACoB,aAAa,EAAEf,IAAI,EAAE,CAAC,CAAC;EACpDc,SAAS,CAACE,WAAW,CAACJ,IAAI,EAAE,CAAC,EAAEF,qBAAqB,CAAC;EACrDI,SAAS,CAACG,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;EAC9B,MAAMC,KAAK,GAAG,CAAC,CAAC,EAAEpB,OAAO,CAACqB,WAAW,EAAEL,SAAS,EAAEb,OAAO,CAAC;EAC1D,OAAOiB,KAAK;AACd","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}