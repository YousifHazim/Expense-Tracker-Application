{"ast":null,"code":"\"use strict\";\n\nexports.intlFormat = intlFormat;\nvar _index = require(\"./toDate.js\");\n\n/**\r\n * The locale string (see: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locales_argument).\r\n */\n\n/**\r\n * The format options (see: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/DateTimeFormat#options)\r\n */\n\n/**\r\n * The locale options.\r\n */\n\n/**\r\n * @name intlFormat\r\n * @category Common Helpers\r\n * @summary Format the date with Intl.DateTimeFormat (https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat).\r\n *\r\n * @description\r\n * Return the formatted date string in the given format.\r\n * The method uses [`Intl.DateTimeFormat`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat) inside.\r\n * formatOptions are the same as [`Intl.DateTimeFormat` options](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat#using_options)\r\n *\r\n * > ⚠️ Please note that before Node version 13.0.0, only the locale data for en-US is available by default.\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n *\r\n * @param date - The date to format\r\n *\r\n * @returns The formatted date string\r\n *\r\n * @throws `date` must not be Invalid Date\r\n *\r\n * @example\r\n * // Represent 4 October 2019 in middle-endian format:\r\n * const result = intlFormat(new Date(2019, 9, 4, 12, 30, 13, 456))\r\n * //=> 10/4/2019\r\n */\n\n/**\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n *\r\n * @param date - The date to format\r\n * @param localeOptions - An object with locale\r\n *\r\n * @returns The formatted date string\r\n *\r\n * @throws `date` must not be Invalid Date\r\n *\r\n * @example\r\n * // Represent 4 October 2019 in Korean.\r\n * // Convert the date with locale's options.\r\n * const result = intlFormat(new Date(2019, 9, 4, 12, 30, 13, 456), {\r\n *   locale: 'ko-KR',\r\n * })\r\n * //=> 2019. 10. 4.\r\n */\n\n/**\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n *\r\n * @param date - The date to format\r\n * @param formatOptions - The format options\r\n *\r\n * @returns The formatted date string\r\n *\r\n * @throws `date` must not be Invalid Date\r\n *\r\n * @example\r\n * // Represent 4 October 2019.\r\n * // Convert the date with format's options.\r\n * const result = intlFormat.default(new Date(2019, 9, 4, 12, 30, 13, 456), {\r\n *   year: 'numeric',\r\n *   month: 'numeric',\r\n *   day: 'numeric',\r\n *   hour: 'numeric',\r\n * })\r\n * //=> 10/4/2019, 12 PM\r\n */\n\n/**\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n *\r\n * @param date - The date to format\r\n * @param formatOptions - The format options\r\n * @param localeOptions - An object with locale\r\n *\r\n * @returns The formatted date string\r\n *\r\n * @throws `date` must not be Invalid Date\r\n *\r\n * @example\r\n * // Represent 4 October 2019 in German.\r\n * // Convert the date with format's options and locale's options.\r\n * const result = intlFormat(new Date(2019, 9, 4, 12, 30, 13, 456), {\r\n *   weekday: 'long',\r\n *   year: 'numeric',\r\n *   month: 'long',\r\n *   day: 'numeric',\r\n * }, {\r\n *   locale: 'de-DE',\r\n * })\r\n * //=> Freitag, 4. Oktober 2019\r\n */\n\nfunction intlFormat(date, formatOrLocale, localeOptions) {\n  let formatOptions;\n  if (isFormatOptions(formatOrLocale)) {\n    formatOptions = formatOrLocale;\n  } else {\n    localeOptions = formatOrLocale;\n  }\n  return new Intl.DateTimeFormat(localeOptions?.locale, formatOptions).format((0, _index.toDate)(date));\n}\nfunction isFormatOptions(opts) {\n  return opts !== undefined && !(\"locale\" in opts);\n}","map":{"version":3,"names":["exports","intlFormat","_index","require","date","formatOrLocale","localeOptions","formatOptions","isFormatOptions","Intl","DateTimeFormat","locale","format","toDate","opts","undefined"],"sources":["D:/Faculty/Spring 2024/SW engineering/project/Expense-Tracker-Application/frontend/node_modules/date-fns/intlFormat.js"],"sourcesContent":["\"use strict\";\r\nexports.intlFormat = intlFormat;\r\nvar _index = require(\"./toDate.js\");\r\n\r\n/**\r\n * The locale string (see: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locales_argument).\r\n */\r\n\r\n/**\r\n * The format options (see: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/DateTimeFormat#options)\r\n */\r\n\r\n/**\r\n * The locale options.\r\n */\r\n\r\n/**\r\n * @name intlFormat\r\n * @category Common Helpers\r\n * @summary Format the date with Intl.DateTimeFormat (https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat).\r\n *\r\n * @description\r\n * Return the formatted date string in the given format.\r\n * The method uses [`Intl.DateTimeFormat`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat) inside.\r\n * formatOptions are the same as [`Intl.DateTimeFormat` options](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat#using_options)\r\n *\r\n * > ⚠️ Please note that before Node version 13.0.0, only the locale data for en-US is available by default.\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n *\r\n * @param date - The date to format\r\n *\r\n * @returns The formatted date string\r\n *\r\n * @throws `date` must not be Invalid Date\r\n *\r\n * @example\r\n * // Represent 4 October 2019 in middle-endian format:\r\n * const result = intlFormat(new Date(2019, 9, 4, 12, 30, 13, 456))\r\n * //=> 10/4/2019\r\n */\r\n\r\n/**\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n *\r\n * @param date - The date to format\r\n * @param localeOptions - An object with locale\r\n *\r\n * @returns The formatted date string\r\n *\r\n * @throws `date` must not be Invalid Date\r\n *\r\n * @example\r\n * // Represent 4 October 2019 in Korean.\r\n * // Convert the date with locale's options.\r\n * const result = intlFormat(new Date(2019, 9, 4, 12, 30, 13, 456), {\r\n *   locale: 'ko-KR',\r\n * })\r\n * //=> 2019. 10. 4.\r\n */\r\n\r\n/**\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n *\r\n * @param date - The date to format\r\n * @param formatOptions - The format options\r\n *\r\n * @returns The formatted date string\r\n *\r\n * @throws `date` must not be Invalid Date\r\n *\r\n * @example\r\n * // Represent 4 October 2019.\r\n * // Convert the date with format's options.\r\n * const result = intlFormat.default(new Date(2019, 9, 4, 12, 30, 13, 456), {\r\n *   year: 'numeric',\r\n *   month: 'numeric',\r\n *   day: 'numeric',\r\n *   hour: 'numeric',\r\n * })\r\n * //=> 10/4/2019, 12 PM\r\n */\r\n\r\n/**\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n *\r\n * @param date - The date to format\r\n * @param formatOptions - The format options\r\n * @param localeOptions - An object with locale\r\n *\r\n * @returns The formatted date string\r\n *\r\n * @throws `date` must not be Invalid Date\r\n *\r\n * @example\r\n * // Represent 4 October 2019 in German.\r\n * // Convert the date with format's options and locale's options.\r\n * const result = intlFormat(new Date(2019, 9, 4, 12, 30, 13, 456), {\r\n *   weekday: 'long',\r\n *   year: 'numeric',\r\n *   month: 'long',\r\n *   day: 'numeric',\r\n * }, {\r\n *   locale: 'de-DE',\r\n * })\r\n * //=> Freitag, 4. Oktober 2019\r\n */\r\n\r\nfunction intlFormat(date, formatOrLocale, localeOptions) {\r\n  let formatOptions;\r\n\r\n  if (isFormatOptions(formatOrLocale)) {\r\n    formatOptions = formatOrLocale;\r\n  } else {\r\n    localeOptions = formatOrLocale;\r\n  }\r\n\r\n  return new Intl.DateTimeFormat(localeOptions?.locale, formatOptions).format(\r\n    (0, _index.toDate)(date),\r\n  );\r\n}\r\n\r\nfunction isFormatOptions(opts) {\r\n  return opts !== undefined && !(\"locale\" in opts);\r\n}\r\n"],"mappings":"AAAA,YAAY;;AACZA,OAAO,CAACC,UAAU,GAAGA,UAAU;AAC/B,IAAIC,MAAM,GAAGC,OAAO,CAAC,aAAa,CAAC;;AAEnC;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASF,UAAUA,CAACG,IAAI,EAAEC,cAAc,EAAEC,aAAa,EAAE;EACvD,IAAIC,aAAa;EAEjB,IAAIC,eAAe,CAACH,cAAc,CAAC,EAAE;IACnCE,aAAa,GAAGF,cAAc;EAChC,CAAC,MAAM;IACLC,aAAa,GAAGD,cAAc;EAChC;EAEA,OAAO,IAAII,IAAI,CAACC,cAAc,CAACJ,aAAa,EAAEK,MAAM,EAAEJ,aAAa,CAAC,CAACK,MAAM,CACzE,CAAC,CAAC,EAAEV,MAAM,CAACW,MAAM,EAAET,IAAI,CACzB,CAAC;AACH;AAEA,SAASI,eAAeA,CAACM,IAAI,EAAE;EAC7B,OAAOA,IAAI,KAAKC,SAAS,IAAI,EAAE,QAAQ,IAAID,IAAI,CAAC;AAClD","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}