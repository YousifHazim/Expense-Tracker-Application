{"ast":null,"code":"\"use strict\";\n\nexports.differenceInCalendarWeeks = differenceInCalendarWeeks;\nvar _index = require(\"./constants.js\");\nvar _index2 = require(\"./startOfWeek.js\");\nvar _index3 = require(\"./_lib/getTimezoneOffsetInMilliseconds.js\");\n\n/**\r\n * The {@link differenceInCalendarWeeks} function options.\r\n */\n\n/**\r\n * @name differenceInCalendarWeeks\r\n * @category Week Helpers\r\n * @summary Get the number of calendar weeks between the given dates.\r\n *\r\n * @description\r\n * Get the number of calendar weeks between the given dates.\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n *\r\n * @param dateLeft - The later date\r\n * @param dateRight - The earlier date\r\n * @param options - An object with options.\r\n *\r\n * @returns The number of calendar weeks\r\n *\r\n * @example\r\n * // How many calendar weeks are between 5 July 2014 and 20 July 2014?\r\n * const result = differenceInCalendarWeeks(\r\n *   new Date(2014, 6, 20),\r\n *   new Date(2014, 6, 5)\r\n * )\r\n * //=> 3\r\n *\r\n * @example\r\n * // If the week starts on Monday,\r\n * // how many calendar weeks are between 5 July 2014 and 20 July 2014?\r\n * const result = differenceInCalendarWeeks(\r\n *   new Date(2014, 6, 20),\r\n *   new Date(2014, 6, 5),\r\n *   { weekStartsOn: 1 }\r\n * )\r\n * //=> 2\r\n */\nfunction differenceInCalendarWeeks(dateLeft, dateRight, options) {\n  const startOfWeekLeft = (0, _index2.startOfWeek)(dateLeft, options);\n  const startOfWeekRight = (0, _index2.startOfWeek)(dateRight, options);\n  const timestampLeft = +startOfWeekLeft - (0, _index3.getTimezoneOffsetInMilliseconds)(startOfWeekLeft);\n  const timestampRight = +startOfWeekRight - (0, _index3.getTimezoneOffsetInMilliseconds)(startOfWeekRight);\n\n  // Round the number of days to the nearest integer because the number of\n  // milliseconds in a days is not constant (e.g. it's different in the week of\n  // the daylight saving time clock shift).\n  return Math.round((timestampLeft - timestampRight) / _index.millisecondsInWeek);\n}","map":{"version":3,"names":["exports","differenceInCalendarWeeks","_index","require","_index2","_index3","dateLeft","dateRight","options","startOfWeekLeft","startOfWeek","startOfWeekRight","timestampLeft","getTimezoneOffsetInMilliseconds","timestampRight","Math","round","millisecondsInWeek"],"sources":["D:/Faculty/Spring 2024/SW engineering/project/Expense-Tracker-Application/frontend/node_modules/date-fns/differenceInCalendarWeeks.js"],"sourcesContent":["\"use strict\";\r\nexports.differenceInCalendarWeeks = differenceInCalendarWeeks;\r\nvar _index = require(\"./constants.js\");\r\nvar _index2 = require(\"./startOfWeek.js\");\r\n\r\nvar _index3 = require(\"./_lib/getTimezoneOffsetInMilliseconds.js\");\r\n\r\n/**\r\n * The {@link differenceInCalendarWeeks} function options.\r\n */\r\n\r\n/**\r\n * @name differenceInCalendarWeeks\r\n * @category Week Helpers\r\n * @summary Get the number of calendar weeks between the given dates.\r\n *\r\n * @description\r\n * Get the number of calendar weeks between the given dates.\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n *\r\n * @param dateLeft - The later date\r\n * @param dateRight - The earlier date\r\n * @param options - An object with options.\r\n *\r\n * @returns The number of calendar weeks\r\n *\r\n * @example\r\n * // How many calendar weeks are between 5 July 2014 and 20 July 2014?\r\n * const result = differenceInCalendarWeeks(\r\n *   new Date(2014, 6, 20),\r\n *   new Date(2014, 6, 5)\r\n * )\r\n * //=> 3\r\n *\r\n * @example\r\n * // If the week starts on Monday,\r\n * // how many calendar weeks are between 5 July 2014 and 20 July 2014?\r\n * const result = differenceInCalendarWeeks(\r\n *   new Date(2014, 6, 20),\r\n *   new Date(2014, 6, 5),\r\n *   { weekStartsOn: 1 }\r\n * )\r\n * //=> 2\r\n */\r\nfunction differenceInCalendarWeeks(dateLeft, dateRight, options) {\r\n  const startOfWeekLeft = (0, _index2.startOfWeek)(dateLeft, options);\r\n  const startOfWeekRight = (0, _index2.startOfWeek)(dateRight, options);\r\n\r\n  const timestampLeft =\r\n    +startOfWeekLeft -\r\n    (0, _index3.getTimezoneOffsetInMilliseconds)(startOfWeekLeft);\r\n  const timestampRight =\r\n    +startOfWeekRight -\r\n    (0, _index3.getTimezoneOffsetInMilliseconds)(startOfWeekRight);\r\n\r\n  // Round the number of days to the nearest integer because the number of\r\n  // milliseconds in a days is not constant (e.g. it's different in the week of\r\n  // the daylight saving time clock shift).\r\n  return Math.round(\r\n    (timestampLeft - timestampRight) / _index.millisecondsInWeek,\r\n  );\r\n}\r\n"],"mappings":"AAAA,YAAY;;AACZA,OAAO,CAACC,yBAAyB,GAAGA,yBAAyB;AAC7D,IAAIC,MAAM,GAAGC,OAAO,CAAC,gBAAgB,CAAC;AACtC,IAAIC,OAAO,GAAGD,OAAO,CAAC,kBAAkB,CAAC;AAEzC,IAAIE,OAAO,GAAGF,OAAO,CAAC,2CAA2C,CAAC;;AAElE;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASF,yBAAyBA,CAACK,QAAQ,EAAEC,SAAS,EAAEC,OAAO,EAAE;EAC/D,MAAMC,eAAe,GAAG,CAAC,CAAC,EAAEL,OAAO,CAACM,WAAW,EAAEJ,QAAQ,EAAEE,OAAO,CAAC;EACnE,MAAMG,gBAAgB,GAAG,CAAC,CAAC,EAAEP,OAAO,CAACM,WAAW,EAAEH,SAAS,EAAEC,OAAO,CAAC;EAErE,MAAMI,aAAa,GACjB,CAACH,eAAe,GAChB,CAAC,CAAC,EAAEJ,OAAO,CAACQ,+BAA+B,EAAEJ,eAAe,CAAC;EAC/D,MAAMK,cAAc,GAClB,CAACH,gBAAgB,GACjB,CAAC,CAAC,EAAEN,OAAO,CAACQ,+BAA+B,EAAEF,gBAAgB,CAAC;;EAEhE;EACA;EACA;EACA,OAAOI,IAAI,CAACC,KAAK,CACf,CAACJ,aAAa,GAAGE,cAAc,IAAIZ,MAAM,CAACe,kBAC5C,CAAC;AACH","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}