{"ast":null,"code":"\"use strict\";\n\nexports.eachQuarterOfInterval = eachQuarterOfInterval;\nvar _index = require(\"./addQuarters.js\");\nvar _index2 = require(\"./startOfQuarter.js\");\nvar _index3 = require(\"./toDate.js\");\n\n/**\r\n * The {@link eachQuarterOfInterval} function options.\r\n */\n\n/**\r\n * @name eachQuarterOfInterval\r\n * @category Interval Helpers\r\n * @summary Return the array of quarters within the specified time interval.\r\n *\r\n * @description\r\n * Return the array of quarters within the specified time interval.\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n *\r\n * @param interval - The interval\r\n *\r\n * @returns The array with starts of quarters from the quarter of the interval start to the quarter of the interval end\r\n *\r\n * @example\r\n * // Each quarter within interval 6 February 2014 - 10 August 2014:\r\n * const result = eachQuarterOfInterval({\r\n *   start: new Date(2014, 1, 6),\r\n *   end: new Date(2014, 7, 10)\r\n * })\r\n * //=> [\r\n * //   Wed Jan 01 2014 00:00:00,\r\n * //   Tue Apr 01 2014 00:00:00,\r\n * //   Tue Jul 01 2014 00:00:00,\r\n * // ]\r\n */\nfunction eachQuarterOfInterval(interval, options) {\n  const startDate = (0, _index3.toDate)(interval.start);\n  const endDate = (0, _index3.toDate)(interval.end);\n  let reversed = +startDate > +endDate;\n  const endTime = reversed ? +(0, _index2.startOfQuarter)(startDate) : +(0, _index2.startOfQuarter)(endDate);\n  let currentDate = reversed ? (0, _index2.startOfQuarter)(endDate) : (0, _index2.startOfQuarter)(startDate);\n  let step = options?.step ?? 1;\n  if (!step) return [];\n  if (step < 0) {\n    step = -step;\n    reversed = !reversed;\n  }\n  const dates = [];\n  while (+currentDate <= endTime) {\n    dates.push((0, _index3.toDate)(currentDate));\n    currentDate = (0, _index.addQuarters)(currentDate, step);\n  }\n  return reversed ? dates.reverse() : dates;\n}","map":{"version":3,"names":["exports","eachQuarterOfInterval","_index","require","_index2","_index3","interval","options","startDate","toDate","start","endDate","end","reversed","endTime","startOfQuarter","currentDate","step","dates","push","addQuarters","reverse"],"sources":["D:/Faculty/Spring 2024/SW engineering/project/Expense-Tracker-Application/frontend/node_modules/date-fns/eachQuarterOfInterval.js"],"sourcesContent":["\"use strict\";\r\nexports.eachQuarterOfInterval = eachQuarterOfInterval;\r\nvar _index = require(\"./addQuarters.js\");\r\nvar _index2 = require(\"./startOfQuarter.js\");\r\nvar _index3 = require(\"./toDate.js\");\r\n\r\n/**\r\n * The {@link eachQuarterOfInterval} function options.\r\n */\r\n\r\n/**\r\n * @name eachQuarterOfInterval\r\n * @category Interval Helpers\r\n * @summary Return the array of quarters within the specified time interval.\r\n *\r\n * @description\r\n * Return the array of quarters within the specified time interval.\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n *\r\n * @param interval - The interval\r\n *\r\n * @returns The array with starts of quarters from the quarter of the interval start to the quarter of the interval end\r\n *\r\n * @example\r\n * // Each quarter within interval 6 February 2014 - 10 August 2014:\r\n * const result = eachQuarterOfInterval({\r\n *   start: new Date(2014, 1, 6),\r\n *   end: new Date(2014, 7, 10)\r\n * })\r\n * //=> [\r\n * //   Wed Jan 01 2014 00:00:00,\r\n * //   Tue Apr 01 2014 00:00:00,\r\n * //   Tue Jul 01 2014 00:00:00,\r\n * // ]\r\n */\r\nfunction eachQuarterOfInterval(interval, options) {\r\n  const startDate = (0, _index3.toDate)(interval.start);\r\n  const endDate = (0, _index3.toDate)(interval.end);\r\n\r\n  let reversed = +startDate > +endDate;\r\n  const endTime = reversed\r\n    ? +(0, _index2.startOfQuarter)(startDate)\r\n    : +(0, _index2.startOfQuarter)(endDate);\r\n  let currentDate = reversed\r\n    ? (0, _index2.startOfQuarter)(endDate)\r\n    : (0, _index2.startOfQuarter)(startDate);\r\n\r\n  let step = options?.step ?? 1;\r\n  if (!step) return [];\r\n  if (step < 0) {\r\n    step = -step;\r\n    reversed = !reversed;\r\n  }\r\n\r\n  const dates = [];\r\n\r\n  while (+currentDate <= endTime) {\r\n    dates.push((0, _index3.toDate)(currentDate));\r\n    currentDate = (0, _index.addQuarters)(currentDate, step);\r\n  }\r\n\r\n  return reversed ? dates.reverse() : dates;\r\n}\r\n"],"mappings":"AAAA,YAAY;;AACZA,OAAO,CAACC,qBAAqB,GAAGA,qBAAqB;AACrD,IAAIC,MAAM,GAAGC,OAAO,CAAC,kBAAkB,CAAC;AACxC,IAAIC,OAAO,GAAGD,OAAO,CAAC,qBAAqB,CAAC;AAC5C,IAAIE,OAAO,GAAGF,OAAO,CAAC,aAAa,CAAC;;AAEpC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASF,qBAAqBA,CAACK,QAAQ,EAAEC,OAAO,EAAE;EAChD,MAAMC,SAAS,GAAG,CAAC,CAAC,EAAEH,OAAO,CAACI,MAAM,EAAEH,QAAQ,CAACI,KAAK,CAAC;EACrD,MAAMC,OAAO,GAAG,CAAC,CAAC,EAAEN,OAAO,CAACI,MAAM,EAAEH,QAAQ,CAACM,GAAG,CAAC;EAEjD,IAAIC,QAAQ,GAAG,CAACL,SAAS,GAAG,CAACG,OAAO;EACpC,MAAMG,OAAO,GAAGD,QAAQ,GACpB,CAAC,CAAC,CAAC,EAAET,OAAO,CAACW,cAAc,EAAEP,SAAS,CAAC,GACvC,CAAC,CAAC,CAAC,EAAEJ,OAAO,CAACW,cAAc,EAAEJ,OAAO,CAAC;EACzC,IAAIK,WAAW,GAAGH,QAAQ,GACtB,CAAC,CAAC,EAAET,OAAO,CAACW,cAAc,EAAEJ,OAAO,CAAC,GACpC,CAAC,CAAC,EAAEP,OAAO,CAACW,cAAc,EAAEP,SAAS,CAAC;EAE1C,IAAIS,IAAI,GAAGV,OAAO,EAAEU,IAAI,IAAI,CAAC;EAC7B,IAAI,CAACA,IAAI,EAAE,OAAO,EAAE;EACpB,IAAIA,IAAI,GAAG,CAAC,EAAE;IACZA,IAAI,GAAG,CAACA,IAAI;IACZJ,QAAQ,GAAG,CAACA,QAAQ;EACtB;EAEA,MAAMK,KAAK,GAAG,EAAE;EAEhB,OAAO,CAACF,WAAW,IAAIF,OAAO,EAAE;IAC9BI,KAAK,CAACC,IAAI,CAAC,CAAC,CAAC,EAAEd,OAAO,CAACI,MAAM,EAAEO,WAAW,CAAC,CAAC;IAC5CA,WAAW,GAAG,CAAC,CAAC,EAAEd,MAAM,CAACkB,WAAW,EAAEJ,WAAW,EAAEC,IAAI,CAAC;EAC1D;EAEA,OAAOJ,QAAQ,GAAGK,KAAK,CAACG,OAAO,CAAC,CAAC,GAAGH,KAAK;AAC3C","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}