{"ast":null,"code":"\"use strict\";\n\nexports.eachWeekendOfInterval = eachWeekendOfInterval;\nvar _index = require(\"./eachDayOfInterval.js\");\nvar _index2 = require(\"./isWeekend.js\");\n\n/**\r\n * @name eachWeekendOfInterval\r\n * @category Interval Helpers\r\n * @summary List all the Saturdays and Sundays in the given date interval.\r\n *\r\n * @description\r\n * Get all the Saturdays and Sundays in the given date interval.\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n *\r\n * @param interval - The given interval\r\n *\r\n * @returns An array containing all the Saturdays and Sundays\r\n *\r\n * @example\r\n * // Lists all Saturdays and Sundays in the given date interval\r\n * const result = eachWeekendOfInterval({\r\n *   start: new Date(2018, 8, 17),\r\n *   end: new Date(2018, 8, 30)\r\n * })\r\n * //=> [\r\n * //   Sat Sep 22 2018 00:00:00,\r\n * //   Sun Sep 23 2018 00:00:00,\r\n * //   Sat Sep 29 2018 00:00:00,\r\n * //   Sun Sep 30 2018 00:00:00\r\n * // ]\r\n */\nfunction eachWeekendOfInterval(interval) {\n  const dateInterval = (0, _index.eachDayOfInterval)(interval);\n  const weekends = [];\n  let index = 0;\n  while (index < dateInterval.length) {\n    const date = dateInterval[index++];\n    if ((0, _index2.isWeekend)(date)) weekends.push(date);\n  }\n  return weekends;\n}","map":{"version":3,"names":["exports","eachWeekendOfInterval","_index","require","_index2","interval","dateInterval","eachDayOfInterval","weekends","index","length","date","isWeekend","push"],"sources":["D:/Faculty/Spring 2024/SW engineering/project/Expense-Tracker-Application/frontend/node_modules/date-fns/eachWeekendOfInterval.js"],"sourcesContent":["\"use strict\";\r\nexports.eachWeekendOfInterval = eachWeekendOfInterval;\r\nvar _index = require(\"./eachDayOfInterval.js\");\r\nvar _index2 = require(\"./isWeekend.js\");\r\n\r\n/**\r\n * @name eachWeekendOfInterval\r\n * @category Interval Helpers\r\n * @summary List all the Saturdays and Sundays in the given date interval.\r\n *\r\n * @description\r\n * Get all the Saturdays and Sundays in the given date interval.\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n *\r\n * @param interval - The given interval\r\n *\r\n * @returns An array containing all the Saturdays and Sundays\r\n *\r\n * @example\r\n * // Lists all Saturdays and Sundays in the given date interval\r\n * const result = eachWeekendOfInterval({\r\n *   start: new Date(2018, 8, 17),\r\n *   end: new Date(2018, 8, 30)\r\n * })\r\n * //=> [\r\n * //   Sat Sep 22 2018 00:00:00,\r\n * //   Sun Sep 23 2018 00:00:00,\r\n * //   Sat Sep 29 2018 00:00:00,\r\n * //   Sun Sep 30 2018 00:00:00\r\n * // ]\r\n */\r\nfunction eachWeekendOfInterval(interval) {\r\n  const dateInterval = (0, _index.eachDayOfInterval)(interval);\r\n  const weekends = [];\r\n  let index = 0;\r\n  while (index < dateInterval.length) {\r\n    const date = dateInterval[index++];\r\n    if ((0, _index2.isWeekend)(date)) weekends.push(date);\r\n  }\r\n  return weekends;\r\n}\r\n"],"mappings":"AAAA,YAAY;;AACZA,OAAO,CAACC,qBAAqB,GAAGA,qBAAqB;AACrD,IAAIC,MAAM,GAAGC,OAAO,CAAC,wBAAwB,CAAC;AAC9C,IAAIC,OAAO,GAAGD,OAAO,CAAC,gBAAgB,CAAC;;AAEvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASF,qBAAqBA,CAACI,QAAQ,EAAE;EACvC,MAAMC,YAAY,GAAG,CAAC,CAAC,EAAEJ,MAAM,CAACK,iBAAiB,EAAEF,QAAQ,CAAC;EAC5D,MAAMG,QAAQ,GAAG,EAAE;EACnB,IAAIC,KAAK,GAAG,CAAC;EACb,OAAOA,KAAK,GAAGH,YAAY,CAACI,MAAM,EAAE;IAClC,MAAMC,IAAI,GAAGL,YAAY,CAACG,KAAK,EAAE,CAAC;IAClC,IAAI,CAAC,CAAC,EAAEL,OAAO,CAACQ,SAAS,EAAED,IAAI,CAAC,EAAEH,QAAQ,CAACK,IAAI,CAACF,IAAI,CAAC;EACvD;EACA,OAAOH,QAAQ;AACjB","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}