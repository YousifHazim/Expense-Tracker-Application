{"ast":null,"code":"\"use strict\";\n\nexports.differenceInBusinessDays = differenceInBusinessDays;\nvar _index = require(\"./addDays.js\");\nvar _index2 = require(\"./differenceInCalendarDays.js\");\nvar _index3 = require(\"./isSameDay.js\");\nvar _index4 = require(\"./isValid.js\");\nvar _index5 = require(\"./isWeekend.js\");\nvar _index6 = require(\"./toDate.js\");\n\n/**\r\n * @name differenceInBusinessDays\r\n * @category Day Helpers\r\n * @summary Get the number of business days between the given dates.\r\n *\r\n * @description\r\n * Get the number of business day periods between the given dates.\r\n * Business days being days that arent in the weekend.\r\n * Like `differenceInCalendarDays`, the function removes the times from\r\n * the dates before calculating the difference.\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n *\r\n * @param dateLeft - The later date\r\n * @param dateRight - The earlier date\r\n *\r\n * @returns The number of business days\r\n *\r\n * @example\r\n * // How many business days are between\r\n * // 10 January 2014 and 20 July 2014?\r\n * const result = differenceInBusinessDays(\r\n *   new Date(2014, 6, 20),\r\n *   new Date(2014, 0, 10)\r\n * )\r\n * //=> 136\r\n *\r\n * // How many business days are between\r\n * // 30 November 2021 and 1 November 2021?\r\n * const result = differenceInBusinessDays(\r\n *   new Date(2021, 10, 30),\r\n *   new Date(2021, 10, 1)\r\n * )\r\n * //=> 21\r\n *\r\n * // How many business days are between\r\n * // 1 November 2021 and 1 December 2021?\r\n * const result = differenceInBusinessDays(\r\n *   new Date(2021, 10, 1),\r\n *   new Date(2021, 11, 1)\r\n * )\r\n * //=> -22\r\n *\r\n * // How many business days are between\r\n * // 1 November 2021 and 1 November 2021 ?\r\n * const result = differenceInBusinessDays(\r\n *   new Date(2021, 10, 1),\r\n *   new Date(2021, 10, 1)\r\n * )\r\n * //=> 0\r\n */\nfunction differenceInBusinessDays(dateLeft, dateRight) {\n  const _dateLeft = (0, _index6.toDate)(dateLeft);\n  let _dateRight = (0, _index6.toDate)(dateRight);\n  if (!(0, _index4.isValid)(_dateLeft) || !(0, _index4.isValid)(_dateRight)) return NaN;\n  const calendarDifference = (0, _index2.differenceInCalendarDays)(_dateLeft, _dateRight);\n  const sign = calendarDifference < 0 ? -1 : 1;\n  const weeks = Math.trunc(calendarDifference / 7);\n  let result = weeks * 5;\n  _dateRight = (0, _index.addDays)(_dateRight, weeks * 7);\n\n  // the loop below will run at most 6 times to account for the remaining days that don't makeup a full week\n  while (!(0, _index3.isSameDay)(_dateLeft, _dateRight)) {\n    // sign is used to account for both negative and positive differences\n    result += (0, _index5.isWeekend)(_dateRight) ? 0 : sign;\n    _dateRight = (0, _index.addDays)(_dateRight, sign);\n  }\n\n  // Prevent negative zero\n  return result === 0 ? 0 : result;\n}","map":{"version":3,"names":["exports","differenceInBusinessDays","_index","require","_index2","_index3","_index4","_index5","_index6","dateLeft","dateRight","_dateLeft","toDate","_dateRight","isValid","NaN","calendarDifference","differenceInCalendarDays","sign","weeks","Math","trunc","result","addDays","isSameDay","isWeekend"],"sources":["D:/Faculty/Spring 2024/SW engineering/project/Expense-Tracker-Application/frontend/node_modules/date-fns/differenceInBusinessDays.js"],"sourcesContent":["\"use strict\";\r\nexports.differenceInBusinessDays = differenceInBusinessDays;\r\nvar _index = require(\"./addDays.js\");\r\nvar _index2 = require(\"./differenceInCalendarDays.js\");\r\nvar _index3 = require(\"./isSameDay.js\");\r\nvar _index4 = require(\"./isValid.js\");\r\nvar _index5 = require(\"./isWeekend.js\");\r\nvar _index6 = require(\"./toDate.js\");\r\n\r\n/**\r\n * @name differenceInBusinessDays\r\n * @category Day Helpers\r\n * @summary Get the number of business days between the given dates.\r\n *\r\n * @description\r\n * Get the number of business day periods between the given dates.\r\n * Business days being days that arent in the weekend.\r\n * Like `differenceInCalendarDays`, the function removes the times from\r\n * the dates before calculating the difference.\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n *\r\n * @param dateLeft - The later date\r\n * @param dateRight - The earlier date\r\n *\r\n * @returns The number of business days\r\n *\r\n * @example\r\n * // How many business days are between\r\n * // 10 January 2014 and 20 July 2014?\r\n * const result = differenceInBusinessDays(\r\n *   new Date(2014, 6, 20),\r\n *   new Date(2014, 0, 10)\r\n * )\r\n * //=> 136\r\n *\r\n * // How many business days are between\r\n * // 30 November 2021 and 1 November 2021?\r\n * const result = differenceInBusinessDays(\r\n *   new Date(2021, 10, 30),\r\n *   new Date(2021, 10, 1)\r\n * )\r\n * //=> 21\r\n *\r\n * // How many business days are between\r\n * // 1 November 2021 and 1 December 2021?\r\n * const result = differenceInBusinessDays(\r\n *   new Date(2021, 10, 1),\r\n *   new Date(2021, 11, 1)\r\n * )\r\n * //=> -22\r\n *\r\n * // How many business days are between\r\n * // 1 November 2021 and 1 November 2021 ?\r\n * const result = differenceInBusinessDays(\r\n *   new Date(2021, 10, 1),\r\n *   new Date(2021, 10, 1)\r\n * )\r\n * //=> 0\r\n */\r\nfunction differenceInBusinessDays(dateLeft, dateRight) {\r\n  const _dateLeft = (0, _index6.toDate)(dateLeft);\r\n  let _dateRight = (0, _index6.toDate)(dateRight);\r\n\r\n  if (!(0, _index4.isValid)(_dateLeft) || !(0, _index4.isValid)(_dateRight))\r\n    return NaN;\r\n\r\n  const calendarDifference = (0, _index2.differenceInCalendarDays)(\r\n    _dateLeft,\r\n    _dateRight,\r\n  );\r\n  const sign = calendarDifference < 0 ? -1 : 1;\r\n\r\n  const weeks = Math.trunc(calendarDifference / 7);\r\n\r\n  let result = weeks * 5;\r\n  _dateRight = (0, _index.addDays)(_dateRight, weeks * 7);\r\n\r\n  // the loop below will run at most 6 times to account for the remaining days that don't makeup a full week\r\n  while (!(0, _index3.isSameDay)(_dateLeft, _dateRight)) {\r\n    // sign is used to account for both negative and positive differences\r\n    result += (0, _index5.isWeekend)(_dateRight) ? 0 : sign;\r\n    _dateRight = (0, _index.addDays)(_dateRight, sign);\r\n  }\r\n\r\n  // Prevent negative zero\r\n  return result === 0 ? 0 : result;\r\n}\r\n"],"mappings":"AAAA,YAAY;;AACZA,OAAO,CAACC,wBAAwB,GAAGA,wBAAwB;AAC3D,IAAIC,MAAM,GAAGC,OAAO,CAAC,cAAc,CAAC;AACpC,IAAIC,OAAO,GAAGD,OAAO,CAAC,+BAA+B,CAAC;AACtD,IAAIE,OAAO,GAAGF,OAAO,CAAC,gBAAgB,CAAC;AACvC,IAAIG,OAAO,GAAGH,OAAO,CAAC,cAAc,CAAC;AACrC,IAAII,OAAO,GAAGJ,OAAO,CAAC,gBAAgB,CAAC;AACvC,IAAIK,OAAO,GAAGL,OAAO,CAAC,aAAa,CAAC;;AAEpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASF,wBAAwBA,CAACQ,QAAQ,EAAEC,SAAS,EAAE;EACrD,MAAMC,SAAS,GAAG,CAAC,CAAC,EAAEH,OAAO,CAACI,MAAM,EAAEH,QAAQ,CAAC;EAC/C,IAAII,UAAU,GAAG,CAAC,CAAC,EAAEL,OAAO,CAACI,MAAM,EAAEF,SAAS,CAAC;EAE/C,IAAI,CAAC,CAAC,CAAC,EAAEJ,OAAO,CAACQ,OAAO,EAAEH,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,EAAEL,OAAO,CAACQ,OAAO,EAAED,UAAU,CAAC,EACvE,OAAOE,GAAG;EAEZ,MAAMC,kBAAkB,GAAG,CAAC,CAAC,EAAEZ,OAAO,CAACa,wBAAwB,EAC7DN,SAAS,EACTE,UACF,CAAC;EACD,MAAMK,IAAI,GAAGF,kBAAkB,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC;EAE5C,MAAMG,KAAK,GAAGC,IAAI,CAACC,KAAK,CAACL,kBAAkB,GAAG,CAAC,CAAC;EAEhD,IAAIM,MAAM,GAAGH,KAAK,GAAG,CAAC;EACtBN,UAAU,GAAG,CAAC,CAAC,EAAEX,MAAM,CAACqB,OAAO,EAAEV,UAAU,EAAEM,KAAK,GAAG,CAAC,CAAC;;EAEvD;EACA,OAAO,CAAC,CAAC,CAAC,EAAEd,OAAO,CAACmB,SAAS,EAAEb,SAAS,EAAEE,UAAU,CAAC,EAAE;IACrD;IACAS,MAAM,IAAI,CAAC,CAAC,EAAEf,OAAO,CAACkB,SAAS,EAAEZ,UAAU,CAAC,GAAG,CAAC,GAAGK,IAAI;IACvDL,UAAU,GAAG,CAAC,CAAC,EAAEX,MAAM,CAACqB,OAAO,EAAEV,UAAU,EAAEK,IAAI,CAAC;EACpD;;EAEA;EACA,OAAOI,MAAM,KAAK,CAAC,GAAG,CAAC,GAAGA,MAAM;AAClC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}