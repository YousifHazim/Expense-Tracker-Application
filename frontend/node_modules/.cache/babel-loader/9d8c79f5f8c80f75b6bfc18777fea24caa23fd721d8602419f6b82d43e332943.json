{"ast":null,"code":"\"use strict\";\n\nexports.setWeek = setWeek;\nvar _index = require(\"./getWeek.js\");\nvar _index2 = require(\"./toDate.js\");\n\n/**\r\n * The {@link setWeek} function options.\r\n */\n\n/**\r\n * @name setWeek\r\n * @category Week Helpers\r\n * @summary Set the local week to the given date.\r\n *\r\n * @description\r\n * Set the local week to the given date, saving the weekday number.\r\n * The exact calculation depends on the values of\r\n * `options.weekStartsOn` (which is the index of the first day of the week)\r\n * and `options.firstWeekContainsDate` (which is the day of January, which is always in\r\n * the first week of the week-numbering year)\r\n *\r\n * Week numbering: https://en.wikipedia.org/wiki/Week#The_ISO_week_date_system\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n *\r\n * @param date - The date to be changed\r\n * @param week - The week of the new date\r\n * @param options - An object with options\r\n *\r\n * @returns The new date with the local week set\r\n *\r\n * @example\r\n * // Set the 1st week to 2 January 2005 with default options:\r\n * const result = setWeek(new Date(2005, 0, 2), 1)\r\n * //=> Sun Dec 26 2004 00:00:00\r\n *\r\n * @example\r\n * // Set the 1st week to 2 January 2005,\r\n * // if Monday is the first day of the week,\r\n * // and the first week of the year always contains 4 January:\r\n * const result = setWeek(new Date(2005, 0, 2), 1, {\r\n *   weekStartsOn: 1,\r\n *   firstWeekContainsDate: 4\r\n * })\r\n * //=> Sun Jan 4 2004 00:00:00\r\n */\nfunction setWeek(date, week, options) {\n  const _date = (0, _index2.toDate)(date);\n  const diff = (0, _index.getWeek)(_date, options) - week;\n  _date.setDate(_date.getDate() - diff * 7);\n  return _date;\n}","map":{"version":3,"names":["exports","setWeek","_index","require","_index2","date","week","options","_date","toDate","diff","getWeek","setDate","getDate"],"sources":["D:/Faculty/Spring 2024/SW engineering/project/Expense-Tracker-Application/frontend/node_modules/date-fns/setWeek.js"],"sourcesContent":["\"use strict\";\r\nexports.setWeek = setWeek;\r\nvar _index = require(\"./getWeek.js\");\r\nvar _index2 = require(\"./toDate.js\");\r\n\r\n/**\r\n * The {@link setWeek} function options.\r\n */\r\n\r\n/**\r\n * @name setWeek\r\n * @category Week Helpers\r\n * @summary Set the local week to the given date.\r\n *\r\n * @description\r\n * Set the local week to the given date, saving the weekday number.\r\n * The exact calculation depends on the values of\r\n * `options.weekStartsOn` (which is the index of the first day of the week)\r\n * and `options.firstWeekContainsDate` (which is the day of January, which is always in\r\n * the first week of the week-numbering year)\r\n *\r\n * Week numbering: https://en.wikipedia.org/wiki/Week#The_ISO_week_date_system\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n *\r\n * @param date - The date to be changed\r\n * @param week - The week of the new date\r\n * @param options - An object with options\r\n *\r\n * @returns The new date with the local week set\r\n *\r\n * @example\r\n * // Set the 1st week to 2 January 2005 with default options:\r\n * const result = setWeek(new Date(2005, 0, 2), 1)\r\n * //=> Sun Dec 26 2004 00:00:00\r\n *\r\n * @example\r\n * // Set the 1st week to 2 January 2005,\r\n * // if Monday is the first day of the week,\r\n * // and the first week of the year always contains 4 January:\r\n * const result = setWeek(new Date(2005, 0, 2), 1, {\r\n *   weekStartsOn: 1,\r\n *   firstWeekContainsDate: 4\r\n * })\r\n * //=> Sun Jan 4 2004 00:00:00\r\n */\r\nfunction setWeek(date, week, options) {\r\n  const _date = (0, _index2.toDate)(date);\r\n  const diff = (0, _index.getWeek)(_date, options) - week;\r\n  _date.setDate(_date.getDate() - diff * 7);\r\n  return _date;\r\n}\r\n"],"mappings":"AAAA,YAAY;;AACZA,OAAO,CAACC,OAAO,GAAGA,OAAO;AACzB,IAAIC,MAAM,GAAGC,OAAO,CAAC,cAAc,CAAC;AACpC,IAAIC,OAAO,GAAGD,OAAO,CAAC,aAAa,CAAC;;AAEpC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASF,OAAOA,CAACI,IAAI,EAAEC,IAAI,EAAEC,OAAO,EAAE;EACpC,MAAMC,KAAK,GAAG,CAAC,CAAC,EAAEJ,OAAO,CAACK,MAAM,EAAEJ,IAAI,CAAC;EACvC,MAAMK,IAAI,GAAG,CAAC,CAAC,EAAER,MAAM,CAACS,OAAO,EAAEH,KAAK,EAAED,OAAO,CAAC,GAAGD,IAAI;EACvDE,KAAK,CAACI,OAAO,CAACJ,KAAK,CAACK,OAAO,CAAC,CAAC,GAAGH,IAAI,GAAG,CAAC,CAAC;EACzC,OAAOF,KAAK;AACd","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}