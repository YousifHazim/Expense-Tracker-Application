{"ast":null,"code":"\"use strict\";\n\nexports.max = max;\nvar _index = require(\"./toDate.js\");\n\n/**\r\n * @name max\r\n * @category Common Helpers\r\n * @summary Return the latest of the given dates.\r\n *\r\n * @description\r\n * Return the latest of the given dates.\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n *\r\n * @param dates - The dates to compare\r\n *\r\n * @returns The latest of the dates\r\n *\r\n * @example\r\n * // Which of these dates is the latest?\r\n * const result = max([\r\n *   new Date(1989, 6, 10),\r\n *   new Date(1987, 1, 11),\r\n *   new Date(1995, 6, 2),\r\n *   new Date(1990, 0, 1)\r\n * ])\r\n * //=> Sun Jul 02 1995 00:00:00\r\n */\nfunction max(dates) {\n  let result;\n  dates.forEach(function (dirtyDate) {\n    const currentDate = (0, _index.toDate)(dirtyDate);\n    if (result === undefined || result < currentDate || isNaN(Number(currentDate))) {\n      result = currentDate;\n    }\n  });\n  return result || new Date(NaN);\n}","map":{"version":3,"names":["exports","max","_index","require","dates","result","forEach","dirtyDate","currentDate","toDate","undefined","isNaN","Number","Date","NaN"],"sources":["D:/Faculty/Spring 2024/SW engineering/project/Expense-Tracker-Application/frontend/node_modules/date-fns/max.js"],"sourcesContent":["\"use strict\";\r\nexports.max = max;\r\nvar _index = require(\"./toDate.js\");\r\n\r\n/**\r\n * @name max\r\n * @category Common Helpers\r\n * @summary Return the latest of the given dates.\r\n *\r\n * @description\r\n * Return the latest of the given dates.\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n *\r\n * @param dates - The dates to compare\r\n *\r\n * @returns The latest of the dates\r\n *\r\n * @example\r\n * // Which of these dates is the latest?\r\n * const result = max([\r\n *   new Date(1989, 6, 10),\r\n *   new Date(1987, 1, 11),\r\n *   new Date(1995, 6, 2),\r\n *   new Date(1990, 0, 1)\r\n * ])\r\n * //=> Sun Jul 02 1995 00:00:00\r\n */\r\nfunction max(dates) {\r\n  let result;\r\n  dates.forEach(function (dirtyDate) {\r\n    const currentDate = (0, _index.toDate)(dirtyDate);\r\n\r\n    if (\r\n      result === undefined ||\r\n      result < currentDate ||\r\n      isNaN(Number(currentDate))\r\n    ) {\r\n      result = currentDate;\r\n    }\r\n  });\r\n\r\n  return result || new Date(NaN);\r\n}\r\n"],"mappings":"AAAA,YAAY;;AACZA,OAAO,CAACC,GAAG,GAAGA,GAAG;AACjB,IAAIC,MAAM,GAAGC,OAAO,CAAC,aAAa,CAAC;;AAEnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASF,GAAGA,CAACG,KAAK,EAAE;EAClB,IAAIC,MAAM;EACVD,KAAK,CAACE,OAAO,CAAC,UAAUC,SAAS,EAAE;IACjC,MAAMC,WAAW,GAAG,CAAC,CAAC,EAAEN,MAAM,CAACO,MAAM,EAAEF,SAAS,CAAC;IAEjD,IACEF,MAAM,KAAKK,SAAS,IACpBL,MAAM,GAAGG,WAAW,IACpBG,KAAK,CAACC,MAAM,CAACJ,WAAW,CAAC,CAAC,EAC1B;MACAH,MAAM,GAAGG,WAAW;IACtB;EACF,CAAC,CAAC;EAEF,OAAOH,MAAM,IAAI,IAAIQ,IAAI,CAACC,GAAG,CAAC;AAChC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}