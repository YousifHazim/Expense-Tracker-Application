{"ast":null,"code":"\"use strict\";\n\nexports.eachHourOfInterval = eachHourOfInterval;\nvar _index = require(\"./addHours.js\");\nvar _index2 = require(\"./toDate.js\");\n\n/**\r\n * The {@link eachHourOfInterval} function options.\r\n */\n\n/**\r\n * @name eachHourOfInterval\r\n * @category Interval Helpers\r\n * @summary Return the array of hours within the specified time interval.\r\n *\r\n * @description\r\n * Return the array of hours within the specified time interval.\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n *\r\n * @param interval - The interval.\r\n * @param options - An object with options.\r\n *\r\n * @returns The array with starts of hours from the hour of the interval start to the hour of the interval end\r\n *\r\n * @example\r\n * // Each hour between 6 October 2014, 12:00 and 6 October 2014, 15:00\r\n * const result = eachHourOfInterval({\r\n *   start: new Date(2014, 9, 6, 12),\r\n *   end: new Date(2014, 9, 6, 15)\r\n * })\r\n * //=> [\r\n * //   Mon Oct 06 2014 12:00:00,\r\n * //   Mon Oct 06 2014 13:00:00,\r\n * //   Mon Oct 06 2014 14:00:00,\r\n * //   Mon Oct 06 2014 15:00:00\r\n * // ]\r\n */\nfunction eachHourOfInterval(interval, options) {\n  const startDate = (0, _index2.toDate)(interval.start);\n  const endDate = (0, _index2.toDate)(interval.end);\n  let reversed = +startDate > +endDate;\n  const endTime = reversed ? +startDate : +endDate;\n  let currentDate = reversed ? endDate : startDate;\n  currentDate.setMinutes(0, 0, 0);\n  let step = options?.step ?? 1;\n  if (!step) return [];\n  if (step < 0) {\n    step = -step;\n    reversed = !reversed;\n  }\n  const dates = [];\n  while (+currentDate <= endTime) {\n    dates.push((0, _index2.toDate)(currentDate));\n    currentDate = (0, _index.addHours)(currentDate, step);\n  }\n  return reversed ? dates.reverse() : dates;\n}","map":{"version":3,"names":["exports","eachHourOfInterval","_index","require","_index2","interval","options","startDate","toDate","start","endDate","end","reversed","endTime","currentDate","setMinutes","step","dates","push","addHours","reverse"],"sources":["D:/Faculty/Spring 2024/SW engineering/project/Expense-Tracker-Application/frontend/node_modules/date-fns/eachHourOfInterval.js"],"sourcesContent":["\"use strict\";\r\nexports.eachHourOfInterval = eachHourOfInterval;\r\nvar _index = require(\"./addHours.js\");\r\nvar _index2 = require(\"./toDate.js\");\r\n\r\n/**\r\n * The {@link eachHourOfInterval} function options.\r\n */\r\n\r\n/**\r\n * @name eachHourOfInterval\r\n * @category Interval Helpers\r\n * @summary Return the array of hours within the specified time interval.\r\n *\r\n * @description\r\n * Return the array of hours within the specified time interval.\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n *\r\n * @param interval - The interval.\r\n * @param options - An object with options.\r\n *\r\n * @returns The array with starts of hours from the hour of the interval start to the hour of the interval end\r\n *\r\n * @example\r\n * // Each hour between 6 October 2014, 12:00 and 6 October 2014, 15:00\r\n * const result = eachHourOfInterval({\r\n *   start: new Date(2014, 9, 6, 12),\r\n *   end: new Date(2014, 9, 6, 15)\r\n * })\r\n * //=> [\r\n * //   Mon Oct 06 2014 12:00:00,\r\n * //   Mon Oct 06 2014 13:00:00,\r\n * //   Mon Oct 06 2014 14:00:00,\r\n * //   Mon Oct 06 2014 15:00:00\r\n * // ]\r\n */\r\nfunction eachHourOfInterval(interval, options) {\r\n  const startDate = (0, _index2.toDate)(interval.start);\r\n  const endDate = (0, _index2.toDate)(interval.end);\r\n\r\n  let reversed = +startDate > +endDate;\r\n  const endTime = reversed ? +startDate : +endDate;\r\n  let currentDate = reversed ? endDate : startDate;\r\n  currentDate.setMinutes(0, 0, 0);\r\n\r\n  let step = options?.step ?? 1;\r\n  if (!step) return [];\r\n  if (step < 0) {\r\n    step = -step;\r\n    reversed = !reversed;\r\n  }\r\n\r\n  const dates = [];\r\n\r\n  while (+currentDate <= endTime) {\r\n    dates.push((0, _index2.toDate)(currentDate));\r\n    currentDate = (0, _index.addHours)(currentDate, step);\r\n  }\r\n\r\n  return reversed ? dates.reverse() : dates;\r\n}\r\n"],"mappings":"AAAA,YAAY;;AACZA,OAAO,CAACC,kBAAkB,GAAGA,kBAAkB;AAC/C,IAAIC,MAAM,GAAGC,OAAO,CAAC,eAAe,CAAC;AACrC,IAAIC,OAAO,GAAGD,OAAO,CAAC,aAAa,CAAC;;AAEpC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASF,kBAAkBA,CAACI,QAAQ,EAAEC,OAAO,EAAE;EAC7C,MAAMC,SAAS,GAAG,CAAC,CAAC,EAAEH,OAAO,CAACI,MAAM,EAAEH,QAAQ,CAACI,KAAK,CAAC;EACrD,MAAMC,OAAO,GAAG,CAAC,CAAC,EAAEN,OAAO,CAACI,MAAM,EAAEH,QAAQ,CAACM,GAAG,CAAC;EAEjD,IAAIC,QAAQ,GAAG,CAACL,SAAS,GAAG,CAACG,OAAO;EACpC,MAAMG,OAAO,GAAGD,QAAQ,GAAG,CAACL,SAAS,GAAG,CAACG,OAAO;EAChD,IAAII,WAAW,GAAGF,QAAQ,GAAGF,OAAO,GAAGH,SAAS;EAChDO,WAAW,CAACC,UAAU,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;EAE/B,IAAIC,IAAI,GAAGV,OAAO,EAAEU,IAAI,IAAI,CAAC;EAC7B,IAAI,CAACA,IAAI,EAAE,OAAO,EAAE;EACpB,IAAIA,IAAI,GAAG,CAAC,EAAE;IACZA,IAAI,GAAG,CAACA,IAAI;IACZJ,QAAQ,GAAG,CAACA,QAAQ;EACtB;EAEA,MAAMK,KAAK,GAAG,EAAE;EAEhB,OAAO,CAACH,WAAW,IAAID,OAAO,EAAE;IAC9BI,KAAK,CAACC,IAAI,CAAC,CAAC,CAAC,EAAEd,OAAO,CAACI,MAAM,EAAEM,WAAW,CAAC,CAAC;IAC5CA,WAAW,GAAG,CAAC,CAAC,EAAEZ,MAAM,CAACiB,QAAQ,EAAEL,WAAW,EAAEE,IAAI,CAAC;EACvD;EAEA,OAAOJ,QAAQ,GAAGK,KAAK,CAACG,OAAO,CAAC,CAAC,GAAGH,KAAK;AAC3C","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}