{"ast":null,"code":"\"use strict\";\n\nexports.differenceInYears = differenceInYears;\nvar _index = require(\"./compareAsc.js\");\nvar _index2 = require(\"./differenceInCalendarYears.js\");\nvar _index3 = require(\"./toDate.js\");\n\n/**\r\n * @name differenceInYears\r\n * @category Year Helpers\r\n * @summary Get the number of full years between the given dates.\r\n *\r\n * @description\r\n * Get the number of full years between the given dates.\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n *\r\n * @param dateLeft - The later date\r\n * @param dateRight - The earlier date\r\n *\r\n * @returns The number of full years\r\n *\r\n * @example\r\n * // How many full years are between 31 December 2013 and 11 February 2015?\r\n * const result = differenceInYears(new Date(2015, 1, 11), new Date(2013, 11, 31))\r\n * //=> 1\r\n */\nfunction differenceInYears(dateLeft, dateRight) {\n  const _dateLeft = (0, _index3.toDate)(dateLeft);\n  const _dateRight = (0, _index3.toDate)(dateRight);\n  const sign = (0, _index.compareAsc)(_dateLeft, _dateRight);\n  const difference = Math.abs((0, _index2.differenceInCalendarYears)(_dateLeft, _dateRight));\n\n  // Set both dates to a valid leap year for accurate comparison when dealing\n  // with leap days\n  _dateLeft.setFullYear(1584);\n  _dateRight.setFullYear(1584);\n\n  // Math.abs(diff in full years - diff in calendar years) === 1 if last calendar year is not full\n  // If so, result must be decreased by 1 in absolute value\n  const isLastYearNotFull = (0, _index.compareAsc)(_dateLeft, _dateRight) === -sign;\n  const result = sign * (difference - +isLastYearNotFull);\n\n  // Prevent negative zero\n  return result === 0 ? 0 : result;\n}","map":{"version":3,"names":["exports","differenceInYears","_index","require","_index2","_index3","dateLeft","dateRight","_dateLeft","toDate","_dateRight","sign","compareAsc","difference","Math","abs","differenceInCalendarYears","setFullYear","isLastYearNotFull","result"],"sources":["D:/Faculty/Spring 2024/SW engineering/project/Expense-Tracker-Application/frontend/node_modules/date-fns/differenceInYears.js"],"sourcesContent":["\"use strict\";\r\nexports.differenceInYears = differenceInYears;\r\nvar _index = require(\"./compareAsc.js\");\r\nvar _index2 = require(\"./differenceInCalendarYears.js\");\r\nvar _index3 = require(\"./toDate.js\");\r\n\r\n/**\r\n * @name differenceInYears\r\n * @category Year Helpers\r\n * @summary Get the number of full years between the given dates.\r\n *\r\n * @description\r\n * Get the number of full years between the given dates.\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n *\r\n * @param dateLeft - The later date\r\n * @param dateRight - The earlier date\r\n *\r\n * @returns The number of full years\r\n *\r\n * @example\r\n * // How many full years are between 31 December 2013 and 11 February 2015?\r\n * const result = differenceInYears(new Date(2015, 1, 11), new Date(2013, 11, 31))\r\n * //=> 1\r\n */\r\nfunction differenceInYears(dateLeft, dateRight) {\r\n  const _dateLeft = (0, _index3.toDate)(dateLeft);\r\n  const _dateRight = (0, _index3.toDate)(dateRight);\r\n\r\n  const sign = (0, _index.compareAsc)(_dateLeft, _dateRight);\r\n  const difference = Math.abs(\r\n    (0, _index2.differenceInCalendarYears)(_dateLeft, _dateRight),\r\n  );\r\n\r\n  // Set both dates to a valid leap year for accurate comparison when dealing\r\n  // with leap days\r\n  _dateLeft.setFullYear(1584);\r\n  _dateRight.setFullYear(1584);\r\n\r\n  // Math.abs(diff in full years - diff in calendar years) === 1 if last calendar year is not full\r\n  // If so, result must be decreased by 1 in absolute value\r\n  const isLastYearNotFull =\r\n    (0, _index.compareAsc)(_dateLeft, _dateRight) === -sign;\r\n  const result = sign * (difference - +isLastYearNotFull);\r\n\r\n  // Prevent negative zero\r\n  return result === 0 ? 0 : result;\r\n}\r\n"],"mappings":"AAAA,YAAY;;AACZA,OAAO,CAACC,iBAAiB,GAAGA,iBAAiB;AAC7C,IAAIC,MAAM,GAAGC,OAAO,CAAC,iBAAiB,CAAC;AACvC,IAAIC,OAAO,GAAGD,OAAO,CAAC,gCAAgC,CAAC;AACvD,IAAIE,OAAO,GAAGF,OAAO,CAAC,aAAa,CAAC;;AAEpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASF,iBAAiBA,CAACK,QAAQ,EAAEC,SAAS,EAAE;EAC9C,MAAMC,SAAS,GAAG,CAAC,CAAC,EAAEH,OAAO,CAACI,MAAM,EAAEH,QAAQ,CAAC;EAC/C,MAAMI,UAAU,GAAG,CAAC,CAAC,EAAEL,OAAO,CAACI,MAAM,EAAEF,SAAS,CAAC;EAEjD,MAAMI,IAAI,GAAG,CAAC,CAAC,EAAET,MAAM,CAACU,UAAU,EAAEJ,SAAS,EAAEE,UAAU,CAAC;EAC1D,MAAMG,UAAU,GAAGC,IAAI,CAACC,GAAG,CACzB,CAAC,CAAC,EAAEX,OAAO,CAACY,yBAAyB,EAAER,SAAS,EAAEE,UAAU,CAC9D,CAAC;;EAED;EACA;EACAF,SAAS,CAACS,WAAW,CAAC,IAAI,CAAC;EAC3BP,UAAU,CAACO,WAAW,CAAC,IAAI,CAAC;;EAE5B;EACA;EACA,MAAMC,iBAAiB,GACrB,CAAC,CAAC,EAAEhB,MAAM,CAACU,UAAU,EAAEJ,SAAS,EAAEE,UAAU,CAAC,KAAK,CAACC,IAAI;EACzD,MAAMQ,MAAM,GAAGR,IAAI,IAAIE,UAAU,GAAG,CAACK,iBAAiB,CAAC;;EAEvD;EACA,OAAOC,MAAM,KAAK,CAAC,GAAG,CAAC,GAAGA,MAAM;AAClC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}