{"ast":null,"code":"\"use strict\";\n\nexports.differenceInDays = differenceInDays;\nvar _index = require(\"./differenceInCalendarDays.js\");\nvar _index2 = require(\"./toDate.js\");\n\n/**\r\n * @name differenceInDays\r\n * @category Day Helpers\r\n * @summary Get the number of full days between the given dates.\r\n *\r\n * @description\r\n * Get the number of full day periods between two dates. Fractional days are\r\n * truncated towards zero.\r\n *\r\n * One \"full day\" is the distance between a local time in one day to the same\r\n * local time on the next or previous day. A full day can sometimes be less than\r\n * or more than 24 hours if a daylight savings change happens between two dates.\r\n *\r\n * To ignore DST and only measure exact 24-hour periods, use this instead:\r\n * `Math.trunc(differenceInHours(dateLeft, dateRight)/24)|0`.\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n *\r\n * @param dateLeft - The later date\r\n * @param dateRight - The earlier date\r\n *\r\n * @returns The number of full days according to the local timezone\r\n *\r\n * @example\r\n * // How many full days are between\r\n * // 2 July 2011 23:00:00 and 2 July 2012 00:00:00?\r\n * const result = differenceInDays(\r\n *   new Date(2012, 6, 2, 0, 0),\r\n *   new Date(2011, 6, 2, 23, 0)\r\n * )\r\n * //=> 365\r\n *\r\n * @example\r\n * // How many full days are between\r\n * // 2 July 2011 23:59:00 and 3 July 2011 00:01:00?\r\n * const result = differenceInDays(\r\n *   new Date(2011, 6, 3, 0, 1),\r\n *   new Date(2011, 6, 2, 23, 59)\r\n * )\r\n * //=> 0\r\n *\r\n * @example\r\n * // How many full days are between\r\n * // 1 March 2020 0:00 and 1 June 2020 0:00 ?\r\n * // Note: because local time is used, the\r\n * // result will always be 92 days, even in\r\n * // time zones where DST starts and the\r\n * // period has only 92*24-1 hours.\r\n * const result = differenceInDays(\r\n *   new Date(2020, 5, 1),\r\n *   new Date(2020, 2, 1)\r\n * )\r\n * //=> 92\r\n */\nfunction differenceInDays(dateLeft, dateRight) {\n  const _dateLeft = (0, _index2.toDate)(dateLeft);\n  const _dateRight = (0, _index2.toDate)(dateRight);\n  const sign = compareLocalAsc(_dateLeft, _dateRight);\n  const difference = Math.abs((0, _index.differenceInCalendarDays)(_dateLeft, _dateRight));\n  _dateLeft.setDate(_dateLeft.getDate() - sign * difference);\n\n  // Math.abs(diff in full days - diff in calendar days) === 1 if last calendar day is not full\n  // If so, result must be decreased by 1 in absolute value\n  const isLastDayNotFull = Number(compareLocalAsc(_dateLeft, _dateRight) === -sign);\n  const result = sign * (difference - isLastDayNotFull);\n  // Prevent negative zero\n  return result === 0 ? 0 : result;\n}\n\n// Like `compareAsc` but uses local time not UTC, which is needed\n// for accurate equality comparisons of UTC timestamps that end up\n// having the same representation in local time, e.g. one hour before\n// DST ends vs. the instant that DST ends.\nfunction compareLocalAsc(dateLeft, dateRight) {\n  const diff = dateLeft.getFullYear() - dateRight.getFullYear() || dateLeft.getMonth() - dateRight.getMonth() || dateLeft.getDate() - dateRight.getDate() || dateLeft.getHours() - dateRight.getHours() || dateLeft.getMinutes() - dateRight.getMinutes() || dateLeft.getSeconds() - dateRight.getSeconds() || dateLeft.getMilliseconds() - dateRight.getMilliseconds();\n  if (diff < 0) {\n    return -1;\n  } else if (diff > 0) {\n    return 1;\n    // Return 0 if diff is 0; return NaN if diff is NaN\n  } else {\n    return diff;\n  }\n}","map":{"version":3,"names":["exports","differenceInDays","_index","require","_index2","dateLeft","dateRight","_dateLeft","toDate","_dateRight","sign","compareLocalAsc","difference","Math","abs","differenceInCalendarDays","setDate","getDate","isLastDayNotFull","Number","result","diff","getFullYear","getMonth","getHours","getMinutes","getSeconds","getMilliseconds"],"sources":["D:/Faculty/Spring 2024/SW engineering/project/Expense-Tracker-Application/frontend/node_modules/date-fns/differenceInDays.js"],"sourcesContent":["\"use strict\";\r\nexports.differenceInDays = differenceInDays;\r\nvar _index = require(\"./differenceInCalendarDays.js\");\r\nvar _index2 = require(\"./toDate.js\");\r\n\r\n/**\r\n * @name differenceInDays\r\n * @category Day Helpers\r\n * @summary Get the number of full days between the given dates.\r\n *\r\n * @description\r\n * Get the number of full day periods between two dates. Fractional days are\r\n * truncated towards zero.\r\n *\r\n * One \"full day\" is the distance between a local time in one day to the same\r\n * local time on the next or previous day. A full day can sometimes be less than\r\n * or more than 24 hours if a daylight savings change happens between two dates.\r\n *\r\n * To ignore DST and only measure exact 24-hour periods, use this instead:\r\n * `Math.trunc(differenceInHours(dateLeft, dateRight)/24)|0`.\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n *\r\n * @param dateLeft - The later date\r\n * @param dateRight - The earlier date\r\n *\r\n * @returns The number of full days according to the local timezone\r\n *\r\n * @example\r\n * // How many full days are between\r\n * // 2 July 2011 23:00:00 and 2 July 2012 00:00:00?\r\n * const result = differenceInDays(\r\n *   new Date(2012, 6, 2, 0, 0),\r\n *   new Date(2011, 6, 2, 23, 0)\r\n * )\r\n * //=> 365\r\n *\r\n * @example\r\n * // How many full days are between\r\n * // 2 July 2011 23:59:00 and 3 July 2011 00:01:00?\r\n * const result = differenceInDays(\r\n *   new Date(2011, 6, 3, 0, 1),\r\n *   new Date(2011, 6, 2, 23, 59)\r\n * )\r\n * //=> 0\r\n *\r\n * @example\r\n * // How many full days are between\r\n * // 1 March 2020 0:00 and 1 June 2020 0:00 ?\r\n * // Note: because local time is used, the\r\n * // result will always be 92 days, even in\r\n * // time zones where DST starts and the\r\n * // period has only 92*24-1 hours.\r\n * const result = differenceInDays(\r\n *   new Date(2020, 5, 1),\r\n *   new Date(2020, 2, 1)\r\n * )\r\n * //=> 92\r\n */\r\nfunction differenceInDays(dateLeft, dateRight) {\r\n  const _dateLeft = (0, _index2.toDate)(dateLeft);\r\n  const _dateRight = (0, _index2.toDate)(dateRight);\r\n\r\n  const sign = compareLocalAsc(_dateLeft, _dateRight);\r\n  const difference = Math.abs(\r\n    (0, _index.differenceInCalendarDays)(_dateLeft, _dateRight),\r\n  );\r\n\r\n  _dateLeft.setDate(_dateLeft.getDate() - sign * difference);\r\n\r\n  // Math.abs(diff in full days - diff in calendar days) === 1 if last calendar day is not full\r\n  // If so, result must be decreased by 1 in absolute value\r\n  const isLastDayNotFull = Number(\r\n    compareLocalAsc(_dateLeft, _dateRight) === -sign,\r\n  );\r\n  const result = sign * (difference - isLastDayNotFull);\r\n  // Prevent negative zero\r\n  return result === 0 ? 0 : result;\r\n}\r\n\r\n// Like `compareAsc` but uses local time not UTC, which is needed\r\n// for accurate equality comparisons of UTC timestamps that end up\r\n// having the same representation in local time, e.g. one hour before\r\n// DST ends vs. the instant that DST ends.\r\nfunction compareLocalAsc(dateLeft, dateRight) {\r\n  const diff =\r\n    dateLeft.getFullYear() - dateRight.getFullYear() ||\r\n    dateLeft.getMonth() - dateRight.getMonth() ||\r\n    dateLeft.getDate() - dateRight.getDate() ||\r\n    dateLeft.getHours() - dateRight.getHours() ||\r\n    dateLeft.getMinutes() - dateRight.getMinutes() ||\r\n    dateLeft.getSeconds() - dateRight.getSeconds() ||\r\n    dateLeft.getMilliseconds() - dateRight.getMilliseconds();\r\n\r\n  if (diff < 0) {\r\n    return -1;\r\n  } else if (diff > 0) {\r\n    return 1;\r\n    // Return 0 if diff is 0; return NaN if diff is NaN\r\n  } else {\r\n    return diff;\r\n  }\r\n}\r\n"],"mappings":"AAAA,YAAY;;AACZA,OAAO,CAACC,gBAAgB,GAAGA,gBAAgB;AAC3C,IAAIC,MAAM,GAAGC,OAAO,CAAC,+BAA+B,CAAC;AACrD,IAAIC,OAAO,GAAGD,OAAO,CAAC,aAAa,CAAC;;AAEpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASF,gBAAgBA,CAACI,QAAQ,EAAEC,SAAS,EAAE;EAC7C,MAAMC,SAAS,GAAG,CAAC,CAAC,EAAEH,OAAO,CAACI,MAAM,EAAEH,QAAQ,CAAC;EAC/C,MAAMI,UAAU,GAAG,CAAC,CAAC,EAAEL,OAAO,CAACI,MAAM,EAAEF,SAAS,CAAC;EAEjD,MAAMI,IAAI,GAAGC,eAAe,CAACJ,SAAS,EAAEE,UAAU,CAAC;EACnD,MAAMG,UAAU,GAAGC,IAAI,CAACC,GAAG,CACzB,CAAC,CAAC,EAAEZ,MAAM,CAACa,wBAAwB,EAAER,SAAS,EAAEE,UAAU,CAC5D,CAAC;EAEDF,SAAS,CAACS,OAAO,CAACT,SAAS,CAACU,OAAO,CAAC,CAAC,GAAGP,IAAI,GAAGE,UAAU,CAAC;;EAE1D;EACA;EACA,MAAMM,gBAAgB,GAAGC,MAAM,CAC7BR,eAAe,CAACJ,SAAS,EAAEE,UAAU,CAAC,KAAK,CAACC,IAC9C,CAAC;EACD,MAAMU,MAAM,GAAGV,IAAI,IAAIE,UAAU,GAAGM,gBAAgB,CAAC;EACrD;EACA,OAAOE,MAAM,KAAK,CAAC,GAAG,CAAC,GAAGA,MAAM;AAClC;;AAEA;AACA;AACA;AACA;AACA,SAAST,eAAeA,CAACN,QAAQ,EAAEC,SAAS,EAAE;EAC5C,MAAMe,IAAI,GACRhB,QAAQ,CAACiB,WAAW,CAAC,CAAC,GAAGhB,SAAS,CAACgB,WAAW,CAAC,CAAC,IAChDjB,QAAQ,CAACkB,QAAQ,CAAC,CAAC,GAAGjB,SAAS,CAACiB,QAAQ,CAAC,CAAC,IAC1ClB,QAAQ,CAACY,OAAO,CAAC,CAAC,GAAGX,SAAS,CAACW,OAAO,CAAC,CAAC,IACxCZ,QAAQ,CAACmB,QAAQ,CAAC,CAAC,GAAGlB,SAAS,CAACkB,QAAQ,CAAC,CAAC,IAC1CnB,QAAQ,CAACoB,UAAU,CAAC,CAAC,GAAGnB,SAAS,CAACmB,UAAU,CAAC,CAAC,IAC9CpB,QAAQ,CAACqB,UAAU,CAAC,CAAC,GAAGpB,SAAS,CAACoB,UAAU,CAAC,CAAC,IAC9CrB,QAAQ,CAACsB,eAAe,CAAC,CAAC,GAAGrB,SAAS,CAACqB,eAAe,CAAC,CAAC;EAE1D,IAAIN,IAAI,GAAG,CAAC,EAAE;IACZ,OAAO,CAAC,CAAC;EACX,CAAC,MAAM,IAAIA,IAAI,GAAG,CAAC,EAAE;IACnB,OAAO,CAAC;IACR;EACF,CAAC,MAAM;IACL,OAAOA,IAAI;EACb;AACF","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}