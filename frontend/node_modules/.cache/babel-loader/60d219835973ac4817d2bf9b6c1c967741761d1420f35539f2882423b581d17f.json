{"ast":null,"code":"\"use strict\";\n\nexports.getISOWeek = getISOWeek;\nvar _index = require(\"./constants.js\");\nvar _index2 = require(\"./startOfISOWeek.js\");\nvar _index3 = require(\"./startOfISOWeekYear.js\");\nvar _index4 = require(\"./toDate.js\");\n\n/**\r\n * @name getISOWeek\r\n * @category ISO Week Helpers\r\n * @summary Get the ISO week of the given date.\r\n *\r\n * @description\r\n * Get the ISO week of the given date.\r\n *\r\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n *\r\n * @param date - The given date\r\n *\r\n * @returns The ISO week\r\n *\r\n * @example\r\n * // Which week of the ISO-week numbering year is 2 January 2005?\r\n * const result = getISOWeek(new Date(2005, 0, 2))\r\n * //=> 53\r\n */\nfunction getISOWeek(date) {\n  const _date = (0, _index4.toDate)(date);\n  const diff = +(0, _index2.startOfISOWeek)(_date) - +(0, _index3.startOfISOWeekYear)(_date);\n\n  // Round the number of weeks to the nearest integer because the number of\n  // milliseconds in a week is not constant (e.g. it's different in the week of\n  // the daylight saving time clock shift).\n  return Math.round(diff / _index.millisecondsInWeek) + 1;\n}","map":{"version":3,"names":["exports","getISOWeek","_index","require","_index2","_index3","_index4","date","_date","toDate","diff","startOfISOWeek","startOfISOWeekYear","Math","round","millisecondsInWeek"],"sources":["D:/Faculty/Spring 2024/SW engineering/project/Expense-Tracker-Application/frontend/node_modules/date-fns/getISOWeek.js"],"sourcesContent":["\"use strict\";\r\nexports.getISOWeek = getISOWeek;\r\nvar _index = require(\"./constants.js\");\r\nvar _index2 = require(\"./startOfISOWeek.js\");\r\nvar _index3 = require(\"./startOfISOWeekYear.js\");\r\nvar _index4 = require(\"./toDate.js\");\r\n\r\n/**\r\n * @name getISOWeek\r\n * @category ISO Week Helpers\r\n * @summary Get the ISO week of the given date.\r\n *\r\n * @description\r\n * Get the ISO week of the given date.\r\n *\r\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n *\r\n * @param date - The given date\r\n *\r\n * @returns The ISO week\r\n *\r\n * @example\r\n * // Which week of the ISO-week numbering year is 2 January 2005?\r\n * const result = getISOWeek(new Date(2005, 0, 2))\r\n * //=> 53\r\n */\r\nfunction getISOWeek(date) {\r\n  const _date = (0, _index4.toDate)(date);\r\n  const diff =\r\n    +(0, _index2.startOfISOWeek)(_date) -\r\n    +(0, _index3.startOfISOWeekYear)(_date);\r\n\r\n  // Round the number of weeks to the nearest integer because the number of\r\n  // milliseconds in a week is not constant (e.g. it's different in the week of\r\n  // the daylight saving time clock shift).\r\n  return Math.round(diff / _index.millisecondsInWeek) + 1;\r\n}\r\n"],"mappings":"AAAA,YAAY;;AACZA,OAAO,CAACC,UAAU,GAAGA,UAAU;AAC/B,IAAIC,MAAM,GAAGC,OAAO,CAAC,gBAAgB,CAAC;AACtC,IAAIC,OAAO,GAAGD,OAAO,CAAC,qBAAqB,CAAC;AAC5C,IAAIE,OAAO,GAAGF,OAAO,CAAC,yBAAyB,CAAC;AAChD,IAAIG,OAAO,GAAGH,OAAO,CAAC,aAAa,CAAC;;AAEpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASF,UAAUA,CAACM,IAAI,EAAE;EACxB,MAAMC,KAAK,GAAG,CAAC,CAAC,EAAEF,OAAO,CAACG,MAAM,EAAEF,IAAI,CAAC;EACvC,MAAMG,IAAI,GACR,CAAC,CAAC,CAAC,EAAEN,OAAO,CAACO,cAAc,EAAEH,KAAK,CAAC,GACnC,CAAC,CAAC,CAAC,EAAEH,OAAO,CAACO,kBAAkB,EAAEJ,KAAK,CAAC;;EAEzC;EACA;EACA;EACA,OAAOK,IAAI,CAACC,KAAK,CAACJ,IAAI,GAAGR,MAAM,CAACa,kBAAkB,CAAC,GAAG,CAAC;AACzD","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}