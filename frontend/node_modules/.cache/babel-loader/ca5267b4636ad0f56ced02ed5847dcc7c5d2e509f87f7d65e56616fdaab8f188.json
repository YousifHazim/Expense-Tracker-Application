{"ast":null,"code":"\"use strict\";\n\nexports.isWithinInterval = isWithinInterval;\nvar _index = require(\"./toDate.js\");\n\n/**\r\n * @name isWithinInterval\r\n * @category Interval Helpers\r\n * @summary Is the given date within the interval?\r\n *\r\n * @description\r\n * Is the given date within the interval? (Including start and end.)\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n *\r\n * @param date - The date to check\r\n * @param interval - The interval to check\r\n *\r\n * @returns The date is within the interval\r\n *\r\n * @example\r\n * // For the date within the interval:\r\n * isWithinInterval(new Date(2014, 0, 3), {\r\n *   start: new Date(2014, 0, 1),\r\n *   end: new Date(2014, 0, 7)\r\n * })\r\n * //=> true\r\n *\r\n * @example\r\n * // For the date outside of the interval:\r\n * isWithinInterval(new Date(2014, 0, 10), {\r\n *   start: new Date(2014, 0, 1),\r\n *   end: new Date(2014, 0, 7)\r\n * })\r\n * //=> false\r\n *\r\n * @example\r\n * // For date equal to interval start:\r\n * isWithinInterval(date, { start, end: date })\r\n * // => true\r\n *\r\n * @example\r\n * // For date equal to interval end:\r\n * isWithinInterval(date, { start: date, end })\r\n * // => true\r\n */\nfunction isWithinInterval(date, interval) {\n  const time = +(0, _index.toDate)(date);\n  const [startTime, endTime] = [+(0, _index.toDate)(interval.start), +(0, _index.toDate)(interval.end)].sort((a, b) => a - b);\n  return time >= startTime && time <= endTime;\n}","map":{"version":3,"names":["exports","isWithinInterval","_index","require","date","interval","time","toDate","startTime","endTime","start","end","sort","a","b"],"sources":["D:/Faculty/Spring 2024/SW engineering/project/Expense-Tracker-Application/frontend/node_modules/date-fns/isWithinInterval.js"],"sourcesContent":["\"use strict\";\r\nexports.isWithinInterval = isWithinInterval;\r\nvar _index = require(\"./toDate.js\");\r\n\r\n/**\r\n * @name isWithinInterval\r\n * @category Interval Helpers\r\n * @summary Is the given date within the interval?\r\n *\r\n * @description\r\n * Is the given date within the interval? (Including start and end.)\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n *\r\n * @param date - The date to check\r\n * @param interval - The interval to check\r\n *\r\n * @returns The date is within the interval\r\n *\r\n * @example\r\n * // For the date within the interval:\r\n * isWithinInterval(new Date(2014, 0, 3), {\r\n *   start: new Date(2014, 0, 1),\r\n *   end: new Date(2014, 0, 7)\r\n * })\r\n * //=> true\r\n *\r\n * @example\r\n * // For the date outside of the interval:\r\n * isWithinInterval(new Date(2014, 0, 10), {\r\n *   start: new Date(2014, 0, 1),\r\n *   end: new Date(2014, 0, 7)\r\n * })\r\n * //=> false\r\n *\r\n * @example\r\n * // For date equal to interval start:\r\n * isWithinInterval(date, { start, end: date })\r\n * // => true\r\n *\r\n * @example\r\n * // For date equal to interval end:\r\n * isWithinInterval(date, { start: date, end })\r\n * // => true\r\n */\r\nfunction isWithinInterval(date, interval) {\r\n  const time = +(0, _index.toDate)(date);\r\n  const [startTime, endTime] = [\r\n    +(0, _index.toDate)(interval.start),\r\n    +(0, _index.toDate)(interval.end),\r\n  ].sort((a, b) => a - b);\r\n\r\n  return time >= startTime && time <= endTime;\r\n}\r\n"],"mappings":"AAAA,YAAY;;AACZA,OAAO,CAACC,gBAAgB,GAAGA,gBAAgB;AAC3C,IAAIC,MAAM,GAAGC,OAAO,CAAC,aAAa,CAAC;;AAEnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASF,gBAAgBA,CAACG,IAAI,EAAEC,QAAQ,EAAE;EACxC,MAAMC,IAAI,GAAG,CAAC,CAAC,CAAC,EAAEJ,MAAM,CAACK,MAAM,EAAEH,IAAI,CAAC;EACtC,MAAM,CAACI,SAAS,EAAEC,OAAO,CAAC,GAAG,CAC3B,CAAC,CAAC,CAAC,EAAEP,MAAM,CAACK,MAAM,EAAEF,QAAQ,CAACK,KAAK,CAAC,EACnC,CAAC,CAAC,CAAC,EAAER,MAAM,CAACK,MAAM,EAAEF,QAAQ,CAACM,GAAG,CAAC,CAClC,CAACC,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,GAAGC,CAAC,CAAC;EAEvB,OAAOR,IAAI,IAAIE,SAAS,IAAIF,IAAI,IAAIG,OAAO;AAC7C","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}