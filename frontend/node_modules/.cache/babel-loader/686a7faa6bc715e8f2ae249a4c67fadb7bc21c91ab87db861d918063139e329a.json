{"ast":null,"code":"\"use strict\";\n\nexports.differenceInMonths = differenceInMonths;\nvar _index = require(\"./compareAsc.js\");\nvar _index2 = require(\"./differenceInCalendarMonths.js\");\nvar _index3 = require(\"./isLastDayOfMonth.js\");\nvar _index4 = require(\"./toDate.js\");\n\n/**\r\n * @name differenceInMonths\r\n * @category Month Helpers\r\n * @summary Get the number of full months between the given dates.\r\n *\r\n * @description\r\n * Get the number of full months between the given dates using trunc as a default rounding method.\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n *\r\n * @param dateLeft - The later date\r\n * @param dateRight - The earlier date\r\n *\r\n * @returns The number of full months\r\n *\r\n * @example\r\n * // How many full months are between 31 January 2014 and 1 September 2014?\r\n * const result = differenceInMonths(new Date(2014, 8, 1), new Date(2014, 0, 31))\r\n * //=> 7\r\n */\nfunction differenceInMonths(dateLeft, dateRight) {\n  const _dateLeft = (0, _index4.toDate)(dateLeft);\n  const _dateRight = (0, _index4.toDate)(dateRight);\n  const sign = (0, _index.compareAsc)(_dateLeft, _dateRight);\n  const difference = Math.abs((0, _index2.differenceInCalendarMonths)(_dateLeft, _dateRight));\n  let result;\n\n  // Check for the difference of less than month\n  if (difference < 1) {\n    result = 0;\n  } else {\n    if (_dateLeft.getMonth() === 1 && _dateLeft.getDate() > 27) {\n      // This will check if the date is end of Feb and assign a higher end of month date\n      // to compare it with Jan\n      _dateLeft.setDate(30);\n    }\n    _dateLeft.setMonth(_dateLeft.getMonth() - sign * difference);\n\n    // Math.abs(diff in full months - diff in calendar months) === 1 if last calendar month is not full\n    // If so, result must be decreased by 1 in absolute value\n    let isLastMonthNotFull = (0, _index.compareAsc)(_dateLeft, _dateRight) === -sign;\n\n    // Check for cases of one full calendar month\n    if ((0, _index3.isLastDayOfMonth)((0, _index4.toDate)(dateLeft)) && difference === 1 && (0, _index.compareAsc)(dateLeft, _dateRight) === 1) {\n      isLastMonthNotFull = false;\n    }\n    result = sign * (difference - Number(isLastMonthNotFull));\n  }\n\n  // Prevent negative zero\n  return result === 0 ? 0 : result;\n}","map":{"version":3,"names":["exports","differenceInMonths","_index","require","_index2","_index3","_index4","dateLeft","dateRight","_dateLeft","toDate","_dateRight","sign","compareAsc","difference","Math","abs","differenceInCalendarMonths","result","getMonth","getDate","setDate","setMonth","isLastMonthNotFull","isLastDayOfMonth","Number"],"sources":["D:/Faculty/Spring 2024/SW engineering/project/Expense-Tracker-Application/frontend/node_modules/date-fns/differenceInMonths.js"],"sourcesContent":["\"use strict\";\r\nexports.differenceInMonths = differenceInMonths;\r\nvar _index = require(\"./compareAsc.js\");\r\nvar _index2 = require(\"./differenceInCalendarMonths.js\");\r\nvar _index3 = require(\"./isLastDayOfMonth.js\");\r\nvar _index4 = require(\"./toDate.js\");\r\n\r\n/**\r\n * @name differenceInMonths\r\n * @category Month Helpers\r\n * @summary Get the number of full months between the given dates.\r\n *\r\n * @description\r\n * Get the number of full months between the given dates using trunc as a default rounding method.\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n *\r\n * @param dateLeft - The later date\r\n * @param dateRight - The earlier date\r\n *\r\n * @returns The number of full months\r\n *\r\n * @example\r\n * // How many full months are between 31 January 2014 and 1 September 2014?\r\n * const result = differenceInMonths(new Date(2014, 8, 1), new Date(2014, 0, 31))\r\n * //=> 7\r\n */\r\nfunction differenceInMonths(dateLeft, dateRight) {\r\n  const _dateLeft = (0, _index4.toDate)(dateLeft);\r\n  const _dateRight = (0, _index4.toDate)(dateRight);\r\n\r\n  const sign = (0, _index.compareAsc)(_dateLeft, _dateRight);\r\n  const difference = Math.abs(\r\n    (0, _index2.differenceInCalendarMonths)(_dateLeft, _dateRight),\r\n  );\r\n  let result;\r\n\r\n  // Check for the difference of less than month\r\n  if (difference < 1) {\r\n    result = 0;\r\n  } else {\r\n    if (_dateLeft.getMonth() === 1 && _dateLeft.getDate() > 27) {\r\n      // This will check if the date is end of Feb and assign a higher end of month date\r\n      // to compare it with Jan\r\n      _dateLeft.setDate(30);\r\n    }\r\n\r\n    _dateLeft.setMonth(_dateLeft.getMonth() - sign * difference);\r\n\r\n    // Math.abs(diff in full months - diff in calendar months) === 1 if last calendar month is not full\r\n    // If so, result must be decreased by 1 in absolute value\r\n    let isLastMonthNotFull =\r\n      (0, _index.compareAsc)(_dateLeft, _dateRight) === -sign;\r\n\r\n    // Check for cases of one full calendar month\r\n    if (\r\n      (0, _index3.isLastDayOfMonth)((0, _index4.toDate)(dateLeft)) &&\r\n      difference === 1 &&\r\n      (0, _index.compareAsc)(dateLeft, _dateRight) === 1\r\n    ) {\r\n      isLastMonthNotFull = false;\r\n    }\r\n\r\n    result = sign * (difference - Number(isLastMonthNotFull));\r\n  }\r\n\r\n  // Prevent negative zero\r\n  return result === 0 ? 0 : result;\r\n}\r\n"],"mappings":"AAAA,YAAY;;AACZA,OAAO,CAACC,kBAAkB,GAAGA,kBAAkB;AAC/C,IAAIC,MAAM,GAAGC,OAAO,CAAC,iBAAiB,CAAC;AACvC,IAAIC,OAAO,GAAGD,OAAO,CAAC,iCAAiC,CAAC;AACxD,IAAIE,OAAO,GAAGF,OAAO,CAAC,uBAAuB,CAAC;AAC9C,IAAIG,OAAO,GAAGH,OAAO,CAAC,aAAa,CAAC;;AAEpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASF,kBAAkBA,CAACM,QAAQ,EAAEC,SAAS,EAAE;EAC/C,MAAMC,SAAS,GAAG,CAAC,CAAC,EAAEH,OAAO,CAACI,MAAM,EAAEH,QAAQ,CAAC;EAC/C,MAAMI,UAAU,GAAG,CAAC,CAAC,EAAEL,OAAO,CAACI,MAAM,EAAEF,SAAS,CAAC;EAEjD,MAAMI,IAAI,GAAG,CAAC,CAAC,EAAEV,MAAM,CAACW,UAAU,EAAEJ,SAAS,EAAEE,UAAU,CAAC;EAC1D,MAAMG,UAAU,GAAGC,IAAI,CAACC,GAAG,CACzB,CAAC,CAAC,EAAEZ,OAAO,CAACa,0BAA0B,EAAER,SAAS,EAAEE,UAAU,CAC/D,CAAC;EACD,IAAIO,MAAM;;EAEV;EACA,IAAIJ,UAAU,GAAG,CAAC,EAAE;IAClBI,MAAM,GAAG,CAAC;EACZ,CAAC,MAAM;IACL,IAAIT,SAAS,CAACU,QAAQ,CAAC,CAAC,KAAK,CAAC,IAAIV,SAAS,CAACW,OAAO,CAAC,CAAC,GAAG,EAAE,EAAE;MAC1D;MACA;MACAX,SAAS,CAACY,OAAO,CAAC,EAAE,CAAC;IACvB;IAEAZ,SAAS,CAACa,QAAQ,CAACb,SAAS,CAACU,QAAQ,CAAC,CAAC,GAAGP,IAAI,GAAGE,UAAU,CAAC;;IAE5D;IACA;IACA,IAAIS,kBAAkB,GACpB,CAAC,CAAC,EAAErB,MAAM,CAACW,UAAU,EAAEJ,SAAS,EAAEE,UAAU,CAAC,KAAK,CAACC,IAAI;;IAEzD;IACA,IACE,CAAC,CAAC,EAAEP,OAAO,CAACmB,gBAAgB,EAAE,CAAC,CAAC,EAAElB,OAAO,CAACI,MAAM,EAAEH,QAAQ,CAAC,CAAC,IAC5DO,UAAU,KAAK,CAAC,IAChB,CAAC,CAAC,EAAEZ,MAAM,CAACW,UAAU,EAAEN,QAAQ,EAAEI,UAAU,CAAC,KAAK,CAAC,EAClD;MACAY,kBAAkB,GAAG,KAAK;IAC5B;IAEAL,MAAM,GAAGN,IAAI,IAAIE,UAAU,GAAGW,MAAM,CAACF,kBAAkB,CAAC,CAAC;EAC3D;;EAEA;EACA,OAAOL,MAAM,KAAK,CAAC,GAAG,CAAC,GAAGA,MAAM;AAClC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}