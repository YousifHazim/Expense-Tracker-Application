{"ast":null,"code":"\"use strict\";\n\nexports.getISOWeeksInYear = getISOWeeksInYear;\nvar _index = require(\"./addWeeks.js\");\nvar _index2 = require(\"./constants.js\");\nvar _index3 = require(\"./startOfISOWeekYear.js\");\n\n/**\r\n * @name getISOWeeksInYear\r\n * @category ISO Week-Numbering Year Helpers\r\n * @summary Get the number of weeks in an ISO week-numbering year of the given date.\r\n *\r\n * @description\r\n * Get the number of weeks in an ISO week-numbering year of the given date.\r\n *\r\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n *\r\n * @param date - The given date\r\n *\r\n * @returns The number of ISO weeks in a year\r\n *\r\n * @example\r\n * // How many weeks are in ISO week-numbering year 2015?\r\n * const result = getISOWeeksInYear(new Date(2015, 1, 11))\r\n * //=> 53\r\n */\nfunction getISOWeeksInYear(date) {\n  const thisYear = (0, _index3.startOfISOWeekYear)(date);\n  const nextYear = (0, _index3.startOfISOWeekYear)((0, _index.addWeeks)(thisYear, 60));\n  const diff = +nextYear - +thisYear;\n\n  // Round the number of weeks to the nearest integer because the number of\n  // milliseconds in a week is not constant (e.g. it's different in the week of\n  // the daylight saving time clock shift).\n  return Math.round(diff / _index2.millisecondsInWeek);\n}","map":{"version":3,"names":["exports","getISOWeeksInYear","_index","require","_index2","_index3","date","thisYear","startOfISOWeekYear","nextYear","addWeeks","diff","Math","round","millisecondsInWeek"],"sources":["D:/Faculty/Spring 2024/SW engineering/project/Expense-Tracker-Application/frontend/node_modules/date-fns/getISOWeeksInYear.js"],"sourcesContent":["\"use strict\";\r\nexports.getISOWeeksInYear = getISOWeeksInYear;\r\nvar _index = require(\"./addWeeks.js\");\r\nvar _index2 = require(\"./constants.js\");\r\nvar _index3 = require(\"./startOfISOWeekYear.js\");\r\n\r\n/**\r\n * @name getISOWeeksInYear\r\n * @category ISO Week-Numbering Year Helpers\r\n * @summary Get the number of weeks in an ISO week-numbering year of the given date.\r\n *\r\n * @description\r\n * Get the number of weeks in an ISO week-numbering year of the given date.\r\n *\r\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n *\r\n * @param date - The given date\r\n *\r\n * @returns The number of ISO weeks in a year\r\n *\r\n * @example\r\n * // How many weeks are in ISO week-numbering year 2015?\r\n * const result = getISOWeeksInYear(new Date(2015, 1, 11))\r\n * //=> 53\r\n */\r\nfunction getISOWeeksInYear(date) {\r\n  const thisYear = (0, _index3.startOfISOWeekYear)(date);\r\n  const nextYear = (0, _index3.startOfISOWeekYear)(\r\n    (0, _index.addWeeks)(thisYear, 60),\r\n  );\r\n  const diff = +nextYear - +thisYear;\r\n\r\n  // Round the number of weeks to the nearest integer because the number of\r\n  // milliseconds in a week is not constant (e.g. it's different in the week of\r\n  // the daylight saving time clock shift).\r\n  return Math.round(diff / _index2.millisecondsInWeek);\r\n}\r\n"],"mappings":"AAAA,YAAY;;AACZA,OAAO,CAACC,iBAAiB,GAAGA,iBAAiB;AAC7C,IAAIC,MAAM,GAAGC,OAAO,CAAC,eAAe,CAAC;AACrC,IAAIC,OAAO,GAAGD,OAAO,CAAC,gBAAgB,CAAC;AACvC,IAAIE,OAAO,GAAGF,OAAO,CAAC,yBAAyB,CAAC;;AAEhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASF,iBAAiBA,CAACK,IAAI,EAAE;EAC/B,MAAMC,QAAQ,GAAG,CAAC,CAAC,EAAEF,OAAO,CAACG,kBAAkB,EAAEF,IAAI,CAAC;EACtD,MAAMG,QAAQ,GAAG,CAAC,CAAC,EAAEJ,OAAO,CAACG,kBAAkB,EAC7C,CAAC,CAAC,EAAEN,MAAM,CAACQ,QAAQ,EAAEH,QAAQ,EAAE,EAAE,CACnC,CAAC;EACD,MAAMI,IAAI,GAAG,CAACF,QAAQ,GAAG,CAACF,QAAQ;;EAElC;EACA;EACA;EACA,OAAOK,IAAI,CAACC,KAAK,CAACF,IAAI,GAAGP,OAAO,CAACU,kBAAkB,CAAC;AACtD","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}