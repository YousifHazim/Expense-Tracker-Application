{"ast":null,"code":"\"use strict\";\n\nexports.eachWeekOfInterval = eachWeekOfInterval;\nvar _index = require(\"./addWeeks.js\");\nvar _index2 = require(\"./startOfWeek.js\");\nvar _index3 = require(\"./toDate.js\");\n\n/**\r\n * The {@link eachWeekOfInterval} function options.\r\n */\n\n/**\r\n * @name eachWeekOfInterval\r\n * @category Interval Helpers\r\n * @summary Return the array of weeks within the specified time interval.\r\n *\r\n * @description\r\n * Return the array of weeks within the specified time interval.\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n *\r\n * @param interval - The interval.\r\n * @param options - An object with options.\r\n *\r\n * @returns The array with starts of weeks from the week of the interval start to the week of the interval end\r\n *\r\n * @example\r\n * // Each week within interval 6 October 2014 - 23 November 2014:\r\n * const result = eachWeekOfInterval({\r\n *   start: new Date(2014, 9, 6),\r\n *   end: new Date(2014, 10, 23)\r\n * })\r\n * //=> [\r\n * //   Sun Oct 05 2014 00:00:00,\r\n * //   Sun Oct 12 2014 00:00:00,\r\n * //   Sun Oct 19 2014 00:00:00,\r\n * //   Sun Oct 26 2014 00:00:00,\r\n * //   Sun Nov 02 2014 00:00:00,\r\n * //   Sun Nov 09 2014 00:00:00,\r\n * //   Sun Nov 16 2014 00:00:00,\r\n * //   Sun Nov 23 2014 00:00:00\r\n * // ]\r\n */\nfunction eachWeekOfInterval(interval, options) {\n  const startDate = (0, _index3.toDate)(interval.start);\n  const endDate = (0, _index3.toDate)(interval.end);\n  let reversed = +startDate > +endDate;\n  const startDateWeek = reversed ? (0, _index2.startOfWeek)(endDate, options) : (0, _index2.startOfWeek)(startDate, options);\n  const endDateWeek = reversed ? (0, _index2.startOfWeek)(startDate, options) : (0, _index2.startOfWeek)(endDate, options);\n\n  // Some timezones switch DST at midnight, making start of day unreliable in these timezones, 3pm is a safe bet\n  startDateWeek.setHours(15);\n  endDateWeek.setHours(15);\n  const endTime = +endDateWeek.getTime();\n  let currentDate = startDateWeek;\n  let step = options?.step ?? 1;\n  if (!step) return [];\n  if (step < 0) {\n    step = -step;\n    reversed = !reversed;\n  }\n  const dates = [];\n  while (+currentDate <= endTime) {\n    currentDate.setHours(0);\n    dates.push((0, _index3.toDate)(currentDate));\n    currentDate = (0, _index.addWeeks)(currentDate, step);\n    currentDate.setHours(15);\n  }\n  return reversed ? dates.reverse() : dates;\n}","map":{"version":3,"names":["exports","eachWeekOfInterval","_index","require","_index2","_index3","interval","options","startDate","toDate","start","endDate","end","reversed","startDateWeek","startOfWeek","endDateWeek","setHours","endTime","getTime","currentDate","step","dates","push","addWeeks","reverse"],"sources":["D:/Faculty/Spring 2024/SW engineering/project/Expense-Tracker-Application/frontend/node_modules/date-fns/eachWeekOfInterval.js"],"sourcesContent":["\"use strict\";\r\nexports.eachWeekOfInterval = eachWeekOfInterval;\r\nvar _index = require(\"./addWeeks.js\");\r\nvar _index2 = require(\"./startOfWeek.js\");\r\nvar _index3 = require(\"./toDate.js\");\r\n\r\n/**\r\n * The {@link eachWeekOfInterval} function options.\r\n */\r\n\r\n/**\r\n * @name eachWeekOfInterval\r\n * @category Interval Helpers\r\n * @summary Return the array of weeks within the specified time interval.\r\n *\r\n * @description\r\n * Return the array of weeks within the specified time interval.\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n *\r\n * @param interval - The interval.\r\n * @param options - An object with options.\r\n *\r\n * @returns The array with starts of weeks from the week of the interval start to the week of the interval end\r\n *\r\n * @example\r\n * // Each week within interval 6 October 2014 - 23 November 2014:\r\n * const result = eachWeekOfInterval({\r\n *   start: new Date(2014, 9, 6),\r\n *   end: new Date(2014, 10, 23)\r\n * })\r\n * //=> [\r\n * //   Sun Oct 05 2014 00:00:00,\r\n * //   Sun Oct 12 2014 00:00:00,\r\n * //   Sun Oct 19 2014 00:00:00,\r\n * //   Sun Oct 26 2014 00:00:00,\r\n * //   Sun Nov 02 2014 00:00:00,\r\n * //   Sun Nov 09 2014 00:00:00,\r\n * //   Sun Nov 16 2014 00:00:00,\r\n * //   Sun Nov 23 2014 00:00:00\r\n * // ]\r\n */\r\nfunction eachWeekOfInterval(interval, options) {\r\n  const startDate = (0, _index3.toDate)(interval.start);\r\n  const endDate = (0, _index3.toDate)(interval.end);\r\n\r\n  let reversed = +startDate > +endDate;\r\n  const startDateWeek = reversed\r\n    ? (0, _index2.startOfWeek)(endDate, options)\r\n    : (0, _index2.startOfWeek)(startDate, options);\r\n  const endDateWeek = reversed\r\n    ? (0, _index2.startOfWeek)(startDate, options)\r\n    : (0, _index2.startOfWeek)(endDate, options);\r\n\r\n  // Some timezones switch DST at midnight, making start of day unreliable in these timezones, 3pm is a safe bet\r\n  startDateWeek.setHours(15);\r\n  endDateWeek.setHours(15);\r\n\r\n  const endTime = +endDateWeek.getTime();\r\n  let currentDate = startDateWeek;\r\n\r\n  let step = options?.step ?? 1;\r\n  if (!step) return [];\r\n  if (step < 0) {\r\n    step = -step;\r\n    reversed = !reversed;\r\n  }\r\n\r\n  const dates = [];\r\n\r\n  while (+currentDate <= endTime) {\r\n    currentDate.setHours(0);\r\n    dates.push((0, _index3.toDate)(currentDate));\r\n    currentDate = (0, _index.addWeeks)(currentDate, step);\r\n    currentDate.setHours(15);\r\n  }\r\n\r\n  return reversed ? dates.reverse() : dates;\r\n}\r\n"],"mappings":"AAAA,YAAY;;AACZA,OAAO,CAACC,kBAAkB,GAAGA,kBAAkB;AAC/C,IAAIC,MAAM,GAAGC,OAAO,CAAC,eAAe,CAAC;AACrC,IAAIC,OAAO,GAAGD,OAAO,CAAC,kBAAkB,CAAC;AACzC,IAAIE,OAAO,GAAGF,OAAO,CAAC,aAAa,CAAC;;AAEpC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASF,kBAAkBA,CAACK,QAAQ,EAAEC,OAAO,EAAE;EAC7C,MAAMC,SAAS,GAAG,CAAC,CAAC,EAAEH,OAAO,CAACI,MAAM,EAAEH,QAAQ,CAACI,KAAK,CAAC;EACrD,MAAMC,OAAO,GAAG,CAAC,CAAC,EAAEN,OAAO,CAACI,MAAM,EAAEH,QAAQ,CAACM,GAAG,CAAC;EAEjD,IAAIC,QAAQ,GAAG,CAACL,SAAS,GAAG,CAACG,OAAO;EACpC,MAAMG,aAAa,GAAGD,QAAQ,GAC1B,CAAC,CAAC,EAAET,OAAO,CAACW,WAAW,EAAEJ,OAAO,EAAEJ,OAAO,CAAC,GAC1C,CAAC,CAAC,EAAEH,OAAO,CAACW,WAAW,EAAEP,SAAS,EAAED,OAAO,CAAC;EAChD,MAAMS,WAAW,GAAGH,QAAQ,GACxB,CAAC,CAAC,EAAET,OAAO,CAACW,WAAW,EAAEP,SAAS,EAAED,OAAO,CAAC,GAC5C,CAAC,CAAC,EAAEH,OAAO,CAACW,WAAW,EAAEJ,OAAO,EAAEJ,OAAO,CAAC;;EAE9C;EACAO,aAAa,CAACG,QAAQ,CAAC,EAAE,CAAC;EAC1BD,WAAW,CAACC,QAAQ,CAAC,EAAE,CAAC;EAExB,MAAMC,OAAO,GAAG,CAACF,WAAW,CAACG,OAAO,CAAC,CAAC;EACtC,IAAIC,WAAW,GAAGN,aAAa;EAE/B,IAAIO,IAAI,GAAGd,OAAO,EAAEc,IAAI,IAAI,CAAC;EAC7B,IAAI,CAACA,IAAI,EAAE,OAAO,EAAE;EACpB,IAAIA,IAAI,GAAG,CAAC,EAAE;IACZA,IAAI,GAAG,CAACA,IAAI;IACZR,QAAQ,GAAG,CAACA,QAAQ;EACtB;EAEA,MAAMS,KAAK,GAAG,EAAE;EAEhB,OAAO,CAACF,WAAW,IAAIF,OAAO,EAAE;IAC9BE,WAAW,CAACH,QAAQ,CAAC,CAAC,CAAC;IACvBK,KAAK,CAACC,IAAI,CAAC,CAAC,CAAC,EAAElB,OAAO,CAACI,MAAM,EAAEW,WAAW,CAAC,CAAC;IAC5CA,WAAW,GAAG,CAAC,CAAC,EAAElB,MAAM,CAACsB,QAAQ,EAAEJ,WAAW,EAAEC,IAAI,CAAC;IACrDD,WAAW,CAACH,QAAQ,CAAC,EAAE,CAAC;EAC1B;EAEA,OAAOJ,QAAQ,GAAGS,KAAK,CAACG,OAAO,CAAC,CAAC,GAAGH,KAAK;AAC3C","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}