{"ast":null,"code":"\"use strict\";\n\nexports.setYear = setYear;\nvar _index = require(\"./constructFrom.js\");\nvar _index2 = require(\"./toDate.js\");\n\n/**\r\n * @name setYear\r\n * @category Year Helpers\r\n * @summary Set the year to the given date.\r\n *\r\n * @description\r\n * Set the year to the given date.\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n *\r\n * @param date - The date to be changed\r\n * @param year - The year of the new date\r\n *\r\n * @returns The new date with the year set\r\n *\r\n * @example\r\n * // Set year 2013 to 1 September 2014:\r\n * const result = setYear(new Date(2014, 8, 1), 2013)\r\n * //=> Sun Sep 01 2013 00:00:00\r\n */\nfunction setYear(date, year) {\n  const _date = (0, _index2.toDate)(date);\n\n  // Check if date is Invalid Date because Date.prototype.setFullYear ignores the value of Invalid Date\n  if (isNaN(+_date)) {\n    return (0, _index.constructFrom)(date, NaN);\n  }\n  _date.setFullYear(year);\n  return _date;\n}","map":{"version":3,"names":["exports","setYear","_index","require","_index2","date","year","_date","toDate","isNaN","constructFrom","NaN","setFullYear"],"sources":["D:/Faculty/Spring 2024/SW engineering/project/Expense-Tracker-Application/frontend/node_modules/date-fns/setYear.js"],"sourcesContent":["\"use strict\";\r\nexports.setYear = setYear;\r\nvar _index = require(\"./constructFrom.js\");\r\nvar _index2 = require(\"./toDate.js\");\r\n\r\n/**\r\n * @name setYear\r\n * @category Year Helpers\r\n * @summary Set the year to the given date.\r\n *\r\n * @description\r\n * Set the year to the given date.\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n *\r\n * @param date - The date to be changed\r\n * @param year - The year of the new date\r\n *\r\n * @returns The new date with the year set\r\n *\r\n * @example\r\n * // Set year 2013 to 1 September 2014:\r\n * const result = setYear(new Date(2014, 8, 1), 2013)\r\n * //=> Sun Sep 01 2013 00:00:00\r\n */\r\nfunction setYear(date, year) {\r\n  const _date = (0, _index2.toDate)(date);\r\n\r\n  // Check if date is Invalid Date because Date.prototype.setFullYear ignores the value of Invalid Date\r\n  if (isNaN(+_date)) {\r\n    return (0, _index.constructFrom)(date, NaN);\r\n  }\r\n\r\n  _date.setFullYear(year);\r\n  return _date;\r\n}\r\n"],"mappings":"AAAA,YAAY;;AACZA,OAAO,CAACC,OAAO,GAAGA,OAAO;AACzB,IAAIC,MAAM,GAAGC,OAAO,CAAC,oBAAoB,CAAC;AAC1C,IAAIC,OAAO,GAAGD,OAAO,CAAC,aAAa,CAAC;;AAEpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASF,OAAOA,CAACI,IAAI,EAAEC,IAAI,EAAE;EAC3B,MAAMC,KAAK,GAAG,CAAC,CAAC,EAAEH,OAAO,CAACI,MAAM,EAAEH,IAAI,CAAC;;EAEvC;EACA,IAAII,KAAK,CAAC,CAACF,KAAK,CAAC,EAAE;IACjB,OAAO,CAAC,CAAC,EAAEL,MAAM,CAACQ,aAAa,EAAEL,IAAI,EAAEM,GAAG,CAAC;EAC7C;EAEAJ,KAAK,CAACK,WAAW,CAACN,IAAI,CAAC;EACvB,OAAOC,KAAK;AACd","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}