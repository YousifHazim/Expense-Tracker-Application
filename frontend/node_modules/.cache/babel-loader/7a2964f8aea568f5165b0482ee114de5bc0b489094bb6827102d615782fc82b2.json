{"ast":null,"code":"\"use strict\";\n\nexports.QuarterParser = void 0;\nvar _Parser = require(\"../Parser.js\");\nvar _utils = require(\"../utils.js\");\nclass QuarterParser extends _Parser.Parser {\n  priority = 120;\n  parse(dateString, token, match) {\n    switch (token) {\n      // 1, 2, 3, 4\n      case \"Q\":\n      case \"QQ\":\n        // 01, 02, 03, 04\n        return (0, _utils.parseNDigits)(token.length, dateString);\n      // 1st, 2nd, 3rd, 4th\n      case \"Qo\":\n        return match.ordinalNumber(dateString, {\n          unit: \"quarter\"\n        });\n      // Q1, Q2, Q3, Q4\n      case \"QQQ\":\n        return match.quarter(dateString, {\n          width: \"abbreviated\",\n          context: \"formatting\"\n        }) || match.quarter(dateString, {\n          width: \"narrow\",\n          context: \"formatting\"\n        });\n\n      // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n      case \"QQQQQ\":\n        return match.quarter(dateString, {\n          width: \"narrow\",\n          context: \"formatting\"\n        });\n      // 1st quarter, 2nd quarter, ...\n      case \"QQQQ\":\n      default:\n        return match.quarter(dateString, {\n          width: \"wide\",\n          context: \"formatting\"\n        }) || match.quarter(dateString, {\n          width: \"abbreviated\",\n          context: \"formatting\"\n        }) || match.quarter(dateString, {\n          width: \"narrow\",\n          context: \"formatting\"\n        });\n    }\n  }\n  validate(_date, value) {\n    return value >= 1 && value <= 4;\n  }\n  set(date, _flags, value) {\n    date.setMonth((value - 1) * 3, 1);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n  incompatibleTokens = [\"Y\", \"R\", \"q\", \"M\", \"L\", \"w\", \"I\", \"d\", \"D\", \"i\", \"e\", \"c\", \"t\", \"T\"];\n}\nexports.QuarterParser = QuarterParser;","map":{"version":3,"names":["exports","QuarterParser","_Parser","require","_utils","Parser","priority","parse","dateString","token","match","parseNDigits","length","ordinalNumber","unit","quarter","width","context","validate","_date","value","set","date","_flags","setMonth","setHours","incompatibleTokens"],"sources":["D:/Faculty/Spring 2024/SW engineering/project/Expense-Tracker-Application/frontend/node_modules/date-fns/parse/_lib/parsers/QuarterParser.js"],"sourcesContent":["\"use strict\";\r\nexports.QuarterParser = void 0;\r\nvar _Parser = require(\"../Parser.js\");\r\n\r\nvar _utils = require(\"../utils.js\");\r\n\r\nclass QuarterParser extends _Parser.Parser {\r\n  priority = 120;\r\n\r\n  parse(dateString, token, match) {\r\n    switch (token) {\r\n      // 1, 2, 3, 4\r\n      case \"Q\":\r\n      case \"QQ\": // 01, 02, 03, 04\r\n        return (0, _utils.parseNDigits)(token.length, dateString);\r\n      // 1st, 2nd, 3rd, 4th\r\n      case \"Qo\":\r\n        return match.ordinalNumber(dateString, { unit: \"quarter\" });\r\n      // Q1, Q2, Q3, Q4\r\n      case \"QQQ\":\r\n        return (\r\n          match.quarter(dateString, {\r\n            width: \"abbreviated\",\r\n            context: \"formatting\",\r\n          }) ||\r\n          match.quarter(dateString, {\r\n            width: \"narrow\",\r\n            context: \"formatting\",\r\n          })\r\n        );\r\n\r\n      // 1, 2, 3, 4 (narrow quarter; could be not numerical)\r\n      case \"QQQQQ\":\r\n        return match.quarter(dateString, {\r\n          width: \"narrow\",\r\n          context: \"formatting\",\r\n        });\r\n      // 1st quarter, 2nd quarter, ...\r\n      case \"QQQQ\":\r\n      default:\r\n        return (\r\n          match.quarter(dateString, {\r\n            width: \"wide\",\r\n            context: \"formatting\",\r\n          }) ||\r\n          match.quarter(dateString, {\r\n            width: \"abbreviated\",\r\n            context: \"formatting\",\r\n          }) ||\r\n          match.quarter(dateString, {\r\n            width: \"narrow\",\r\n            context: \"formatting\",\r\n          })\r\n        );\r\n    }\r\n  }\r\n\r\n  validate(_date, value) {\r\n    return value >= 1 && value <= 4;\r\n  }\r\n\r\n  set(date, _flags, value) {\r\n    date.setMonth((value - 1) * 3, 1);\r\n    date.setHours(0, 0, 0, 0);\r\n    return date;\r\n  }\r\n\r\n  incompatibleTokens = [\r\n    \"Y\",\r\n    \"R\",\r\n    \"q\",\r\n    \"M\",\r\n    \"L\",\r\n    \"w\",\r\n    \"I\",\r\n    \"d\",\r\n    \"D\",\r\n    \"i\",\r\n    \"e\",\r\n    \"c\",\r\n    \"t\",\r\n    \"T\",\r\n  ];\r\n}\r\nexports.QuarterParser = QuarterParser;\r\n"],"mappings":"AAAA,YAAY;;AACZA,OAAO,CAACC,aAAa,GAAG,KAAK,CAAC;AAC9B,IAAIC,OAAO,GAAGC,OAAO,CAAC,cAAc,CAAC;AAErC,IAAIC,MAAM,GAAGD,OAAO,CAAC,aAAa,CAAC;AAEnC,MAAMF,aAAa,SAASC,OAAO,CAACG,MAAM,CAAC;EACzCC,QAAQ,GAAG,GAAG;EAEdC,KAAKA,CAACC,UAAU,EAAEC,KAAK,EAAEC,KAAK,EAAE;IAC9B,QAAQD,KAAK;MACX;MACA,KAAK,GAAG;MACR,KAAK,IAAI;QAAE;QACT,OAAO,CAAC,CAAC,EAAEL,MAAM,CAACO,YAAY,EAAEF,KAAK,CAACG,MAAM,EAAEJ,UAAU,CAAC;MAC3D;MACA,KAAK,IAAI;QACP,OAAOE,KAAK,CAACG,aAAa,CAACL,UAAU,EAAE;UAAEM,IAAI,EAAE;QAAU,CAAC,CAAC;MAC7D;MACA,KAAK,KAAK;QACR,OACEJ,KAAK,CAACK,OAAO,CAACP,UAAU,EAAE;UACxBQ,KAAK,EAAE,aAAa;UACpBC,OAAO,EAAE;QACX,CAAC,CAAC,IACFP,KAAK,CAACK,OAAO,CAACP,UAAU,EAAE;UACxBQ,KAAK,EAAE,QAAQ;UACfC,OAAO,EAAE;QACX,CAAC,CAAC;;MAGN;MACA,KAAK,OAAO;QACV,OAAOP,KAAK,CAACK,OAAO,CAACP,UAAU,EAAE;UAC/BQ,KAAK,EAAE,QAAQ;UACfC,OAAO,EAAE;QACX,CAAC,CAAC;MACJ;MACA,KAAK,MAAM;MACX;QACE,OACEP,KAAK,CAACK,OAAO,CAACP,UAAU,EAAE;UACxBQ,KAAK,EAAE,MAAM;UACbC,OAAO,EAAE;QACX,CAAC,CAAC,IACFP,KAAK,CAACK,OAAO,CAACP,UAAU,EAAE;UACxBQ,KAAK,EAAE,aAAa;UACpBC,OAAO,EAAE;QACX,CAAC,CAAC,IACFP,KAAK,CAACK,OAAO,CAACP,UAAU,EAAE;UACxBQ,KAAK,EAAE,QAAQ;UACfC,OAAO,EAAE;QACX,CAAC,CAAC;IAER;EACF;EAEAC,QAAQA,CAACC,KAAK,EAAEC,KAAK,EAAE;IACrB,OAAOA,KAAK,IAAI,CAAC,IAAIA,KAAK,IAAI,CAAC;EACjC;EAEAC,GAAGA,CAACC,IAAI,EAAEC,MAAM,EAAEH,KAAK,EAAE;IACvBE,IAAI,CAACE,QAAQ,CAAC,CAACJ,KAAK,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;IACjCE,IAAI,CAACG,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;IACzB,OAAOH,IAAI;EACb;EAEAI,kBAAkB,GAAG,CACnB,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,CACJ;AACH;AACA1B,OAAO,CAACC,aAAa,GAAGA,aAAa","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}