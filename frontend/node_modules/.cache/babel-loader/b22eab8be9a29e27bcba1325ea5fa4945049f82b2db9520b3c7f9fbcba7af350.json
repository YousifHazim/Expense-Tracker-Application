{"ast":null,"code":"\"use strict\";\n\nexports.formatDistance = formatDistance;\nvar _index = require(\"./compareAsc.js\");\nvar _index2 = require(\"./constants.js\");\nvar _index3 = require(\"./differenceInMonths.js\");\nvar _index4 = require(\"./differenceInSeconds.js\");\nvar _index5 = require(\"./toDate.js\");\nvar _index6 = require(\"./_lib/defaultLocale.js\");\nvar _index7 = require(\"./_lib/defaultOptions.js\");\nvar _index8 = require(\"./_lib/getTimezoneOffsetInMilliseconds.js\");\n\n/**\n * The {@link formatDistance} function options.\n */\n\n/**\n * @name formatDistance\n * @category Common Helpers\n * @summary Return the distance between the given dates in words.\n *\n * @description\n * Return the distance between the given dates in words.\n *\n * | Distance between dates                                            | Result              |\n * |-------------------------------------------------------------------|---------------------|\n * | 0 ... 30 secs                                                     | less than a minute  |\n * | 30 secs ... 1 min 30 secs                                         | 1 minute            |\n * | 1 min 30 secs ... 44 mins 30 secs                                 | [2..44] minutes     |\n * | 44 mins ... 30 secs ... 89 mins 30 secs                           | about 1 hour        |\n * | 89 mins 30 secs ... 23 hrs 59 mins 30 secs                        | about [2..24] hours |\n * | 23 hrs 59 mins 30 secs ... 41 hrs 59 mins 30 secs                 | 1 day               |\n * | 41 hrs 59 mins 30 secs ... 29 days 23 hrs 59 mins 30 secs         | [2..30] days        |\n * | 29 days 23 hrs 59 mins 30 secs ... 44 days 23 hrs 59 mins 30 secs | about 1 month       |\n * | 44 days 23 hrs 59 mins 30 secs ... 59 days 23 hrs 59 mins 30 secs | about 2 months      |\n * | 59 days 23 hrs 59 mins 30 secs ... 1 yr                           | [2..12] months      |\n * | 1 yr ... 1 yr 3 months                                            | about 1 year        |\n * | 1 yr 3 months ... 1 yr 9 month s                                  | over 1 year         |\n * | 1 yr 9 months ... 2 yrs                                           | almost 2 years      |\n * | N yrs ... N yrs 3 months                                          | about N years       |\n * | N yrs 3 months ... N yrs 9 months                                 | over N years        |\n * | N yrs 9 months ... N+1 yrs                                        | almost N+1 years    |\n *\n * With `options.includeSeconds == true`:\n * | Distance between dates | Result               |\n * |------------------------|----------------------|\n * | 0 secs ... 5 secs      | less than 5 seconds  |\n * | 5 secs ... 10 secs     | less than 10 seconds |\n * | 10 secs ... 20 secs    | less than 20 seconds |\n * | 20 secs ... 40 secs    | half a minute        |\n * | 40 secs ... 60 secs    | less than a minute   |\n * | 60 secs ... 90 secs    | 1 minute             |\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The date\n * @param baseDate - The date to compare with\n * @param options - An object with options\n *\n * @returns The distance in words\n *\n * @throws `date` must not be Invalid Date\n * @throws `baseDate` must not be Invalid Date\n * @throws `options.locale` must contain `formatDistance` property\n *\n * @example\n * // What is the distance between 2 July 2014 and 1 January 2015?\n * const result = formatDistance(new Date(2014, 6, 2), new Date(2015, 0, 1))\n * //=> '6 months'\n *\n * @example\n * // What is the distance between 1 January 2015 00:00:15\n * // and 1 January 2015 00:00:00, including seconds?\n * const result = formatDistance(\n *   new Date(2015, 0, 1, 0, 0, 15),\n *   new Date(2015, 0, 1, 0, 0, 0),\n *   { includeSeconds: true }\n * )\n * //=> 'less than 20 seconds'\n *\n * @example\n * // What is the distance from 1 January 2016\n * // to 1 January 2015, with a suffix?\n * const result = formatDistance(new Date(2015, 0, 1), new Date(2016, 0, 1), {\n *   addSuffix: true\n * })\n * //=> 'about 1 year ago'\n *\n * @example\n * // What is the distance between 1 August 2016 and 1 January 2015 in Esperanto?\n * import { eoLocale } from 'date-fns/locale/eo'\n * const result = formatDistance(new Date(2016, 7, 1), new Date(2015, 0, 1), {\n *   locale: eoLocale\n * })\n * //=> 'pli ol 1 jaro'\n */\n\nfunction formatDistance(date, baseDate, options) {\n  var _ref, _options$locale;\n  const defaultOptions = (0, _index7.getDefaultOptions)();\n  const locale = (_ref = (_options$locale = options === null || options === void 0 ? void 0 : options.locale) !== null && _options$locale !== void 0 ? _options$locale : defaultOptions.locale) !== null && _ref !== void 0 ? _ref : _index6.defaultLocale;\n  const minutesInAlmostTwoDays = 2520;\n  const comparison = (0, _index.compareAsc)(date, baseDate);\n  if (isNaN(comparison)) {\n    throw new RangeError(\"Invalid time value\");\n  }\n  const localizeOptions = Object.assign({}, options, {\n    addSuffix: options === null || options === void 0 ? void 0 : options.addSuffix,\n    comparison: comparison\n  });\n  let dateLeft;\n  let dateRight;\n  if (comparison > 0) {\n    dateLeft = (0, _index5.toDate)(baseDate);\n    dateRight = (0, _index5.toDate)(date);\n  } else {\n    dateLeft = (0, _index5.toDate)(date);\n    dateRight = (0, _index5.toDate)(baseDate);\n  }\n  const seconds = (0, _index4.differenceInSeconds)(dateRight, dateLeft);\n  const offsetInSeconds = ((0, _index8.getTimezoneOffsetInMilliseconds)(dateRight) - (0, _index8.getTimezoneOffsetInMilliseconds)(dateLeft)) / 1000;\n  const minutes = Math.round((seconds - offsetInSeconds) / 60);\n  let months;\n\n  // 0 up to 2 mins\n  if (minutes < 2) {\n    if (options !== null && options !== void 0 && options.includeSeconds) {\n      if (seconds < 5) {\n        return locale.formatDistance(\"lessThanXSeconds\", 5, localizeOptions);\n      } else if (seconds < 10) {\n        return locale.formatDistance(\"lessThanXSeconds\", 10, localizeOptions);\n      } else if (seconds < 20) {\n        return locale.formatDistance(\"lessThanXSeconds\", 20, localizeOptions);\n      } else if (seconds < 40) {\n        return locale.formatDistance(\"halfAMinute\", 0, localizeOptions);\n      } else if (seconds < 60) {\n        return locale.formatDistance(\"lessThanXMinutes\", 1, localizeOptions);\n      } else {\n        return locale.formatDistance(\"xMinutes\", 1, localizeOptions);\n      }\n    } else {\n      if (minutes === 0) {\n        return locale.formatDistance(\"lessThanXMinutes\", 1, localizeOptions);\n      } else {\n        return locale.formatDistance(\"xMinutes\", minutes, localizeOptions);\n      }\n    }\n\n    // 2 mins up to 0.75 hrs\n  } else if (minutes < 45) {\n    return locale.formatDistance(\"xMinutes\", minutes, localizeOptions);\n\n    // 0.75 hrs up to 1.5 hrs\n  } else if (minutes < 90) {\n    return locale.formatDistance(\"aboutXHours\", 1, localizeOptions);\n\n    // 1.5 hrs up to 24 hrs\n  } else if (minutes < _index2.minutesInDay) {\n    const hours = Math.round(minutes / 60);\n    return locale.formatDistance(\"aboutXHours\", hours, localizeOptions);\n\n    // 1 day up to 1.75 days\n  } else if (minutes < minutesInAlmostTwoDays) {\n    return locale.formatDistance(\"xDays\", 1, localizeOptions);\n\n    // 1.75 days up to 30 days\n  } else if (minutes < _index2.minutesInMonth) {\n    const days = Math.round(minutes / _index2.minutesInDay);\n    return locale.formatDistance(\"xDays\", days, localizeOptions);\n\n    // 1 month up to 2 months\n  } else if (minutes < _index2.minutesInMonth * 2) {\n    months = Math.round(minutes / _index2.minutesInMonth);\n    return locale.formatDistance(\"aboutXMonths\", months, localizeOptions);\n  }\n  months = (0, _index3.differenceInMonths)(dateRight, dateLeft);\n\n  // 2 months up to 12 months\n  if (months < 12) {\n    const nearestMonth = Math.round(minutes / _index2.minutesInMonth);\n    return locale.formatDistance(\"xMonths\", nearestMonth, localizeOptions);\n\n    // 1 year up to max Date\n  } else {\n    const monthsSinceStartOfYear = months % 12;\n    const years = Math.trunc(months / 12);\n\n    // N years up to 1 years 3 months\n    if (monthsSinceStartOfYear < 3) {\n      return locale.formatDistance(\"aboutXYears\", years, localizeOptions);\n\n      // N years 3 months up to N years 9 months\n    } else if (monthsSinceStartOfYear < 9) {\n      return locale.formatDistance(\"overXYears\", years, localizeOptions);\n\n      // N years 9 months up to N year 12 months\n    } else {\n      return locale.formatDistance(\"almostXYears\", years + 1, localizeOptions);\n    }\n  }\n}","map":{"version":3,"names":["exports","formatDistance","_index","require","_index2","_index3","_index4","_index5","_index6","_index7","_index8","date","baseDate","options","_ref","_options$locale","defaultOptions","getDefaultOptions","locale","defaultLocale","minutesInAlmostTwoDays","comparison","compareAsc","isNaN","RangeError","localizeOptions","Object","assign","addSuffix","dateLeft","dateRight","toDate","seconds","differenceInSeconds","offsetInSeconds","getTimezoneOffsetInMilliseconds","minutes","Math","round","months","includeSeconds","minutesInDay","hours","minutesInMonth","days","differenceInMonths","nearestMonth","monthsSinceStartOfYear","years","trunc"],"sources":["C:/Users/mh_sm/Dropbox/PC/Desktop/computer/SENIOR-1/Spring/SW/Project/EXPENSE-TRACKER/frontend/node_modules/date-fns/formatDistance.js"],"sourcesContent":["\"use strict\";\nexports.formatDistance = formatDistance;\nvar _index = require(\"./compareAsc.js\");\nvar _index2 = require(\"./constants.js\");\nvar _index3 = require(\"./differenceInMonths.js\");\nvar _index4 = require(\"./differenceInSeconds.js\");\nvar _index5 = require(\"./toDate.js\");\n\nvar _index6 = require(\"./_lib/defaultLocale.js\");\nvar _index7 = require(\"./_lib/defaultOptions.js\");\nvar _index8 = require(\"./_lib/getTimezoneOffsetInMilliseconds.js\");\n\n/**\n * The {@link formatDistance} function options.\n */\n\n/**\n * @name formatDistance\n * @category Common Helpers\n * @summary Return the distance between the given dates in words.\n *\n * @description\n * Return the distance between the given dates in words.\n *\n * | Distance between dates                                            | Result              |\n * |-------------------------------------------------------------------|---------------------|\n * | 0 ... 30 secs                                                     | less than a minute  |\n * | 30 secs ... 1 min 30 secs                                         | 1 minute            |\n * | 1 min 30 secs ... 44 mins 30 secs                                 | [2..44] minutes     |\n * | 44 mins ... 30 secs ... 89 mins 30 secs                           | about 1 hour        |\n * | 89 mins 30 secs ... 23 hrs 59 mins 30 secs                        | about [2..24] hours |\n * | 23 hrs 59 mins 30 secs ... 41 hrs 59 mins 30 secs                 | 1 day               |\n * | 41 hrs 59 mins 30 secs ... 29 days 23 hrs 59 mins 30 secs         | [2..30] days        |\n * | 29 days 23 hrs 59 mins 30 secs ... 44 days 23 hrs 59 mins 30 secs | about 1 month       |\n * | 44 days 23 hrs 59 mins 30 secs ... 59 days 23 hrs 59 mins 30 secs | about 2 months      |\n * | 59 days 23 hrs 59 mins 30 secs ... 1 yr                           | [2..12] months      |\n * | 1 yr ... 1 yr 3 months                                            | about 1 year        |\n * | 1 yr 3 months ... 1 yr 9 month s                                  | over 1 year         |\n * | 1 yr 9 months ... 2 yrs                                           | almost 2 years      |\n * | N yrs ... N yrs 3 months                                          | about N years       |\n * | N yrs 3 months ... N yrs 9 months                                 | over N years        |\n * | N yrs 9 months ... N+1 yrs                                        | almost N+1 years    |\n *\n * With `options.includeSeconds == true`:\n * | Distance between dates | Result               |\n * |------------------------|----------------------|\n * | 0 secs ... 5 secs      | less than 5 seconds  |\n * | 5 secs ... 10 secs     | less than 10 seconds |\n * | 10 secs ... 20 secs    | less than 20 seconds |\n * | 20 secs ... 40 secs    | half a minute        |\n * | 40 secs ... 60 secs    | less than a minute   |\n * | 60 secs ... 90 secs    | 1 minute             |\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The date\n * @param baseDate - The date to compare with\n * @param options - An object with options\n *\n * @returns The distance in words\n *\n * @throws `date` must not be Invalid Date\n * @throws `baseDate` must not be Invalid Date\n * @throws `options.locale` must contain `formatDistance` property\n *\n * @example\n * // What is the distance between 2 July 2014 and 1 January 2015?\n * const result = formatDistance(new Date(2014, 6, 2), new Date(2015, 0, 1))\n * //=> '6 months'\n *\n * @example\n * // What is the distance between 1 January 2015 00:00:15\n * // and 1 January 2015 00:00:00, including seconds?\n * const result = formatDistance(\n *   new Date(2015, 0, 1, 0, 0, 15),\n *   new Date(2015, 0, 1, 0, 0, 0),\n *   { includeSeconds: true }\n * )\n * //=> 'less than 20 seconds'\n *\n * @example\n * // What is the distance from 1 January 2016\n * // to 1 January 2015, with a suffix?\n * const result = formatDistance(new Date(2015, 0, 1), new Date(2016, 0, 1), {\n *   addSuffix: true\n * })\n * //=> 'about 1 year ago'\n *\n * @example\n * // What is the distance between 1 August 2016 and 1 January 2015 in Esperanto?\n * import { eoLocale } from 'date-fns/locale/eo'\n * const result = formatDistance(new Date(2016, 7, 1), new Date(2015, 0, 1), {\n *   locale: eoLocale\n * })\n * //=> 'pli ol 1 jaro'\n */\n\nfunction formatDistance(date, baseDate, options) {\n  const defaultOptions = (0, _index7.getDefaultOptions)();\n  const locale =\n    options?.locale ?? defaultOptions.locale ?? _index6.defaultLocale;\n  const minutesInAlmostTwoDays = 2520;\n\n  const comparison = (0, _index.compareAsc)(date, baseDate);\n\n  if (isNaN(comparison)) {\n    throw new RangeError(\"Invalid time value\");\n  }\n\n  const localizeOptions = Object.assign({}, options, {\n    addSuffix: options?.addSuffix,\n    comparison: comparison,\n  });\n\n  let dateLeft;\n  let dateRight;\n  if (comparison > 0) {\n    dateLeft = (0, _index5.toDate)(baseDate);\n    dateRight = (0, _index5.toDate)(date);\n  } else {\n    dateLeft = (0, _index5.toDate)(date);\n    dateRight = (0, _index5.toDate)(baseDate);\n  }\n\n  const seconds = (0, _index4.differenceInSeconds)(dateRight, dateLeft);\n  const offsetInSeconds =\n    ((0, _index8.getTimezoneOffsetInMilliseconds)(dateRight) -\n      (0, _index8.getTimezoneOffsetInMilliseconds)(dateLeft)) /\n    1000;\n  const minutes = Math.round((seconds - offsetInSeconds) / 60);\n  let months;\n\n  // 0 up to 2 mins\n  if (minutes < 2) {\n    if (options?.includeSeconds) {\n      if (seconds < 5) {\n        return locale.formatDistance(\"lessThanXSeconds\", 5, localizeOptions);\n      } else if (seconds < 10) {\n        return locale.formatDistance(\"lessThanXSeconds\", 10, localizeOptions);\n      } else if (seconds < 20) {\n        return locale.formatDistance(\"lessThanXSeconds\", 20, localizeOptions);\n      } else if (seconds < 40) {\n        return locale.formatDistance(\"halfAMinute\", 0, localizeOptions);\n      } else if (seconds < 60) {\n        return locale.formatDistance(\"lessThanXMinutes\", 1, localizeOptions);\n      } else {\n        return locale.formatDistance(\"xMinutes\", 1, localizeOptions);\n      }\n    } else {\n      if (minutes === 0) {\n        return locale.formatDistance(\"lessThanXMinutes\", 1, localizeOptions);\n      } else {\n        return locale.formatDistance(\"xMinutes\", minutes, localizeOptions);\n      }\n    }\n\n    // 2 mins up to 0.75 hrs\n  } else if (minutes < 45) {\n    return locale.formatDistance(\"xMinutes\", minutes, localizeOptions);\n\n    // 0.75 hrs up to 1.5 hrs\n  } else if (minutes < 90) {\n    return locale.formatDistance(\"aboutXHours\", 1, localizeOptions);\n\n    // 1.5 hrs up to 24 hrs\n  } else if (minutes < _index2.minutesInDay) {\n    const hours = Math.round(minutes / 60);\n    return locale.formatDistance(\"aboutXHours\", hours, localizeOptions);\n\n    // 1 day up to 1.75 days\n  } else if (minutes < minutesInAlmostTwoDays) {\n    return locale.formatDistance(\"xDays\", 1, localizeOptions);\n\n    // 1.75 days up to 30 days\n  } else if (minutes < _index2.minutesInMonth) {\n    const days = Math.round(minutes / _index2.minutesInDay);\n    return locale.formatDistance(\"xDays\", days, localizeOptions);\n\n    // 1 month up to 2 months\n  } else if (minutes < _index2.minutesInMonth * 2) {\n    months = Math.round(minutes / _index2.minutesInMonth);\n    return locale.formatDistance(\"aboutXMonths\", months, localizeOptions);\n  }\n\n  months = (0, _index3.differenceInMonths)(dateRight, dateLeft);\n\n  // 2 months up to 12 months\n  if (months < 12) {\n    const nearestMonth = Math.round(minutes / _index2.minutesInMonth);\n    return locale.formatDistance(\"xMonths\", nearestMonth, localizeOptions);\n\n    // 1 year up to max Date\n  } else {\n    const monthsSinceStartOfYear = months % 12;\n    const years = Math.trunc(months / 12);\n\n    // N years up to 1 years 3 months\n    if (monthsSinceStartOfYear < 3) {\n      return locale.formatDistance(\"aboutXYears\", years, localizeOptions);\n\n      // N years 3 months up to N years 9 months\n    } else if (monthsSinceStartOfYear < 9) {\n      return locale.formatDistance(\"overXYears\", years, localizeOptions);\n\n      // N years 9 months up to N year 12 months\n    } else {\n      return locale.formatDistance(\"almostXYears\", years + 1, localizeOptions);\n    }\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}