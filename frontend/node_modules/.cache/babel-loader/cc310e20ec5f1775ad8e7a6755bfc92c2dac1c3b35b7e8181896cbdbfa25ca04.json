{"ast":null,"code":"\"use strict\";\n\nexports.StandAloneMonthParser = void 0;\nvar _constants = require(\"../constants.js\");\nvar _Parser = require(\"../Parser.js\");\nvar _utils = require(\"../utils.js\");\nclass StandAloneMonthParser extends _Parser.Parser {\n  priority = 110;\n  parse(dateString, token, match) {\n    const valueCallback = value => value - 1;\n    switch (token) {\n      // 1, 2, ..., 12\n      case \"L\":\n        return (0, _utils.mapValue)((0, _utils.parseNumericPattern)(_constants.numericPatterns.month, dateString), valueCallback);\n      // 01, 02, ..., 12\n      case \"LL\":\n        return (0, _utils.mapValue)((0, _utils.parseNDigits)(2, dateString), valueCallback);\n      // 1st, 2nd, ..., 12th\n      case \"Lo\":\n        return (0, _utils.mapValue)(match.ordinalNumber(dateString, {\n          unit: \"month\"\n        }), valueCallback);\n      // Jan, Feb, ..., Dec\n      case \"LLL\":\n        return match.month(dateString, {\n          width: \"abbreviated\",\n          context: \"standalone\"\n        }) || match.month(dateString, {\n          width: \"narrow\",\n          context: \"standalone\"\n        });\n\n      // J, F, ..., D\n      case \"LLLLL\":\n        return match.month(dateString, {\n          width: \"narrow\",\n          context: \"standalone\"\n        });\n      // January, February, ..., December\n      case \"LLLL\":\n      default:\n        return match.month(dateString, {\n          width: \"wide\",\n          context: \"standalone\"\n        }) || match.month(dateString, {\n          width: \"abbreviated\",\n          context: \"standalone\"\n        }) || match.month(dateString, {\n          width: \"narrow\",\n          context: \"standalone\"\n        });\n    }\n  }\n  validate(_date, value) {\n    return value >= 0 && value <= 11;\n  }\n  set(date, _flags, value) {\n    date.setMonth(value, 1);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n  incompatibleTokens = [\"Y\", \"R\", \"q\", \"Q\", \"M\", \"w\", \"I\", \"D\", \"i\", \"e\", \"c\", \"t\", \"T\"];\n}\nexports.StandAloneMonthParser = StandAloneMonthParser;","map":{"version":3,"names":["exports","StandAloneMonthParser","_constants","require","_Parser","_utils","Parser","priority","parse","dateString","token","match","valueCallback","value","mapValue","parseNumericPattern","numericPatterns","month","parseNDigits","ordinalNumber","unit","width","context","validate","_date","set","date","_flags","setMonth","setHours","incompatibleTokens"],"sources":["D:/Faculty/Spring 2024/SW engineering/project/Expense-Tracker-Application/frontend/node_modules/date-fns/parse/_lib/parsers/StandAloneMonthParser.js"],"sourcesContent":["\"use strict\";\r\nexports.StandAloneMonthParser = void 0;\r\nvar _constants = require(\"../constants.js\");\r\nvar _Parser = require(\"../Parser.js\");\r\n\r\nvar _utils = require(\"../utils.js\");\r\n\r\nclass StandAloneMonthParser extends _Parser.Parser {\r\n  priority = 110;\r\n\r\n  parse(dateString, token, match) {\r\n    const valueCallback = (value) => value - 1;\r\n\r\n    switch (token) {\r\n      // 1, 2, ..., 12\r\n      case \"L\":\r\n        return (0, _utils.mapValue)(\r\n          (0, _utils.parseNumericPattern)(\r\n            _constants.numericPatterns.month,\r\n            dateString,\r\n          ),\r\n          valueCallback,\r\n        );\r\n      // 01, 02, ..., 12\r\n      case \"LL\":\r\n        return (0, _utils.mapValue)(\r\n          (0, _utils.parseNDigits)(2, dateString),\r\n          valueCallback,\r\n        );\r\n      // 1st, 2nd, ..., 12th\r\n      case \"Lo\":\r\n        return (0, _utils.mapValue)(\r\n          match.ordinalNumber(dateString, {\r\n            unit: \"month\",\r\n          }),\r\n          valueCallback,\r\n        );\r\n      // Jan, Feb, ..., Dec\r\n      case \"LLL\":\r\n        return (\r\n          match.month(dateString, {\r\n            width: \"abbreviated\",\r\n            context: \"standalone\",\r\n          }) ||\r\n          match.month(dateString, { width: \"narrow\", context: \"standalone\" })\r\n        );\r\n\r\n      // J, F, ..., D\r\n      case \"LLLLL\":\r\n        return match.month(dateString, {\r\n          width: \"narrow\",\r\n          context: \"standalone\",\r\n        });\r\n      // January, February, ..., December\r\n      case \"LLLL\":\r\n      default:\r\n        return (\r\n          match.month(dateString, { width: \"wide\", context: \"standalone\" }) ||\r\n          match.month(dateString, {\r\n            width: \"abbreviated\",\r\n            context: \"standalone\",\r\n          }) ||\r\n          match.month(dateString, { width: \"narrow\", context: \"standalone\" })\r\n        );\r\n    }\r\n  }\r\n\r\n  validate(_date, value) {\r\n    return value >= 0 && value <= 11;\r\n  }\r\n\r\n  set(date, _flags, value) {\r\n    date.setMonth(value, 1);\r\n    date.setHours(0, 0, 0, 0);\r\n    return date;\r\n  }\r\n\r\n  incompatibleTokens = [\r\n    \"Y\",\r\n    \"R\",\r\n    \"q\",\r\n    \"Q\",\r\n    \"M\",\r\n    \"w\",\r\n    \"I\",\r\n    \"D\",\r\n    \"i\",\r\n    \"e\",\r\n    \"c\",\r\n    \"t\",\r\n    \"T\",\r\n  ];\r\n}\r\nexports.StandAloneMonthParser = StandAloneMonthParser;\r\n"],"mappings":"AAAA,YAAY;;AACZA,OAAO,CAACC,qBAAqB,GAAG,KAAK,CAAC;AACtC,IAAIC,UAAU,GAAGC,OAAO,CAAC,iBAAiB,CAAC;AAC3C,IAAIC,OAAO,GAAGD,OAAO,CAAC,cAAc,CAAC;AAErC,IAAIE,MAAM,GAAGF,OAAO,CAAC,aAAa,CAAC;AAEnC,MAAMF,qBAAqB,SAASG,OAAO,CAACE,MAAM,CAAC;EACjDC,QAAQ,GAAG,GAAG;EAEdC,KAAKA,CAACC,UAAU,EAAEC,KAAK,EAAEC,KAAK,EAAE;IAC9B,MAAMC,aAAa,GAAIC,KAAK,IAAKA,KAAK,GAAG,CAAC;IAE1C,QAAQH,KAAK;MACX;MACA,KAAK,GAAG;QACN,OAAO,CAAC,CAAC,EAAEL,MAAM,CAACS,QAAQ,EACxB,CAAC,CAAC,EAAET,MAAM,CAACU,mBAAmB,EAC5Bb,UAAU,CAACc,eAAe,CAACC,KAAK,EAChCR,UACF,CAAC,EACDG,aACF,CAAC;MACH;MACA,KAAK,IAAI;QACP,OAAO,CAAC,CAAC,EAAEP,MAAM,CAACS,QAAQ,EACxB,CAAC,CAAC,EAAET,MAAM,CAACa,YAAY,EAAE,CAAC,EAAET,UAAU,CAAC,EACvCG,aACF,CAAC;MACH;MACA,KAAK,IAAI;QACP,OAAO,CAAC,CAAC,EAAEP,MAAM,CAACS,QAAQ,EACxBH,KAAK,CAACQ,aAAa,CAACV,UAAU,EAAE;UAC9BW,IAAI,EAAE;QACR,CAAC,CAAC,EACFR,aACF,CAAC;MACH;MACA,KAAK,KAAK;QACR,OACED,KAAK,CAACM,KAAK,CAACR,UAAU,EAAE;UACtBY,KAAK,EAAE,aAAa;UACpBC,OAAO,EAAE;QACX,CAAC,CAAC,IACFX,KAAK,CAACM,KAAK,CAACR,UAAU,EAAE;UAAEY,KAAK,EAAE,QAAQ;UAAEC,OAAO,EAAE;QAAa,CAAC,CAAC;;MAGvE;MACA,KAAK,OAAO;QACV,OAAOX,KAAK,CAACM,KAAK,CAACR,UAAU,EAAE;UAC7BY,KAAK,EAAE,QAAQ;UACfC,OAAO,EAAE;QACX,CAAC,CAAC;MACJ;MACA,KAAK,MAAM;MACX;QACE,OACEX,KAAK,CAACM,KAAK,CAACR,UAAU,EAAE;UAAEY,KAAK,EAAE,MAAM;UAAEC,OAAO,EAAE;QAAa,CAAC,CAAC,IACjEX,KAAK,CAACM,KAAK,CAACR,UAAU,EAAE;UACtBY,KAAK,EAAE,aAAa;UACpBC,OAAO,EAAE;QACX,CAAC,CAAC,IACFX,KAAK,CAACM,KAAK,CAACR,UAAU,EAAE;UAAEY,KAAK,EAAE,QAAQ;UAAEC,OAAO,EAAE;QAAa,CAAC,CAAC;IAEzE;EACF;EAEAC,QAAQA,CAACC,KAAK,EAAEX,KAAK,EAAE;IACrB,OAAOA,KAAK,IAAI,CAAC,IAAIA,KAAK,IAAI,EAAE;EAClC;EAEAY,GAAGA,CAACC,IAAI,EAAEC,MAAM,EAAEd,KAAK,EAAE;IACvBa,IAAI,CAACE,QAAQ,CAACf,KAAK,EAAE,CAAC,CAAC;IACvBa,IAAI,CAACG,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;IACzB,OAAOH,IAAI;EACb;EAEAI,kBAAkB,GAAG,CACnB,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,CACJ;AACH;AACA9B,OAAO,CAACC,qBAAqB,GAAGA,qBAAqB","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}