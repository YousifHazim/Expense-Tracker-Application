{"ast":null,"code":"\"use strict\";\n\nexports.formatDuration = formatDuration;\nvar _index = require(\"./_lib/defaultLocale.js\");\nvar _index2 = require(\"./_lib/defaultOptions.js\");\n\n/**\r\n * The {@link formatDuration} function options.\r\n */\n\nconst defaultFormat = [\"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", \"seconds\"];\n\n/**\r\n * @name formatDuration\r\n * @category Common Helpers\r\n * @summary Formats a duration in human-readable format\r\n *\r\n * @description\r\n * Return human-readable duration string i.e. \"9 months 2 days\"\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n *\r\n * @param duration - The duration to format\r\n * @param options - An object with options.\r\n *\r\n * @returns The formatted date string\r\n *\r\n * @example\r\n * // Format full duration\r\n * formatDuration({\r\n *   years: 2,\r\n *   months: 9,\r\n *   weeks: 1,\r\n *   days: 7,\r\n *   hours: 5,\r\n *   minutes: 9,\r\n *   seconds: 30\r\n * })\r\n * //=> '2 years 9 months 1 week 7 days 5 hours 9 minutes 30 seconds'\r\n *\r\n * @example\r\n * // Format partial duration\r\n * formatDuration({ months: 9, days: 2 })\r\n * //=> '9 months 2 days'\r\n *\r\n * @example\r\n * // Customize the format\r\n * formatDuration(\r\n *   {\r\n *     years: 2,\r\n *     months: 9,\r\n *     weeks: 1,\r\n *     days: 7,\r\n *     hours: 5,\r\n *     minutes: 9,\r\n *     seconds: 30\r\n *   },\r\n *   { format: ['months', 'weeks'] }\r\n * ) === '9 months 1 week'\r\n *\r\n * @example\r\n * // Customize the zeros presence\r\n * formatDuration({ years: 0, months: 9 })\r\n * //=> '9 months'\r\n * formatDuration({ years: 0, months: 9 }, { zero: true })\r\n * //=> '0 years 9 months'\r\n *\r\n * @example\r\n * // Customize the delimiter\r\n * formatDuration({ years: 2, months: 9, weeks: 3 }, { delimiter: ', ' })\r\n * //=> '2 years, 9 months, 3 weeks'\r\n */\nfunction formatDuration(duration, options) {\n  const defaultOptions = (0, _index2.getDefaultOptions)();\n  const locale = options?.locale ?? defaultOptions.locale ?? _index.defaultLocale;\n  const format = options?.format ?? defaultFormat;\n  const zero = options?.zero ?? false;\n  const delimiter = options?.delimiter ?? \" \";\n  if (!locale.formatDistance) {\n    return \"\";\n  }\n  const result = format.reduce((acc, unit) => {\n    const token = `x${unit.replace(/(^.)/, m => m.toUpperCase())}`;\n    const value = duration[unit];\n    if (value !== undefined && (zero || duration[unit])) {\n      return acc.concat(locale.formatDistance(token, value));\n    }\n    return acc;\n  }, []).join(delimiter);\n  return result;\n}","map":{"version":3,"names":["exports","formatDuration","_index","require","_index2","defaultFormat","duration","options","defaultOptions","getDefaultOptions","locale","defaultLocale","format","zero","delimiter","formatDistance","result","reduce","acc","unit","token","replace","m","toUpperCase","value","undefined","concat","join"],"sources":["D:/Faculty/Spring 2024/SW engineering/project/Expense-Tracker-Application/frontend/node_modules/date-fns/formatDuration.js"],"sourcesContent":["\"use strict\";\r\nexports.formatDuration = formatDuration;\r\n\r\nvar _index = require(\"./_lib/defaultLocale.js\");\r\nvar _index2 = require(\"./_lib/defaultOptions.js\");\r\n\r\n/**\r\n * The {@link formatDuration} function options.\r\n */\r\n\r\nconst defaultFormat = [\r\n  \"years\",\r\n  \"months\",\r\n  \"weeks\",\r\n  \"days\",\r\n  \"hours\",\r\n  \"minutes\",\r\n  \"seconds\",\r\n];\r\n\r\n/**\r\n * @name formatDuration\r\n * @category Common Helpers\r\n * @summary Formats a duration in human-readable format\r\n *\r\n * @description\r\n * Return human-readable duration string i.e. \"9 months 2 days\"\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n *\r\n * @param duration - The duration to format\r\n * @param options - An object with options.\r\n *\r\n * @returns The formatted date string\r\n *\r\n * @example\r\n * // Format full duration\r\n * formatDuration({\r\n *   years: 2,\r\n *   months: 9,\r\n *   weeks: 1,\r\n *   days: 7,\r\n *   hours: 5,\r\n *   minutes: 9,\r\n *   seconds: 30\r\n * })\r\n * //=> '2 years 9 months 1 week 7 days 5 hours 9 minutes 30 seconds'\r\n *\r\n * @example\r\n * // Format partial duration\r\n * formatDuration({ months: 9, days: 2 })\r\n * //=> '9 months 2 days'\r\n *\r\n * @example\r\n * // Customize the format\r\n * formatDuration(\r\n *   {\r\n *     years: 2,\r\n *     months: 9,\r\n *     weeks: 1,\r\n *     days: 7,\r\n *     hours: 5,\r\n *     minutes: 9,\r\n *     seconds: 30\r\n *   },\r\n *   { format: ['months', 'weeks'] }\r\n * ) === '9 months 1 week'\r\n *\r\n * @example\r\n * // Customize the zeros presence\r\n * formatDuration({ years: 0, months: 9 })\r\n * //=> '9 months'\r\n * formatDuration({ years: 0, months: 9 }, { zero: true })\r\n * //=> '0 years 9 months'\r\n *\r\n * @example\r\n * // Customize the delimiter\r\n * formatDuration({ years: 2, months: 9, weeks: 3 }, { delimiter: ', ' })\r\n * //=> '2 years, 9 months, 3 weeks'\r\n */\r\nfunction formatDuration(duration, options) {\r\n  const defaultOptions = (0, _index2.getDefaultOptions)();\r\n  const locale =\r\n    options?.locale ?? defaultOptions.locale ?? _index.defaultLocale;\r\n  const format = options?.format ?? defaultFormat;\r\n  const zero = options?.zero ?? false;\r\n  const delimiter = options?.delimiter ?? \" \";\r\n\r\n  if (!locale.formatDistance) {\r\n    return \"\";\r\n  }\r\n\r\n  const result = format\r\n    .reduce((acc, unit) => {\r\n      const token = `x${unit.replace(/(^.)/, (m) => m.toUpperCase())}`;\r\n      const value = duration[unit];\r\n      if (value !== undefined && (zero || duration[unit])) {\r\n        return acc.concat(locale.formatDistance(token, value));\r\n      }\r\n      return acc;\r\n    }, [])\r\n    .join(delimiter);\r\n\r\n  return result;\r\n}\r\n"],"mappings":"AAAA,YAAY;;AACZA,OAAO,CAACC,cAAc,GAAGA,cAAc;AAEvC,IAAIC,MAAM,GAAGC,OAAO,CAAC,yBAAyB,CAAC;AAC/C,IAAIC,OAAO,GAAGD,OAAO,CAAC,0BAA0B,CAAC;;AAEjD;AACA;AACA;;AAEA,MAAME,aAAa,GAAG,CACpB,OAAO,EACP,QAAQ,EACR,OAAO,EACP,MAAM,EACN,OAAO,EACP,SAAS,EACT,SAAS,CACV;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASJ,cAAcA,CAACK,QAAQ,EAAEC,OAAO,EAAE;EACzC,MAAMC,cAAc,GAAG,CAAC,CAAC,EAAEJ,OAAO,CAACK,iBAAiB,EAAE,CAAC;EACvD,MAAMC,MAAM,GACVH,OAAO,EAAEG,MAAM,IAAIF,cAAc,CAACE,MAAM,IAAIR,MAAM,CAACS,aAAa;EAClE,MAAMC,MAAM,GAAGL,OAAO,EAAEK,MAAM,IAAIP,aAAa;EAC/C,MAAMQ,IAAI,GAAGN,OAAO,EAAEM,IAAI,IAAI,KAAK;EACnC,MAAMC,SAAS,GAAGP,OAAO,EAAEO,SAAS,IAAI,GAAG;EAE3C,IAAI,CAACJ,MAAM,CAACK,cAAc,EAAE;IAC1B,OAAO,EAAE;EACX;EAEA,MAAMC,MAAM,GAAGJ,MAAM,CAClBK,MAAM,CAAC,CAACC,GAAG,EAAEC,IAAI,KAAK;IACrB,MAAMC,KAAK,GAAI,IAAGD,IAAI,CAACE,OAAO,CAAC,MAAM,EAAGC,CAAC,IAAKA,CAAC,CAACC,WAAW,CAAC,CAAC,CAAE,EAAC;IAChE,MAAMC,KAAK,GAAGlB,QAAQ,CAACa,IAAI,CAAC;IAC5B,IAAIK,KAAK,KAAKC,SAAS,KAAKZ,IAAI,IAAIP,QAAQ,CAACa,IAAI,CAAC,CAAC,EAAE;MACnD,OAAOD,GAAG,CAACQ,MAAM,CAAChB,MAAM,CAACK,cAAc,CAACK,KAAK,EAAEI,KAAK,CAAC,CAAC;IACxD;IACA,OAAON,GAAG;EACZ,CAAC,EAAE,EAAE,CAAC,CACLS,IAAI,CAACb,SAAS,CAAC;EAElB,OAAOE,MAAM;AACf","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}