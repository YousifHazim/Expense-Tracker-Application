{"ast":null,"code":"\"use strict\";\n\nexports.formatISO = formatISO;\nvar _index = require(\"./toDate.js\");\nvar _index2 = require(\"./_lib/addLeadingZeros.js\");\n\n/**\n * The {@link formatISO} function options.\n */\n\n/**\n * @name formatISO\n * @category Common Helpers\n * @summary Format the date according to the ISO 8601 standard (https://support.sas.com/documentation/cdl/en/lrdict/64316/HTML/default/viewer.htm#a003169814.htm).\n *\n * @description\n * Return the formatted date string in ISO 8601 format. Options may be passed to control the parts and notations of the date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The original date\n * @param options - An object with options.\n *\n * @returns The formatted date string (in loca.l time zone)\n *\n * @throws `date` must not be Invalid Date\n *\n * @example\n * // Represent 18 September 2019 in ISO 8601 format (local time zone is UTC):\n * const result = formatISO(new Date(2019, 8, 18, 19, 0, 52))\n * //=> '2019-09-18T19:00:52Z'\n *\n * @example\n * // Represent 18 September 2019 in ISO 8601, short format (local time zone is UTC):\n * const result = formatISO(new Date(2019, 8, 18, 19, 0, 52), { format: 'basic' })\n * //=> '20190918T190052'\n *\n * @example\n * // Represent 18 September 2019 in ISO 8601 format, date only:\n * const result = formatISO(new Date(2019, 8, 18, 19, 0, 52), { representation: 'date' })\n * //=> '2019-09-18'\n *\n * @example\n * // Represent 18 September 2019 in ISO 8601 format, time only (local time zone is UTC):\n * const result = formatISO(new Date(2019, 8, 18, 19, 0, 52), { representation: 'time' })\n * //=> '19:00:52Z'\n */\nfunction formatISO(date, options) {\n  var _options$format, _options$representati;\n  const _date = (0, _index.toDate)(date);\n  if (isNaN(_date.getTime())) {\n    throw new RangeError(\"Invalid time value\");\n  }\n  const format = (_options$format = options === null || options === void 0 ? void 0 : options.format) !== null && _options$format !== void 0 ? _options$format : \"extended\";\n  const representation = (_options$representati = options === null || options === void 0 ? void 0 : options.representation) !== null && _options$representati !== void 0 ? _options$representati : \"complete\";\n  let result = \"\";\n  let tzOffset = \"\";\n  const dateDelimiter = format === \"extended\" ? \"-\" : \"\";\n  const timeDelimiter = format === \"extended\" ? \":\" : \"\";\n\n  // Representation is either 'date' or 'complete'\n  if (representation !== \"time\") {\n    const day = (0, _index2.addLeadingZeros)(_date.getDate(), 2);\n    const month = (0, _index2.addLeadingZeros)(_date.getMonth() + 1, 2);\n    const year = (0, _index2.addLeadingZeros)(_date.getFullYear(), 4);\n\n    // yyyyMMdd or yyyy-MM-dd.\n    result = \"\".concat(year).concat(dateDelimiter).concat(month).concat(dateDelimiter).concat(day);\n  }\n\n  // Representation is either 'time' or 'complete'\n  if (representation !== \"date\") {\n    // Add the timezone.\n    const offset = _date.getTimezoneOffset();\n    if (offset !== 0) {\n      const absoluteOffset = Math.abs(offset);\n      const hourOffset = (0, _index2.addLeadingZeros)(Math.trunc(absoluteOffset / 60), 2);\n      const minuteOffset = (0, _index2.addLeadingZeros)(absoluteOffset % 60, 2);\n      // If less than 0, the sign is +, because it is ahead of time.\n      const sign = offset < 0 ? \"+\" : \"-\";\n      tzOffset = \"\".concat(sign).concat(hourOffset, \":\").concat(minuteOffset);\n    } else {\n      tzOffset = \"Z\";\n    }\n    const hour = (0, _index2.addLeadingZeros)(_date.getHours(), 2);\n    const minute = (0, _index2.addLeadingZeros)(_date.getMinutes(), 2);\n    const second = (0, _index2.addLeadingZeros)(_date.getSeconds(), 2);\n\n    // If there's also date, separate it with time with 'T'\n    const separator = result === \"\" ? \"\" : \"T\";\n\n    // Creates a time string consisting of hour, minute, and second, separated by delimiters, if defined.\n    const time = [hour, minute, second].join(timeDelimiter);\n\n    // HHmmss or HH:mm:ss.\n    result = \"\".concat(result).concat(separator).concat(time).concat(tzOffset);\n  }\n  return result;\n}","map":{"version":3,"names":["exports","formatISO","_index","require","_index2","date","options","_options$format","_options$representati","_date","toDate","isNaN","getTime","RangeError","format","representation","result","tzOffset","dateDelimiter","timeDelimiter","day","addLeadingZeros","getDate","month","getMonth","year","getFullYear","concat","offset","getTimezoneOffset","absoluteOffset","Math","abs","hourOffset","trunc","minuteOffset","sign","hour","getHours","minute","getMinutes","second","getSeconds","separator","time","join"],"sources":["C:/Users/mh_sm/Dropbox/PC/Desktop/computer/SENIOR-1/Spring/SW/Project/EXPENSE-TRACKER/frontend/node_modules/date-fns/formatISO.js"],"sourcesContent":["\"use strict\";\nexports.formatISO = formatISO;\nvar _index = require(\"./toDate.js\");\n\nvar _index2 = require(\"./_lib/addLeadingZeros.js\");\n\n/**\n * The {@link formatISO} function options.\n */\n\n/**\n * @name formatISO\n * @category Common Helpers\n * @summary Format the date according to the ISO 8601 standard (https://support.sas.com/documentation/cdl/en/lrdict/64316/HTML/default/viewer.htm#a003169814.htm).\n *\n * @description\n * Return the formatted date string in ISO 8601 format. Options may be passed to control the parts and notations of the date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The original date\n * @param options - An object with options.\n *\n * @returns The formatted date string (in loca.l time zone)\n *\n * @throws `date` must not be Invalid Date\n *\n * @example\n * // Represent 18 September 2019 in ISO 8601 format (local time zone is UTC):\n * const result = formatISO(new Date(2019, 8, 18, 19, 0, 52))\n * //=> '2019-09-18T19:00:52Z'\n *\n * @example\n * // Represent 18 September 2019 in ISO 8601, short format (local time zone is UTC):\n * const result = formatISO(new Date(2019, 8, 18, 19, 0, 52), { format: 'basic' })\n * //=> '20190918T190052'\n *\n * @example\n * // Represent 18 September 2019 in ISO 8601 format, date only:\n * const result = formatISO(new Date(2019, 8, 18, 19, 0, 52), { representation: 'date' })\n * //=> '2019-09-18'\n *\n * @example\n * // Represent 18 September 2019 in ISO 8601 format, time only (local time zone is UTC):\n * const result = formatISO(new Date(2019, 8, 18, 19, 0, 52), { representation: 'time' })\n * //=> '19:00:52Z'\n */\nfunction formatISO(date, options) {\n  const _date = (0, _index.toDate)(date);\n\n  if (isNaN(_date.getTime())) {\n    throw new RangeError(\"Invalid time value\");\n  }\n\n  const format = options?.format ?? \"extended\";\n  const representation = options?.representation ?? \"complete\";\n\n  let result = \"\";\n  let tzOffset = \"\";\n\n  const dateDelimiter = format === \"extended\" ? \"-\" : \"\";\n  const timeDelimiter = format === \"extended\" ? \":\" : \"\";\n\n  // Representation is either 'date' or 'complete'\n  if (representation !== \"time\") {\n    const day = (0, _index2.addLeadingZeros)(_date.getDate(), 2);\n    const month = (0, _index2.addLeadingZeros)(_date.getMonth() + 1, 2);\n    const year = (0, _index2.addLeadingZeros)(_date.getFullYear(), 4);\n\n    // yyyyMMdd or yyyy-MM-dd.\n    result = `${year}${dateDelimiter}${month}${dateDelimiter}${day}`;\n  }\n\n  // Representation is either 'time' or 'complete'\n  if (representation !== \"date\") {\n    // Add the timezone.\n    const offset = _date.getTimezoneOffset();\n\n    if (offset !== 0) {\n      const absoluteOffset = Math.abs(offset);\n      const hourOffset = (0, _index2.addLeadingZeros)(\n        Math.trunc(absoluteOffset / 60),\n        2,\n      );\n      const minuteOffset = (0, _index2.addLeadingZeros)(absoluteOffset % 60, 2);\n      // If less than 0, the sign is +, because it is ahead of time.\n      const sign = offset < 0 ? \"+\" : \"-\";\n\n      tzOffset = `${sign}${hourOffset}:${minuteOffset}`;\n    } else {\n      tzOffset = \"Z\";\n    }\n\n    const hour = (0, _index2.addLeadingZeros)(_date.getHours(), 2);\n    const minute = (0, _index2.addLeadingZeros)(_date.getMinutes(), 2);\n    const second = (0, _index2.addLeadingZeros)(_date.getSeconds(), 2);\n\n    // If there's also date, separate it with time with 'T'\n    const separator = result === \"\" ? \"\" : \"T\";\n\n    // Creates a time string consisting of hour, minute, and second, separated by delimiters, if defined.\n    const time = [hour, minute, second].join(timeDelimiter);\n\n    // HHmmss or HH:mm:ss.\n    result = `${result}${separator}${time}${tzOffset}`;\n  }\n\n  return result;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}