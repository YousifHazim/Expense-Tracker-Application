{"ast":null,"code":"\"use strict\";\n\nexports.areIntervalsOverlapping = areIntervalsOverlapping;\nvar _index = require(\"./toDate.js\");\n\n/**\r\n * The {@link areIntervalsOverlapping} function options.\r\n */\n\n/**\r\n * @name areIntervalsOverlapping\r\n * @category Interval Helpers\r\n * @summary Is the given time interval overlapping with another time interval?\r\n *\r\n * @description\r\n * Is the given time interval overlapping with another time interval? Adjacent intervals do not count as overlapping unless `inclusive` is set to `true`.\r\n *\r\n * @param intervalLeft - The first interval to compare.\r\n * @param intervalRight - The second interval to compare.\r\n * @param options - The object with options\r\n *\r\n * @returns Whether the time intervals are overlapping\r\n *\r\n * @example\r\n * // For overlapping time intervals:\r\n * areIntervalsOverlapping(\r\n *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\r\n *   { start: new Date(2014, 0, 17), end: new Date(2014, 0, 21) }\r\n * )\r\n * //=> true\r\n *\r\n * @example\r\n * // For non-overlapping time intervals:\r\n * areIntervalsOverlapping(\r\n *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\r\n *   { start: new Date(2014, 0, 21), end: new Date(2014, 0, 22) }\r\n * )\r\n * //=> false\r\n *\r\n * @example\r\n * // For adjacent time intervals:\r\n * areIntervalsOverlapping(\r\n *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\r\n *   { start: new Date(2014, 0, 20), end: new Date(2014, 0, 30) }\r\n * )\r\n * //=> false\r\n *\r\n * @example\r\n * // Using the inclusive option:\r\n * areIntervalsOverlapping(\r\n *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\r\n *   { start: new Date(2014, 0, 20), end: new Date(2014, 0, 24) }\r\n * )\r\n * //=> false\r\n *\r\n * @example\r\n * areIntervalsOverlapping(\r\n *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\r\n *   { start: new Date(2014, 0, 20), end: new Date(2014, 0, 24) },\r\n *   { inclusive: true }\r\n * )\r\n * //=> true\r\n */\nfunction areIntervalsOverlapping(intervalLeft, intervalRight, options) {\n  const [leftStartTime, leftEndTime] = [+(0, _index.toDate)(intervalLeft.start), +(0, _index.toDate)(intervalLeft.end)].sort((a, b) => a - b);\n  const [rightStartTime, rightEndTime] = [+(0, _index.toDate)(intervalRight.start), +(0, _index.toDate)(intervalRight.end)].sort((a, b) => a - b);\n  if (options?.inclusive) return leftStartTime <= rightEndTime && rightStartTime <= leftEndTime;\n  return leftStartTime < rightEndTime && rightStartTime < leftEndTime;\n}","map":{"version":3,"names":["exports","areIntervalsOverlapping","_index","require","intervalLeft","intervalRight","options","leftStartTime","leftEndTime","toDate","start","end","sort","a","b","rightStartTime","rightEndTime","inclusive"],"sources":["D:/Faculty/Spring 2024/SW engineering/project/Expense-Tracker-Application/frontend/node_modules/date-fns/areIntervalsOverlapping.js"],"sourcesContent":["\"use strict\";\r\nexports.areIntervalsOverlapping = areIntervalsOverlapping;\r\nvar _index = require(\"./toDate.js\");\r\n\r\n/**\r\n * The {@link areIntervalsOverlapping} function options.\r\n */\r\n\r\n/**\r\n * @name areIntervalsOverlapping\r\n * @category Interval Helpers\r\n * @summary Is the given time interval overlapping with another time interval?\r\n *\r\n * @description\r\n * Is the given time interval overlapping with another time interval? Adjacent intervals do not count as overlapping unless `inclusive` is set to `true`.\r\n *\r\n * @param intervalLeft - The first interval to compare.\r\n * @param intervalRight - The second interval to compare.\r\n * @param options - The object with options\r\n *\r\n * @returns Whether the time intervals are overlapping\r\n *\r\n * @example\r\n * // For overlapping time intervals:\r\n * areIntervalsOverlapping(\r\n *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\r\n *   { start: new Date(2014, 0, 17), end: new Date(2014, 0, 21) }\r\n * )\r\n * //=> true\r\n *\r\n * @example\r\n * // For non-overlapping time intervals:\r\n * areIntervalsOverlapping(\r\n *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\r\n *   { start: new Date(2014, 0, 21), end: new Date(2014, 0, 22) }\r\n * )\r\n * //=> false\r\n *\r\n * @example\r\n * // For adjacent time intervals:\r\n * areIntervalsOverlapping(\r\n *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\r\n *   { start: new Date(2014, 0, 20), end: new Date(2014, 0, 30) }\r\n * )\r\n * //=> false\r\n *\r\n * @example\r\n * // Using the inclusive option:\r\n * areIntervalsOverlapping(\r\n *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\r\n *   { start: new Date(2014, 0, 20), end: new Date(2014, 0, 24) }\r\n * )\r\n * //=> false\r\n *\r\n * @example\r\n * areIntervalsOverlapping(\r\n *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\r\n *   { start: new Date(2014, 0, 20), end: new Date(2014, 0, 24) },\r\n *   { inclusive: true }\r\n * )\r\n * //=> true\r\n */\r\nfunction areIntervalsOverlapping(intervalLeft, intervalRight, options) {\r\n  const [leftStartTime, leftEndTime] = [\r\n    +(0, _index.toDate)(intervalLeft.start),\r\n    +(0, _index.toDate)(intervalLeft.end),\r\n  ].sort((a, b) => a - b);\r\n  const [rightStartTime, rightEndTime] = [\r\n    +(0, _index.toDate)(intervalRight.start),\r\n    +(0, _index.toDate)(intervalRight.end),\r\n  ].sort((a, b) => a - b);\r\n\r\n  if (options?.inclusive)\r\n    return leftStartTime <= rightEndTime && rightStartTime <= leftEndTime;\r\n\r\n  return leftStartTime < rightEndTime && rightStartTime < leftEndTime;\r\n}\r\n"],"mappings":"AAAA,YAAY;;AACZA,OAAO,CAACC,uBAAuB,GAAGA,uBAAuB;AACzD,IAAIC,MAAM,GAAGC,OAAO,CAAC,aAAa,CAAC;;AAEnC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASF,uBAAuBA,CAACG,YAAY,EAAEC,aAAa,EAAEC,OAAO,EAAE;EACrE,MAAM,CAACC,aAAa,EAAEC,WAAW,CAAC,GAAG,CACnC,CAAC,CAAC,CAAC,EAAEN,MAAM,CAACO,MAAM,EAAEL,YAAY,CAACM,KAAK,CAAC,EACvC,CAAC,CAAC,CAAC,EAAER,MAAM,CAACO,MAAM,EAAEL,YAAY,CAACO,GAAG,CAAC,CACtC,CAACC,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,GAAGC,CAAC,CAAC;EACvB,MAAM,CAACC,cAAc,EAAEC,YAAY,CAAC,GAAG,CACrC,CAAC,CAAC,CAAC,EAAEd,MAAM,CAACO,MAAM,EAAEJ,aAAa,CAACK,KAAK,CAAC,EACxC,CAAC,CAAC,CAAC,EAAER,MAAM,CAACO,MAAM,EAAEJ,aAAa,CAACM,GAAG,CAAC,CACvC,CAACC,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,GAAGC,CAAC,CAAC;EAEvB,IAAIR,OAAO,EAAEW,SAAS,EACpB,OAAOV,aAAa,IAAIS,YAAY,IAAID,cAAc,IAAIP,WAAW;EAEvE,OAAOD,aAAa,GAAGS,YAAY,IAAID,cAAc,GAAGP,WAAW;AACrE","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}