{"ast":null,"code":"\"use strict\";\n\nexports.closestIndexTo = closestIndexTo;\nvar _index = require(\"./toDate.js\");\n\n/**\r\n * @name closestIndexTo\r\n * @category Common Helpers\r\n * @summary Return an index of the closest date from the array comparing to the given date.\r\n *\r\n * @description\r\n * Return an index of the closest date from the array comparing to the given date.\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n *\r\n * @param dateToCompare - The date to compare with\r\n * @param dates - The array to search\r\n *\r\n * @returns An index of the date closest to the given date or undefined if no valid value is given\r\n *\r\n * @example\r\n * // Which date is closer to 6 September 2015?\r\n * const dateToCompare = new Date(2015, 8, 6)\r\n * const datesArray = [\r\n *   new Date(2015, 0, 1),\r\n *   new Date(2016, 0, 1),\r\n *   new Date(2017, 0, 1)\r\n * ]\r\n * const result = closestIndexTo(dateToCompare, datesArray)\r\n * //=> 1\r\n */\nfunction closestIndexTo(dateToCompare, dates) {\n  const date = (0, _index.toDate)(dateToCompare);\n  if (isNaN(Number(date))) return NaN;\n  const timeToCompare = date.getTime();\n  let result;\n  let minDistance;\n  dates.forEach(function (dirtyDate, index) {\n    const currentDate = (0, _index.toDate)(dirtyDate);\n    if (isNaN(Number(currentDate))) {\n      result = NaN;\n      minDistance = NaN;\n      return;\n    }\n    const distance = Math.abs(timeToCompare - currentDate.getTime());\n    if (result == null || distance < minDistance) {\n      result = index;\n      minDistance = distance;\n    }\n  });\n  return result;\n}","map":{"version":3,"names":["exports","closestIndexTo","_index","require","dateToCompare","dates","date","toDate","isNaN","Number","NaN","timeToCompare","getTime","result","minDistance","forEach","dirtyDate","index","currentDate","distance","Math","abs"],"sources":["D:/Faculty/Spring 2024/SW engineering/project/Expense-Tracker-Application/frontend/node_modules/date-fns/closestIndexTo.js"],"sourcesContent":["\"use strict\";\r\nexports.closestIndexTo = closestIndexTo;\r\nvar _index = require(\"./toDate.js\");\r\n\r\n/**\r\n * @name closestIndexTo\r\n * @category Common Helpers\r\n * @summary Return an index of the closest date from the array comparing to the given date.\r\n *\r\n * @description\r\n * Return an index of the closest date from the array comparing to the given date.\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n *\r\n * @param dateToCompare - The date to compare with\r\n * @param dates - The array to search\r\n *\r\n * @returns An index of the date closest to the given date or undefined if no valid value is given\r\n *\r\n * @example\r\n * // Which date is closer to 6 September 2015?\r\n * const dateToCompare = new Date(2015, 8, 6)\r\n * const datesArray = [\r\n *   new Date(2015, 0, 1),\r\n *   new Date(2016, 0, 1),\r\n *   new Date(2017, 0, 1)\r\n * ]\r\n * const result = closestIndexTo(dateToCompare, datesArray)\r\n * //=> 1\r\n */\r\nfunction closestIndexTo(dateToCompare, dates) {\r\n  const date = (0, _index.toDate)(dateToCompare);\r\n\r\n  if (isNaN(Number(date))) return NaN;\r\n\r\n  const timeToCompare = date.getTime();\r\n\r\n  let result;\r\n  let minDistance;\r\n  dates.forEach(function (dirtyDate, index) {\r\n    const currentDate = (0, _index.toDate)(dirtyDate);\r\n\r\n    if (isNaN(Number(currentDate))) {\r\n      result = NaN;\r\n      minDistance = NaN;\r\n      return;\r\n    }\r\n\r\n    const distance = Math.abs(timeToCompare - currentDate.getTime());\r\n    if (result == null || distance < minDistance) {\r\n      result = index;\r\n      minDistance = distance;\r\n    }\r\n  });\r\n\r\n  return result;\r\n}\r\n"],"mappings":"AAAA,YAAY;;AACZA,OAAO,CAACC,cAAc,GAAGA,cAAc;AACvC,IAAIC,MAAM,GAAGC,OAAO,CAAC,aAAa,CAAC;;AAEnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASF,cAAcA,CAACG,aAAa,EAAEC,KAAK,EAAE;EAC5C,MAAMC,IAAI,GAAG,CAAC,CAAC,EAAEJ,MAAM,CAACK,MAAM,EAAEH,aAAa,CAAC;EAE9C,IAAII,KAAK,CAACC,MAAM,CAACH,IAAI,CAAC,CAAC,EAAE,OAAOI,GAAG;EAEnC,MAAMC,aAAa,GAAGL,IAAI,CAACM,OAAO,CAAC,CAAC;EAEpC,IAAIC,MAAM;EACV,IAAIC,WAAW;EACfT,KAAK,CAACU,OAAO,CAAC,UAAUC,SAAS,EAAEC,KAAK,EAAE;IACxC,MAAMC,WAAW,GAAG,CAAC,CAAC,EAAEhB,MAAM,CAACK,MAAM,EAAES,SAAS,CAAC;IAEjD,IAAIR,KAAK,CAACC,MAAM,CAACS,WAAW,CAAC,CAAC,EAAE;MAC9BL,MAAM,GAAGH,GAAG;MACZI,WAAW,GAAGJ,GAAG;MACjB;IACF;IAEA,MAAMS,QAAQ,GAAGC,IAAI,CAACC,GAAG,CAACV,aAAa,GAAGO,WAAW,CAACN,OAAO,CAAC,CAAC,CAAC;IAChE,IAAIC,MAAM,IAAI,IAAI,IAAIM,QAAQ,GAAGL,WAAW,EAAE;MAC5CD,MAAM,GAAGI,KAAK;MACdH,WAAW,GAAGK,QAAQ;IACxB;EACF,CAAC,CAAC;EAEF,OAAON,MAAM;AACf","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}